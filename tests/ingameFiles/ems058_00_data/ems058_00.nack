importactions Gastodon as gastodon
importlibrary Global as Global

def node_000 : 7
	>> Global.node_037 
	>> Global.node_012 
	>> Global.node_006 
	>> Global.node_011 
	>> Global.node_005 
	>> Global.node_007 
	>> Global.node_020 
	if self.enraged() 
		>> node_018 
	else 
		>> node_003 
	endif 
	reset 
endf 

def node_001 : 35
	self.targetEnemy(target_em.random_player_or_cat) 
	return 
endf 

def node_002 : 15
	if function#7B() 
		>> node_006 
		repeat 
	else 
	endif 
	return 
endf 

def node_003 : 44
	>> node_001 
	if function#32() 
		>> node_004 
	else 
		>> node_005 
	endif 
	return 
endf 

def node_004 : 8
	if self.vertical_distance_to_target().leq(300) 
		if self.distance_2d_to_target().leq(500) 
			>> node_010 
		elif self.distance_2d_to_target().leq(1500) 
			>> node_011 
		else 
			>> node_012 
		endif 
	else 
		>> node_012 
	endif 
	@ unkn3:4194304 
	return 
endf 

def node_005 : 6
	if self.distance_2d_to_target().leq(400) 
		>> node_014 
	elif self.distance_2d_to_target().leq(1000) 
		>> node_015 
	else 
		>> node_016 
	endif 
	return 
endf 

def node_006 : 16
	if self.distance_2d_to_target().leq(400) 
		>> node_007 
	elif self.distance_2d_to_target().leq(1200) 
		>> node_008 
	else 
		>> node_009 
	endif 
	return 
endf 

def node_007 : 17
	>> Global.node_002 
	>> Global.node_039 
	>> Global.node_035 
	return 
endf 

def node_008 : 18
	>> Global.node_035 
	return 
endf 

def node_009 : 19
	>> Global.node_002 
	>> node_017 
	return 
endf 

def node_010 : 32
	random (75) >> Global.node_033 
	elser (25) >> Global.node_039 
				>> Global.node_034 
	endr 
	return 
endf 

def node_011 : 2
	random (70) >> Global.node_034 
	elser (30) >> Global.node_029 
				>> Global.node_033 
	endr 
	return 
endf 

def node_012 : 3
	random (70) >> Global.node_030 
				>> Global.node_034 
	elser (30) >> Global.node_029 
				>> Global.node_033 
	endr 
	return 
endf 

def node_013 : 45
	>> Global.node_029 
	>> Global.node_033 
	return 
endf 

def node_014 : 13
	>> Global.node_002 
	>> Global.node_039 
	>> Global.node_035 
	return 
endf 

def node_015 : 10
	>> Global.node_038 
	return 
endf 

def node_016 : 36
	>> Global.node_028 
	>> Global.node_038 
	return 
endf 

def node_017 : 22
	-> action#09(2,6,0,700,650) 
	if self.distance_2d_to_target().leq(700) 
	else 
		repeat 
	endif 
	return 
endf 

def node_018 : 37
	>> node_020 
	>> node_021 
	return 
endf 

def node_019 : 43
	if [RegisterVar0 == 0] 
		-> action#59() 
		[RegisterVar0 ++] 
	else 
	endif 
	return 
endf 

def node_020 : 38
	self.targetEnemy(target_em.any_monster) 
	if self.target(20) 
		if self.target(13) 
			self.targetEnemy(58) 
			if function#2D(2) 
				>> Global.node_035 
				reset 
			else 
			endif 
		else 
			self.targetEnemy(58) 
		endif 
	else 
		self.targetEnemy(48) 
	endif 
	return 
endf 

def node_021 : 42
	if self.vertical_distance_to_target().leq(300) 
		if self.distance_2d_to_target().leq(500) 
			>> node_010 
		elif self.distance_2d_to_target().leq(1500) 
			>> node_011 
		else 
			>> node_012 
		endif 
	else 
		>> node_012 
	endif 
	return 
endf 

def node_022 : 39
	random (30) >> Global.node_033 
	elser (70) >> Global.node_039 
				>> Global.node_034 
	endr 
	return 
endf 

def node_023 : 40
	random (70) >> Global.node_034 
	elser (30) >> Global.node_029 
				>> Global.node_033 
	endr 
	return 
endf 

def node_024 : 41
	random (70) >> Global.node_030 
				>> Global.node_034 
	elser (30) >> Global.node_029 
				>> Global.node_033 
	endr 
	return 
endf 

def node_025 : 46
	>> Global.node_029 
	>> Global.node_033 
	return 
endf 

