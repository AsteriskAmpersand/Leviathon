importactions Barroth as barroth

def node_000
	conclude 
endf 

def node_001
	if function#5A() 
		>> node_003 
	elif function#5A(1) 
		>> node_033 
	elif function#5A(2) 
		>> node_034 
	elif function#5A(3) 
		>> node_002 
	elif function#5A(4) 
		>> node_004 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_002
	>> node_025 
	return 
endf 

def node_003
	random (50) 
	elser (50) >> node_025 
	endr 
	return 
endf 

def node_004
	random (40) >> node_027 
	elser (20) -> barroth.sniff_s() 
	elser (10) -> barroth.sniff_l() 
	elser (30) 
	endr 
	return 
endf 

def node_005
	>> node_009 
	-> barroth.ant_eat() 
	return 
endf 

def node_006
	-> barroth.rush_headbutt() 
	return 
endf 

def node_007
	if self.in_map(st.Guiding_Lands).in_area(-1) 
		-> barroth.egc_sleep() 
	else 
		-> barroth.sleep() 
	endif 
	return 
endf 

def node_008
	-> barroth.drink() 
	reset 
endf 

def node_009
	-> barroth.normal_turn() 
	return 
endf 

def node_010
	if self.angle_2d_cw_between(30,330) 
		-> barroth.normal_turn() 
	else 
	endif 
	return 
endf 

def node_011
	if self.angle_2d_cw_between(80,280) 
		-> barroth.normal_turn() 
	else 
	endif 
	return 
endf 

def node_012
	if self.distance_3d_to_target().leq(800) 
		-> barroth.back_turn() 
	elif self.angle_2d_cw_between(30,330) 
		-> barroth.quick_turn() 
	else 
	endif 
	return 
endf 

def node_013
	-> barroth.back_turn() 
	return 
endf 

def node_014
	-> barroth.back_step() 
	return 
endf 

def node_015
	if self.current_quest().is_rank(rank.MR) 
		>> node_101 
	else 
		if self.targetEnemy(target_em.any_monster) 
			if self.target(13) 
			else 
				if self.vertical_distance_to_target().leq(1500) 
					if self.distance_3d_to_target().leq(3000) 
						if self.target_is(em.Jyuratodus) 
							>> node_018 
						elif self.target_is(em.Diablos) 
							>> node_019 
						elif self.target_is(em.Black_Diablos) 
							>> node_019 
						elif function#30(2) 
							>> node_016 
						else 
							>> node_017 
						endif 
					else 
					endif 
				else 
				endif 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_016
	if self.in_map(st.Special_Arena).in_area(-1) 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
	else 
		if [RegisterVar3 -= 8] 
			>> node_023 
			return 
		else 
		endif 
	endif 
	if self.target.in_combat() 
		random (25) >> node_020 
		elser (20) >> node_021 
		elser (55) >> node_022 
		endr 
	else 
		random (35) >> node_020 
		elser (50) >> node_021 
		elser (15) >> node_022 
		endr 
	endif 
	return 
endf 

def node_017
	if self.in_map(st.Special_Arena).in_area(-1) 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
	else 
		if [RegisterVar3 -= 12] 
			>> node_023 
			return 
		else 
		endif 
	endif 
	if self.target.in_combat() 
		random (15) >> node_020 
		elser (25) >> node_021 
		elser (60) >> node_022 
		endr 
	else 
		random (35) >> node_020 
		elser (50) >> node_021 
		elser (15) >> node_022 
		endr 
	endif 
	return 
endf 

def node_018
	if self.target(39) 
		>> node_017 
	else 
		if self.target.in_combat() 
			random (15) >> node_020 
			elser (25) >> node_021 
			elser (60) >> node_022 
			endr 
		else 
			random (35) >> node_020 
			elser (50) >> node_021 
			elser (15) >> node_022 
			endr 
		endif 
	endif 
	return 
endf 

def node_019
	if self.target(39) 
		>> node_016 
	else 
		if self.in_map(st.Wildspire_Waste).in_area(5) 
		elif self.in_map(st.Wildspire_Waste).in_area(6) 
		else 
			>> node_016 
			return 
		endif 
		if self.in_combat() 
			if self.target.in_combat() 
				random (15) >> node_020 
				elser (35) >> node_021 
				elser (50) >> node_022 
				endr 
			else 
				random (35) >> node_020 
				elser (50) >> node_021 
				elser (15) >> node_022 
				endr 
			endif 
		else 
			>> node_016 
		endif 
	endif 
	return 
endf 

def node_020
	[RegisterVar3 |-] 
	return 
endf 

def node_021
	[RegisterVar3 |-] 
	>> node_057 
	>> node_030 
	return 
endf 

def node_022
	if self.vertical_distance_to_target().gt(800) 
		[RegisterVar3 |-] 
		>> node_030 
	elif self.distance_3d_to_target().gt(2500) 
		>> node_044 
		repeat 
	else 
		[RegisterVar3 |-] 
		random (40) >> node_061 
		elser (30) >> node_068 
		elser (30) >> node_043 
					>> node_069 
		endr 
	endif 
	return 
endf 

def node_023
	[RegisterVar3 ++] 
	self.force_area_change2() 
	return 
endf 

def node_024
	>> node_022 
	>> node_023 
	return 
endf 

def node_025
	[RegisterVar2 |-] 
	-> barroth.search_desire() 
	return 
endf 

def node_026
	if self.enraged() 
		-> barroth.search_switch_anger() 
	else 
		-> barroth.search_switch() 
	endif 
	return 
endf 

def node_027
	-> barroth.search_feeling() 
	return 
endf 

def node_028
	-> barroth.refresh() 
	return 
endf 

def node_029
	-> barroth.tired() 
	return 
endf 

def node_030
	-> barroth.growl() 
	return 
endf 

def node_031
	-> barroth.threat_area_jump() 
	return 
endf 

def node_032
	-> barroth.threat_angry() 
	return 
endf 

def node_033
	>> node_010 
	-> barroth.marking() 
	return 
endf 

def node_034
	if function#103() 
		-> barroth.no_mud_splash() 
	else 
		-> barroth.mud_splash_trace() 
	endif 
	return 
endf 

def node_035
	if function#103() 
		-> barroth.no_mud_splash() 
	else 
		-> barroth.mud_splash() 
	endif 
	return 
endf 

def node_036
	>> node_009 
	-> barroth.ant_eat_stamina() 
	return 
endf 

def node_037
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		>> node_038 
	endif 
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		>> node_038 
	endif 
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		>> node_038 
	endif 
	return 
endf 

def node_038
	if self.fatigued() 
		-> barroth.tired_walk(2,1,5,1500,400) 
	else 
		-> barroth.walk(2,1,5,1500,400) 
	endif 
	return 
endf 

def node_039
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		>> node_040 
	endif 
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		>> node_040 
	endif 
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		>> node_040 
	endif 
	return 
endf 

def node_040
	if self.fatigued() 
		-> barroth.tired_dash(2,1,0,500,500) 
	else 
		-> barroth.dash(2,1,0,500,500) 
	endif 
	return 
endf 

def node_041
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		>> node_042 
	endif 
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		>> node_042 
	endif 
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		>> node_042 
	endif 
	return 
endf 

def node_042
	if self.fatigued() 
		-> barroth.tired_dash(2,1,0,1000,500) 
	else 
		-> barroth.dash(2,1,0,1000,500) 
	endif 
	return 
endf 

def node_043
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		-> barroth.dash(2,1,0,800,500) 
	endif 
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		-> barroth.dash(2,1,0,800,500) 
	endif 
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		-> barroth.dash(2,1,0,800,500) 
	endif 
	return 
endf 

def node_044
	if self.distance_3d_to_target().leq(1000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,1000) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,1000) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,1000) 
	endif 
	return 
endf 

def node_045
	if self.distance_2d_to_target().leq(2000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,1500) 
	endif 
	if self.distance_2d_to_target().leq(2000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,1500) 
	endif 
	if self.distance_2d_to_target().leq(2000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,1500) 
	endif 
	return 
endf 

def node_046
	if self.distance_2d_to_target().leq(3000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,2500) 
	endif 
	if self.distance_2d_to_target().leq(3000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,2500) 
	endif 
	if self.distance_2d_to_target().leq(3000) 
		return 
	else 
		-> barroth.dash(2,1,0,800,2500) 
	endif 
	return 
endf 

def node_047
	if self.distance_3d_to_target().leq(500) 
		return 
	else 
		if self.fatigued() 
			-> barroth.tired_dash(2,1,0,800,500) 
		else 
			-> barroth.dash(2,1,0,800,500) 
		endif 
	endif 
	repeat 
endf 

def node_048
	if [RegisterVar2 -= 10] 
		-> barroth.search_desire_2() 
	else 
	endif 
	return 
endf 

def node_049
	[RegisterVar2 ++] 
	-> barroth.mud_cover_life() 
	reset 
endf 

def node_050
	if [RegisterVar0 += 0] 
		>> node_052 
	elif [RegisterVar0 -= 40] 
		[RegisterVar0 ++] 
	elif [RegisterVar0 -= 35] 
		>> node_051 
		random (20) 
					[RegisterVar0 ++] 
		elser (80) 
		endr 
	elif [RegisterVar0 -= 30] 
		>> node_051 
		random (5) 
					[RegisterVar0 ++] 
		elser (95) 
		endr 
	else 
		>> node_051 
	endif 
	return 
endf 

def node_051
	if self.enraged() 
		random (80) 
					[RegisterVar0 |-] 
		elser (20) 
		endr 
	else 
		[RegisterVar0 |-] 
	endif 
	return 
endf 

def node_052
	if function#7C() 
		return 
	elif function#103(1,6) 
		return 
	elif function#103(1,4) 
		random (100) 
					return 
		elser (0) 
		endr 
	elif function#103(1,3) 
		random (15) 
					return 
		elser (85) 
		endr 
	else 
	endif 
	>> node_053 
	return 
endf 

def node_053
	if function#101() 
		function#102() 
		if self.distance_3d_to_target().leq(600) 
		else 
			>> node_058 
			>> node_047 
		endif 
		[RegisterVar0 |-] 
		-> barroth.mud_cover() 
	else 
	endif 
	return 
endf 

def node_054
	[RegisterVar0 ++] 
	[RegisterVar0 |-] 
	return 
endf 

def node_055
	if function#104(1500,30) 
		>> node_056 
	elif function#104(3000,15) 
		>> node_056 
	else 
	endif 
	return 
endf 

def node_056
	if self.distance_3d_to_target().gt(800) 
		>> node_061 
		reset 
	else 
	endif 
	return 
endf 

def node_057
	-> barroth.quick_turn() 
	return 
endf 

def node_058
	if self.angle_2d_cw_between(30,330) 
		-> barroth.quick_turn() 
	else 
	endif 
	return 
endf 

def node_059
	if self.angle_2d_cw_between(80,280) 
		-> barroth.quick_turn() 
	else 
	endif 
	return 
endf 

def node_060
	if self.angle_2d_cw_between(100,260) 
		-> barroth.quick_turn() 
	else 
	endif 
	return 
endf 

def node_061
	if self.angle_2d_cw_between(30,90) 
		if self.distance_3d_to_target().leq(700) 
			>> node_014 
		else 
		endif 
	elif self.angle_2d_cw_between(90,270) 
		if self.distance_3d_to_target().leq(900) 
			>> node_014 
		else 
		endif 
	elif self.angle_2d_cw_between(270,330) 
		if self.distance_3d_to_target().leq(700) 
			>> node_014 
		else 
		endif 
	else 
	endif 
	-> barroth.rush_headbutt() 
	return 
endf 

def node_062
	-> barroth.rush_headbutt_attack() 
	return 
endf 

def node_063
	-> barroth.side_bite() 
	return 
endf 

def node_064
	if self.distance_3d_to_target().leq(500) 
		-> barroth.side_tackle() 
	elif self.distance_3d_to_target().leq(900) 
		if function#105(2) 
			-> barroth.side_tackle() 
		elif function#105() 
			-> barroth.side_tackle() 
		else 
			>> node_043 
			-> barroth.side_tackle() 
		endif 
	else 
		>> node_043 
		-> barroth.side_tackle() 
	endif 
	return 
endf 

def node_065
	-> barroth.jump_attack_2() 
	return 
endf 

def node_066
	-> barroth.tail_wind() 
	return 
endf 

def node_067
	-> barroth.tail_wind_short() 
	return 
endf 

def node_068
	if self.distance_2d_to_target().gt(600) 
		>> node_060 
		>> node_043 
	else 
	endif 
	-> barroth.head_attack() 
	return 
endf 

def node_069
	>> node_058 
	-> barroth.mid_range_bite() 
	return 
endf 

def node_070
	>> node_058 
	-> barroth.tackle_attack() 
	return 
endf 

def node_071
	-> barroth.side_bite() 
	return 
endf 

def node_072
	>> node_057 
	-> barroth.jump_attack_2() 
	return 
endf 

def node_073
	if self.distance_2d_to_target().leq(500) 
		>> node_013 
	elif self.distance_2d_to_target().leq(2000) 
		>> node_057 
	else 
		>> node_030 
		return 
	endif 
	if self.above_target() 
		-> barroth.jump_attack_wall_up() 
	else 
		-> barroth.jump_attack_wall_down() 
	endif 
	return 
endf 

def node_074
	>> node_060 
	if self.distance_3d_to_target().leq(800) 
		random (70) -> barroth.head_attack() 
		elser (30) -> barroth.mid_range_bite() 
		endr 
	else 
		random (100) -> barroth.mid_range_bite() 
		elser (0) -> barroth.head_attack() 
		endr 
	endif 
	return 
endf 

def node_075
	if function#2D(1) 
		return 
	else 
		if self.distance_3d_to_target().leq(900) 
			random (90) >> node_076 
			elser (10) >> node_078 
			endr 
		else 
			>> node_043 
		endif 
	endif 
	return 
endf 

def node_076
	if self.distance_3d_to_target().leq(1200) 
		if self.angle_2d_cw_between(140,220) 
			>> node_067 
		else 
			>> node_079 
		endif 
	else 
	endif 
	return 
endf 

def node_077
	if self.distance_3d_to_target().leq(1200) 
		if self.angle_2d_cw_between(140,220) 
			>> node_066 
		else 
			>> node_079 
		endif 
	else 
	endif 
	return 
endf 

def node_078
	if self.distance_3d_to_target().leq(1500) 
		>> node_035 
	else 
		>> node_079 
	endif 
	return 
endf 

def node_079
	if self.angle_2d_cw_between(45,140) 
		>> node_064 
	elif self.angle_2d_cw_between(140,170) 
		>> node_066 
	elif self.angle_2d_cw_between(170,190) 
		>> node_067 
	elif self.angle_2d_cw_between(190,220) 
		>> node_066 
	elif self.angle_2d_cw_between(220,315) 
		>> node_064 
	else 
		>> node_068 
	endif 
	return 
endf 

def node_080
	>> node_081 
	if function#2D(1) 
		return 
	else 
		if self.angle_2d_cw_between(30,330) 
		else 
			>> node_079 
		endif 
	endif 
	return 
endf 

def node_081
	if self.angle_2d_cw_between(45,170) 
		>> node_063 
	elif self.angle_2d_cw_between(190,315) 
		>> node_063 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_082
	if function#2D(1) 
		return 
	elif self.target.helpless_0() 
		random (40) 
					if self.distance_2d_to_target().leq(600) 
						>> node_068 
					else 
						>> node_061 
					endif 
		elser (60) 
		endr 
	else 
	endif 
	return 
endf 

def node_083
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.target.mudded() 
		>> node_044 
		>> node_070 
	else 
	endif 
	if function#5D() 
		function#5E() 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> node_084 
		self.targetArea(4) 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	return 
endf 

def node_084
	if self.angle_2d_cw_between(90,270) 
		>> node_086 
	elif self.distance_3d_to_target().gt(3000) 
		>> node_086 
	else 
		>> node_085 
	endif 
	return 
endf 

def node_085
	-> barroth.search_switch() 
	return 
endf 

def node_086
	-> barroth.search_feeling() 
	return 
endf 

def node_087
	self.targetArea(19) 
	if self.distance_2d_to_target().gt(1000) 
		>> node_047 
	else 
		>> node_088 
	endif 
	return 
endf 

def node_088
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_010 
	>> node_098 
	return 
endf 

def node_089
	>> node_045 
	random (50) >> node_068 
	elser (50) >> node_061 
	endr 
	return 
endf 

def node_090
	>> node_045 
	>> node_045 
	random (20) >> node_059 
				>> node_032 
	elser (80) 
				>> node_073 
	endr 
	return 
endf 

def node_091
	>> node_043 
	>> node_068 
	return 
endf 

def node_092
	if self.target(0) 
	else 
		>> node_095 
	endif 
	if self.distance_3d_to_target().gt(1000) 
	else 
		>> node_094 
	endif 
	reset 
endf 

def node_093
	reset 
endf 

def node_094
	if self.angular_1A(270,90) 
		*&
	else 
		-> barroth.side_tackle() 
	endif 
	reset 
endf 

def node_095
	if self.target(9) 
		return 
	else 
	endif 
	if self.angular_19(270,90) 
		*&
		reset 
	else 
	endif 
	return 
endf 

def node_096
	self.targetArea(19) 
	if self.distance_3d_recalc_to_target().gt(1000) 
		>> node_047 
	else 
	endif 
	return 
endf 

def node_097
	random (15) -> barroth.wait() 
	elser (5) -> barroth.sniff_s() 
	elser (20) -> barroth.sniff_l() 
	elser (20) -> barroth.search_feeling() 
	elser (30) -> barroth.search_switch_anger() 
	elser (10) -> barroth.search_switch() 
	endr 
	return 
endf 

def node_098
	random (37) -> barroth.wait() 
	elser (23) -> barroth.search_feeling() 
	elser (40) -> barroth.threat_area_jump() 
	endr 
	return 
endf 

def node_099
	-> barroth.wait() 
	return 
endf 

def node_100
	if self.fatigued() 
		-> barroth.tired_walk(2,1,5,1500,400) 
	else 
		-> barroth.walk(2,1,5,1500,400) 
	endif 
	return 
endf 

def node_101
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.vertical_distance_to_target().leq(1500) 
				if self.distance_3d_to_target().leq(3000) 
					if self.target_is(em.Jyuratodus) 
						>> node_104 
					elif self.target_is(em.Diablos) 
						>> node_105 
					elif self.target_is(em.Black_Diablos) 
						>> node_105 
					elif function#30(2) 
						>> node_102 
					else 
						>> node_103 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_102
	if self.in_map(st.Special_Arena).in_area(-1) 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
	else 
		if [RegisterVar3 -= 8] 
			>> node_023 
			return 
		else 
		endif 
	endif 
	if self.target.in_combat() 
		random (25) >> node_020 
		elser (20) >> node_021 
		elser (55) >> node_022 
		elser (0) >> node_023 
		elser (0) >> node_024 
		endr 
	else 
		random (35) >> node_020 
		elser (50) >> node_021 
		elser (15) >> node_022 
		elser (0) >> node_023 
		elser (0) >> node_024 
		endr 
	endif 
	return 
endf 

def node_103
	if self.in_map(st.Special_Arena).in_area(-1) 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
	else 
		if [RegisterVar3 -= 12] 
			>> node_023 
			return 
		else 
		endif 
	endif 
	if self.target.in_combat() 
		random (10) >> node_020 
		elser (20) >> node_021 
		elser (50) >> node_022 
		elser (0) >> node_023 
		elser (20) >> node_024 
		endr 
	else 
		random (35) >> node_020 
		elser (50) >> node_021 
		elser (15) >> node_022 
		elser (0) >> node_023 
		elser (0) >> node_024 
		endr 
	endif 
	return 
endf 

def node_104
	if self.target(39) 
		>> node_103 
	else 
		if self.target.in_combat() 
			random (15) >> node_020 
			elser (25) >> node_021 
			elser (60) >> node_022 
			elser (0) >> node_023 
			elser (0) >> node_024 
			endr 
		else 
			random (35) >> node_020 
			elser (50) >> node_021 
			elser (15) >> node_022 
			elser (0) >> node_023 
			elser (0) >> node_024 
			endr 
		endif 
	endif 
	return 
endf 

def node_105
	if self.target(39) 
		>> node_102 
	else 
		if self.in_map(st.Wildspire_Waste).in_area(5) 
		elif self.in_map(st.Wildspire_Waste).in_area(6) 
		else 
			>> node_102 
			return 
		endif 
		if self.in_combat() 
			if self.target.in_combat() 
				random (15) >> node_020 
				elser (35) >> node_021 
				elser (50) >> node_022 
				elser (0) >> node_023 
				elser (0) >> node_024 
				endr 
			else 
				random (35) >> node_020 
				elser (50) >> node_021 
				elser (15) >> node_022 
				elser (0) >> node_023 
				elser (0) >> node_024 
				endr 
			endif 
		else 
			>> node_102 
		endif 
	endif 
	return 
endf 

