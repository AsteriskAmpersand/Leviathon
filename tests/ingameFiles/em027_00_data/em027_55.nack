importactions Teostra as teostra

def node_000
	conclude 
endf 

def node_001
	if self.flying() 
		if function#AF(5000) 
			-> teostra.landing() 
		else 
			>> node_004 
		endif 
	else 
	endif 
	return 
endf 

def node_002
	if self.flying() 
	else 
		-> teostra.take_off() 
	endif 
	return 
endf 

def node_003
	if self.flying() 
	else 
		-> teostra.take_off(7,0,0,600) 
	endif 
	return 
endf 

def node_004
	self.targetArea(target_area.area_aerial_center) 
	>> node_133 
	self.targetArea(target_area.area_center) 
	-> teostra.landing() 
	return 
endf 

def node_005
	if function#102(0,3) 
		>> node_006 
	elif function#102(2) 
		>> node_006 
	else 
		>> node_007 
	endif 
	return 
endf 

def node_006
	>> node_001 
	-> teostra.dust_explosion3() 
	return 
endf 

def node_007
	>> node_001 
	-> teostra.dust_explosion_acting3() 
	-> teostra.jump_attack() 
	-> teostra.threat_short() 
	return 
endf 

def node_008
	>> node_009 
	>> node_010 
	return 
endf 

def node_009
	>> node_001 
	-> teostra.reset_hot_air() 
	return 
endf 

def node_010
	if function#102(0,2) 
		if self.distance_2d_to_target().leq(500) 
			random (35) >> node_057 
			elser (35) >> node_051 
			elser (15) >> node_011 
			elser (15) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(700) 
			random (25) >> node_057 
			elser (25) >> node_051 
			elser (25) >> node_005 
			elser (25) >> node_011 
			endr 
		elif self.distance_2d_to_target().leq(1300) 
			random (35) >> node_011 
			elser (10) >> node_088 
			elser (20) >> node_005 
			elser (35) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2500) 
			random (35) >> node_088 
			elser (10) >> node_087 
			elser (35) >> node_011 
			elser (20) >> node_005 
			endr 
		else 
			random (50) >> node_055 
			elser (50) >> node_081 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(500) 
			random (35) >> node_057 
			elser (45) >> node_051 
			elser (20) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(700) 
			random (30) >> node_057 
			elser (40) >> node_051 
			elser (30) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(1300) 
			random (30) >> node_005 
			elser (10) >> node_088 
			elser (60) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (10) >> node_087 
			elser (45) >> node_088 
			elser (45) >> node_005 
			endr 
		else 
			random (50) >> node_055 
			elser (50) >> node_081 
			endr 
		endif 
	endif 
	return 
endf 

def node_011
	>> node_001 
	if function#102(0,3) 
		-> teostra.small_nova() 
	else 
		-> teostra.small_nova3() 
	endif 
	return 
endf 

def node_012
	>> node_013 
	>> node_014 
	return 
endf 

def node_013
	>> node_001 
	-> teostra.dust_sprinkle_back() 
	return 
endf 

def node_014
	if function#102(1,2) 
		if self.distance_2d_to_target().leq(700) 
			random (50) >> node_057 
			elser (20) >> node_053 
			elser (30) >> node_085 
			endr 
		elif self.distance_2d_to_target().leq(1300) 
			random (40) >> node_092 
			elser (30) >> node_015 
			elser (30) >> node_085 
			endr 
		else 
			random (60) >> node_092 
			elser (40) >> node_085 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(800) 
			random (50) >> node_057 
			elser (20) >> node_053 
			elser (30) >> node_085 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (50) >> node_015 
			elser (50) >> node_085 
			endr 
		else 
			>> node_085 
		endif 
	endif 
	return 
endf 

def node_015
	>> node_087 
	>> node_085 
	return 
endf 

def node_016
	if function#102(1,4) 
		if self.distance_2d_to_target().leq(800) 
			if function#11(500) 
				[RegisterVar4 |-] 
				if [RegisterVar4 -= 7] 
					[RegisterVar4 ++] 
					>> node_012 
				elif [RegisterVar4 -= 5] 
					random (35) 
								[RegisterVar4 ++] 
								>> node_012 
					elser (65) 
					endr 
				elif [RegisterVar4 -= 3] 
					random (10) 
								[RegisterVar4 ++] 
								>> node_012 
					elser (90) 
					endr 
				else 
				endif 
			else 
			endif 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_017
	if function#102(2,2) 
		[RegisterVar1 |-] 
		if [RegisterVar1 -= 13] 
			[RegisterVar1 ++] 
			>> node_018 
			reset 
		else 
		endif 
	else 
	endif 
	if function#102(0,4) 
		if self.distance_2d_to_target().leq(800) 
			if function#11(500) 
				[RegisterVar4 |-] 
				if [RegisterVar4 -= 6] 
					[RegisterVar4 ++] 
					>> node_008 
				elif [RegisterVar4 -= 4] 
					random (35) 
								[RegisterVar4 ++] 
								>> node_008 
					elser (65) 
					endr 
				elif [RegisterVar4 -= 2] 
					random (10) 
								[RegisterVar4 ++] 
								>> node_008 
					elser (90) 
					endr 
				else 
				endif 
			else 
			endif 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_018
	if self.distance_2d_to_target().leq(800) 
	else 
		>> node_082 
	endif 
	if self.distance_2d_to_target().leq(800) 
	else 
		>> node_082 
	endif 
	if self.distance_2d_to_target().leq(800) 
	else 
		>> node_082 
	endif 
	>> node_003 
	-> teostra.super_nova() 
	>> node_001 
	return 
endf 

def node_019
	>> node_001 
	>> node_118 
	>> node_051 
	return 
endf 

def node_020
	>> node_080 
	>> node_050 
	return 
endf 

def node_021
	>> node_080 
	>> node_025 
	return 
endf 

def node_022
	>> node_080 
	if self.distance_2d_to_target().leq(1000) 
		if function#102(2,1) 
			random (20) >> node_080 
			elser (80) 
			endr 
		elif function#102(2,2) 
			random (30) >> node_080 
			elser (70) 
			endr 
		else 
		endif 
	else 
	endif 
	>> node_025 
	return 
endf 

def node_023
	>> node_033 
	if self.distance_2d_to_target().leq(1000) 
		>> node_021 
	else 
	endif 
	return 
endf 

def node_024
	>> node_043 
	if self.distance_2d_to_target().leq(1000) 
		>> node_021 
	else 
	endif 
	return 
endf 

def node_025
	if function#102(0,4) 
		>> node_027 
	elif function#102(1,4) 
		>> node_028 
	else 
		>> node_026 
	endif 
	return 
endf 

def node_026
	if self.distance_2d_to_target().leq(600) 
		random (50) >> node_056 
		elser (15) >> node_075 
		elser (15) >> node_102 
		elser (20) >> node_005 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (35) >> node_005 
		elser (15) >> node_102 
		elser (15) >> node_087 
		elser (35) >> node_060 
		endr 
	elif self.distance_2d_to_target().leq(1100) 
		random (55) >> node_087 
		elser (15) >> node_005 
		elser (15) >> node_077 
		elser (15) >> node_081 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (55) >> node_088 
		elser (15) >> node_005 
		elser (15) >> node_077 
		elser (15) >> node_081 
		endr 
	else 
		random (50) >> node_077 
		elser (50) >> node_081 
		endr 
	endif 
	return 
endf 

def node_027
	if function#102(0,2) 
		if self.distance_2d_to_target().leq(600) 
			random (55) >> node_057 
			elser (35) >> node_051 
			elser (10) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(850) 
			random (35) >> node_057 
			elser (30) >> node_051 
			elser (10) >> node_005 
			elser (25) >> node_011 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (25) >> node_011 
			elser (10) >> node_005 
			elser (65) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2500) 
			random (50) >> node_088 
			elser (25) >> node_011 
			elser (15) >> node_055 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_055 
			elser (50) >> node_081 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			random (55) >> node_057 
			elser (35) >> node_051 
			elser (10) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(850) 
			random (40) >> node_057 
			elser (40) >> node_051 
			elser (10) >> node_005 
			elser (10) >> node_081 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (15) >> node_081 
			elser (15) >> node_005 
			elser (70) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (50) >> node_088 
			elser (35) >> node_055 
			elser (15) >> node_081 
			endr 
		else 
			random (50) >> node_055 
			elser (50) >> node_081 
			endr 
		endif 
	endif 
	return 
endf 

def node_028
	if function#102(1,2) 
		if self.distance_2d_to_target().leq(650) 
			random (80) >> node_035 
			elser (20) >> node_083 
			elser (0) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(800) 
			random (45) >> node_081 
			elser (45) >> node_036 
			elser (10) >> node_083 
			elser (0) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (30) >> node_087 
			elser (15) >> node_088 
			elser (15) >> node_081 
			elser (10) >> node_083 
			elser (30) >> node_011 
			elser (0) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (20) >> node_088 
			elser (20) >> node_081 
			elser (10) >> node_083 
			elser (50) >> node_011 
			elser (0) >> node_005 
			endr 
		elif self.distance_2d_to_target().leq(3500) 
			random (50) >> node_081 
			elser (50) >> node_036 
			endr 
		else 
			>> node_036 
		endif 
	else 
		>> node_050 
	endif 
	return 
endf 

def node_029
	if function#102(1,4) 
		if self.distance_2d_to_target().leq(800) 
			random (5) -> teostra.step_back() 
			elser (95) 
			endr 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_030
	>> node_033 
	>> node_050 
	return 
endf 

def node_031
	>> node_001 
	if self.angle_2d_cw_between(15,80) 
		-> teostra.quick_dust_blast() 
	elif self.angle_2d_cw_between(280,345) 
		-> teostra.quick_dust_blast() 
	else 
		>> node_030 
	endif 
	return 
endf 

def node_032
	>> node_001 
	>> node_118 
	>> node_031 
	return 
endf 

def node_033
	>> node_001 
	if self.angle_2d_cw_between(345,35) 
	else 
		-> teostra.quick_turn() 
	endif 
	-> teostra.front_scratch() 
	return 
endf 

def node_034
	>> node_033 
	if self.distance_2d_to_target().leq(1000) 
		>> node_064 
	else 
	endif 
	return 
endf 

def node_035
	>> node_001 
	if self.angle_2d_cw_between(15,80) 
		-> teostra.quick_dust_blast() 
	elif self.angle_2d_cw_between(280,345) 
		-> teostra.quick_dust_blast() 
	else 
		>> node_033 
	endif 
	return 
endf 

def node_036
	>> node_001 
	>> node_118 
	>> node_035 
	return 
endf 

def node_037
	random (75) >> node_043 
	elser (25) >> node_041 
	endr 
	>> node_050 
	return 
endf 

def node_038
	>> node_001 
	if self.angle_2d_cw_between(15,80) 
		-> teostra.quick_dust_blast() 
	elif self.angle_2d_cw_between(280,345) 
		-> teostra.quick_dust_blast() 
	else 
		>> node_037 
	endif 
	return 
endf 

def node_039
	>> node_041 
	>> node_050 
	return 
endf 

def node_040
	>> node_001 
	if self.angle_2d_cw_between(15,80) 
		-> teostra.quick_dust_blast() 
	elif self.angle_2d_cw_between(280,345) 
		-> teostra.quick_dust_blast() 
	else 
		>> node_039 
	endif 
	return 
endf 

def node_041
	>> node_001 
	if self.angle_2d_cw_between(345,45) 
		-> teostra.front_scratch() 
	elif self.angle_2d_cw_between(60,135) 
		-> teostra.scratch() 
	elif self.angle_2d_cw_between(225,300) 
		-> teostra.scratch() 
	elif self.angle_2d_cw_between(135,210) 
		-> teostra.back_scratch() 
	else 
		-> teostra.quick_turn() 
		-> teostra.front_scratch() 
	endif 
	return 
endf 

def node_042
	>> node_001 
	if self.angle_2d_cw_between(300,60) 
		-> teostra.turn_reversal_combat() 
		-> teostra.tail_attack() 
	else 
		>> node_041 
	endif 
	return 
endf 

def node_043
	if self.distance_2d_to_target().leq(200) 
		>> node_041 
	else 
		if self.angle_2d_cw_between(120,240) 
			-> teostra.tail_attack() 
		else 
			>> node_041 
		endif 
	endif 
	return 
endf 

def node_044
	>> node_043 
	if self.distance_2d_to_target().leq(1000) 
		>> node_064 
	else 
	endif 
	return 
endf 

def node_045
	>> node_001 
	if self.angle_2d_cw_between(15,80) 
		-> teostra.quick_dust_blast() 
	elif self.angle_2d_cw_between(280,345) 
		-> teostra.quick_dust_blast() 
	else 
		>> node_043 
	endif 
	return 
endf 

def node_046
	>> node_047 
	>> node_050 
	return 
endf 

def node_047
	>> node_001 
	if self.angle_2d_cw_between(90,270) 
	else 
		-> teostra.turn_reversal_combat() 
	endif 
	-> teostra.tail_attack() 
	return 
endf 

def node_048
	>> node_088 
	if self.distance_2d_to_target().leq(650) 
		>> node_051 
	elif self.distance_2d_to_target().leq(1100) 
		random (30) >> node_081 
		elser (70) >> node_055 
		endr 
	elif self.distance_2d_to_target().leq(3000) 
		random (70) >> node_081 
		elser (30) >> node_055 
		endr 
	else 
		>> node_055 
	endif 
	return 
endf 

def node_049
	>> node_083 
	if self.distance_2d_to_target().leq(650) 
		>> node_051 
	elif self.distance_2d_to_target().leq(1100) 
		random (30) >> node_081 
		elser (70) >> node_055 
		endr 
	elif self.distance_2d_to_target().leq(3000) 
		random (70) >> node_081 
		elser (30) >> node_055 
		endr 
	else 
		>> node_055 
	endif 
	return 
endf 

def node_050
	if self.current_quest().is_rank(rank.AT) 
		if self.distance_2d_to_target().leq(650) 
			random (75) >> node_057 
			elser (25) >> node_063 
			endr 
		elif self.distance_2d_to_target().leq(1000) 
			random (25) >> node_055 
			elser (50) >> node_081 
			elser (25) >> node_063 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (25) >> node_081 
			elser (50) >> node_092 
			elser (25) >> node_055 
			endr 
		elif self.distance_2d_to_target().leq(3500) 
			random (50) >> node_081 
			elser (50) >> node_055 
			endr 
		else 
			>> node_055 
		endif 
	else 
		if self.distance_2d_to_target().leq(650) 
			random (45) >> node_057 
			elser (30) >> node_051 
			elser (25) >> node_063 
			endr 
		elif self.distance_2d_to_target().leq(1000) 
			random (25) >> node_055 
			elser (25) >> node_019 
			elser (25) >> node_081 
			elser (25) >> node_063 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (30) >> node_081 
			elser (35) >> node_019 
			elser (35) >> node_055 
			endr 
		elif self.distance_2d_to_target().leq(3500) 
			random (50) >> node_081 
			elser (50) >> node_055 
			endr 
		else 
			>> node_055 
		endif 
	endif 
	return 
endf 

def node_051
	if self.distance_2d_to_target().leq(350) 
		>> node_052 
	else 
		>> node_053 
	endif 
	return 
endf 

def node_052
	if self.angle_2d_cw_between(270,90) 
		-> teostra.side_bite() 
	else 
		-> teostra.reversal_bite() 
	endif 
	return 
endf 

def node_053
	if self.angle_2d_cw_between(315,25) 
		-> teostra.bite_attack() 
	elif self.angle_2d_cw_between(45,110) 
		-> teostra.side_bite() 
	elif self.angle_2d_cw_between(250,315) 
		-> teostra.side_bite() 
	elif self.angle_2d_cw_between(110,250) 
		-> teostra.reversal_bite() 
	else 
		-> teostra.quick_turn() 
		-> teostra.bite_attack() 
	endif 
	return 
endf 

def node_054
	>> node_001 
	>> node_118 
	>> node_056 
	return 
endf 

def node_055
	>> node_001 
	>> node_118 
	>> node_057 
	return 
endf 

def node_056
	>> node_001 
	if self.distance_2d_to_target().leq(150) 
		>> node_057 
	else 
		if self.angle_2d_cw_between(240,120) 
			>> node_057 
		else 
			-> teostra.tail_attack() 
		endif 
	endif 
	return 
endf 

def node_057
	if self.distance_2d_to_target().leq(350) 
		>> node_058 
	else 
		>> node_059 
	endif 
	return 
endf 

def node_058
	>> node_001 
	if function#102(2,4) 
		if self.angle_2d_cw_between(270,90) 
			-> teostra.quick_dust_blast() 
		else 
			-> teostra.reversal_bite() 
		endif 
	else 
		if self.angle_2d_cw_between(270,90) 
			-> teostra.side_bite() 
		else 
			-> teostra.reversal_bite() 
		endif 
	endif 
	return 
endf 

def node_059
	>> node_001 
	if function#102(2,4) 
		if self.angle_2d_cw_between(15,80) 
			-> teostra.quick_dust_blast() 
		elif self.angle_2d_cw_between(280,345) 
			-> teostra.quick_dust_blast() 
		elif self.angle_2d_cw_between(315,25) 
			-> teostra.bite_attack() 
		elif self.angle_2d_cw_between(45,110) 
			-> teostra.side_bite() 
		elif self.angle_2d_cw_between(250,315) 
			-> teostra.side_bite() 
		elif self.angle_2d_cw_between(110,250) 
			-> teostra.reversal_bite() 
		else 
			-> teostra.quick_turn() 
			-> teostra.bite_attack() 
		endif 
	else 
		if self.angle_2d_cw_between(315,25) 
			-> teostra.bite_attack() 
		elif self.angle_2d_cw_between(45,110) 
			-> teostra.side_bite() 
		elif self.angle_2d_cw_between(250,315) 
			-> teostra.side_bite() 
		elif self.angle_2d_cw_between(110,250) 
			-> teostra.reversal_bite() 
		else 
			-> teostra.quick_turn() 
			-> teostra.bite_attack() 
		endif 
	endif 
	return 
endf 

def node_060
	>> node_001 
	if self.angle_2d_cw_between(315,25) 
	else 
		-> teostra.quick_turn() 
	endif 
	-> teostra.bite_attack() 
	return 
endf 

def node_061
	if self.current_quest().is_rank(rank.MR) 
		>> node_005 
	else 
		if function#102(0,3) 
			>> node_062 
		elif function#102(2) 
			>> node_062 
		else 
			>> node_091 
		endif 
	endif 
	return 
endf 

def node_062
	>> node_001 
	if self.distance_2d_to_target().leq(1000) 
		-> teostra.dust_explosion() 
	else 
		random (25) -> teostra.dust_explosion() 
		elser (75) -> teostra.dust_explosion2() 
		endr 
	endif 
	return 
endf 

def node_063
	>> node_080 
	>> node_050 
	return 
endf 

def node_064
	>> node_080 
	>> node_066 
	return 
endf 

def node_065
	>> node_080 
	if self.distance_2d_to_target().leq(1000) 
		if function#102(2,1) 
			random (20) >> node_080 
			elser (80) 
			endr 
		elif function#102(2,2) 
			random (30) >> node_080 
			elser (70) 
			endr 
		else 
		endif 
	else 
	endif 
	>> node_066 
	return 
endf 

def node_066
	if function#102(0,4) 
		>> node_068 
	elif function#102(1,4) 
		>> node_069 
	else 
		>> node_067 
	endif 
	return 
endf 

def node_067
	if self.distance_2d_to_target().leq(600) 
		random (50) >> node_056 
		elser (15) >> node_075 
		elser (15) >> node_102 
		elser (20) >> node_061 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (35) >> node_061 
		elser (15) >> node_102 
		elser (15) >> node_087 
		elser (35) >> node_060 
		endr 
	elif self.distance_2d_to_target().leq(1100) 
		random (55) >> node_087 
		elser (15) >> node_061 
		elser (15) >> node_077 
		elser (15) >> node_081 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (55) >> node_088 
		elser (15) >> node_061 
		elser (15) >> node_077 
		elser (15) >> node_081 
		endr 
	else 
		random (50) >> node_077 
		elser (50) >> node_081 
		endr 
	endif 
	return 
endf 

def node_068
	if function#102(0,2) 
		if self.distance_2d_to_target().leq(600) 
			random (75) >> node_057 
			elser (10) >> node_083 
			elser (15) >> node_061 
			endr 
		elif self.distance_2d_to_target().leq(850) 
			random (50) >> node_057 
			elser (10) >> node_083 
			elser (15) >> node_061 
			elser (25) >> node_092 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (20) >> node_092 
			elser (10) >> node_083 
			elser (10) >> node_061 
			elser (60) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2500) 
			random (50) >> node_088 
			elser (30) >> node_092 
			elser (10) >> node_055 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_055 
			elser (50) >> node_081 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			>> node_057 
		elif self.distance_2d_to_target().leq(850) 
			random (60) >> node_057 
			elser (40) >> node_092 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (30) >> node_092 
			elser (70) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (50) >> node_088 
			elser (30) >> node_092 
			elser (10) >> node_055 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_055 
			elser (50) >> node_081 
			endr 
		endif 
	endif 
	return 
endf 

def node_069
	if function#102(1,2) 
		if self.distance_2d_to_target().leq(650) 
			random (80) >> node_035 
			elser (10) >> node_083 
			elser (10) >> node_061 
			endr 
		elif self.distance_2d_to_target().leq(800) 
			random (40) >> node_081 
			elser (40) >> node_036 
			elser (10) >> node_083 
			elser (10) >> node_061 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (50) >> node_087 
			elser (15) >> node_088 
			elser (15) >> node_081 
			elser (10) >> node_083 
			elser (10) >> node_061 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (15) >> node_088 
			elser (50) >> node_092 
			elser (15) >> node_081 
			elser (10) >> node_083 
			elser (10) >> node_061 
			endr 
		elif self.distance_2d_to_target().leq(3500) 
			random (50) >> node_081 
			elser (50) >> node_036 
			endr 
		else 
			>> node_036 
		endif 
	else 
		>> node_050 
	endif 
	return 
endf 

def node_070
	random (70) >> node_071 
	elser (30) >> node_072 
	endr 
	return 
endf 

def node_071
	>> node_001 
	if self.angle_2d_cw_between(315,45) 
		-> teostra.front_scratch() 
	elif self.angle_2d_cw_between(120,240) 
		-> teostra.tail_attack() 
	else 
		-> teostra.scratch() 
	endif 
	return 
endf 

def node_072
	>> node_001 
	if self.angle_2d_cw_between(300,60) 
		-> teostra.turn_reversal_combat() 
		-> teostra.tail_attack() 
	elif self.angle_2d_cw_between(150,210) 
		-> teostra.back_scratch() 
	else 
		-> teostra.scratch() 
	endif 
	return 
endf 

def node_073
	>> node_001 
	>> node_082 
	>> node_070 
	return 
endf 

def node_074
	>> node_001 
	>> node_247 
	-> teostra.front_scratch() 
	if function#102(1,1) 
		>> node_085 
	else 
	endif 
	return 
endf 

def node_075
	>> node_001 
	if self.angle_2d_cw_between(90,270) 
	else 
		-> teostra.turn_reversal_combat() 
	endif 
	-> teostra.tail_attack() 
	if function#102(1,1) 
		>> node_085 
	else 
	endif 
	return 
endf 

def node_076
	>> node_001 
	if self.angle_2d_cw_between(310,50) 
		-> teostra.bite_attack() 
	elif self.angle_2d_cw_between(110,250) 
		-> teostra.reversal_bite() 
	else 
		-> teostra.side_bite() 
	endif 
	return 
endf 

def node_077
	>> node_001 
	>> node_082 
	>> node_076 
	return 
endf 

def node_078
	>> node_001 
	if self.angle_2d_cw_between(310,50) 
		-> teostra.bite_attack() 
	elif self.angle_2d_cw_between(120,240) 
		-> teostra.tail_attack() 
	else 
		-> teostra.side_bite() 
	endif 
	return 
endf 

def node_079
	>> node_001 
	>> node_082 
	>> node_078 
	return 
endf 

def node_080
	>> node_001 
	-> teostra.diagonal_bite() 
	return 
endf 

def node_081
	>> node_001 
	-> teostra.jump_attack() 
	return 
endf 

def node_082
	>> node_001 
	-> teostra.dash(1,2,0,600,2000) 
	return 
endf 

def node_083
	>> node_001 
	>> node_250 
	-> teostra.rush() 
	return 
endf 

def node_084
	>> node_001 
	-> teostra.reversal_take_off() 
	return 
endf 

def node_085
	>> node_001 
	-> teostra.detonation_short() 
	return 
endf 

def node_086
	>> node_001 
	-> teostra.detonation_long() 
	return 
endf 

def node_087
	>> node_001 
	-> teostra.close_breath_l() 
	return 
endf 

def node_088
	>> node_001 
	>> node_247 
	-> teostra.hosha_breath() 
	return 
endf 

def node_089
	if self.current_quest().is_rank(rank.MR) 
		>> node_005 
	else 
		if function#102(0,3) 
			>> node_090 
		elif function#102(2) 
			>> node_090 
		else 
			>> node_091 
		endif 
	endif 
	return 
endf 

def node_090
	>> node_001 
	if self.distance_2d_to_target().leq(1000) 
		random (80) -> teostra.dust_explosion() 
		elser (20) -> teostra.dust_explosion2() 
		endr 
	else 
		random (20) -> teostra.dust_explosion() 
		elser (80) -> teostra.dust_explosion2() 
		endr 
	endif 
	return 
endf 

def node_091
	>> node_001 
	-> teostra.dust_explosion_acting() 
	-> teostra.jump_attack() 
	-> teostra.threat_short() 
	return 
endf 

def node_092
	>> node_001 
	if function#102(0,3) 
		-> teostra.small_nova() 
	else 
		-> teostra.small_nova2() 
	endif 
	return 
endf 

def node_093
	if self.distance_2d_to_target().leq(800) 
	else 
		>> node_082 
	endif 
	>> node_003 
	-> teostra.super_nova() 
	>> node_001 
	return 
endf 

def node_094
	>> node_070 
	if self.distance_2d_to_target().leq(650) 
		random (85) >> node_076 
		elser (15) >> node_098 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (70) >> node_085 
		elser (30) >> node_098 
		endr 
	else 
		random (50) >> node_081 
		elser (50) >> node_077 
		endr 
	endif 
	return 
endf 

def node_095
	>> node_073 
	if self.distance_2d_to_target().leq(650) 
		random (85) >> node_076 
		elser (15) >> node_098 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (70) >> node_085 
		elser (30) >> node_098 
		endr 
	else 
		random (50) >> node_081 
		elser (50) >> node_077 
		endr 
	endif 
	return 
endf 

def node_096
	>> node_088 
	if self.distance_2d_to_target().leq(650) 
		>> node_076 
	elif self.distance_2d_to_target().leq(1100) 
		random (30) >> node_081 
		elser (70) >> node_077 
		endr 
	else 
		random (70) >> node_081 
		elser (30) >> node_077 
		endr 
	endif 
	return 
endf 

def node_097
	>> node_083 
	if self.distance_2d_to_target().leq(650) 
		>> node_076 
	elif self.distance_2d_to_target().leq(1100) 
		random (30) >> node_081 
		elser (70) >> node_077 
		endr 
	else 
		random (70) >> node_081 
		elser (30) >> node_077 
		endr 
	endif 
	return 
endf 

def node_098
	>> node_080 
	>> node_099 
	return 
endf 

def node_099
	if function#102(0,3) 
		>> node_100 
	else 
		>> node_101 
	endif 
	return 
endf 

def node_100
	if function#102(0,1) 
		if self.distance_2d_to_target().leq(600) 
			>> node_076 
		elif self.distance_2d_to_target().leq(850) 
			random (65) >> node_087 
			elser (35) >> node_076 
			endr 
		elif self.distance_2d_to_target().leq(1500) 
			random (80) >> node_088 
			elser (10) >> node_077 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_077 
			elser (50) >> node_081 
			endr 
		endif 
	elif function#102(0,2) 
		if self.distance_2d_to_target().leq(600) 
			>> node_076 
		elif self.distance_2d_to_target().leq(850) 
			random (40) >> node_087 
			elser (40) >> node_092 
			elser (20) >> node_076 
			endr 
		elif self.distance_2d_to_target().leq(1500) 
			random (40) >> node_088 
			elser (40) >> node_092 
			elser (10) >> node_077 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_077 
			elser (50) >> node_081 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			>> node_076 
		elif self.distance_2d_to_target().leq(850) 
			random (100) >> node_087 
			elser (0) >> node_076 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (80) >> node_088 
			elser (10) >> node_077 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_077 
			elser (50) >> node_081 
			endr 
		endif 
	endif 
	return 
endf 

def node_101
	if function#102(1,1) 
		if self.distance_2d_to_target().leq(600) 
			>> node_076 
		elif self.distance_2d_to_target().leq(850) 
			random (100) >> node_087 
			elser (0) >> node_076 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (80) >> node_088 
			elser (10) >> node_077 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_077 
			elser (50) >> node_081 
			endr 
		endif 
	elif function#102(1,2) 
		if self.distance_2d_to_target().leq(650) 
			>> node_070 
		elif self.distance_2d_to_target().leq(900) 
			random (100) >> node_087 
			elser (0) >> node_076 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (40) >> node_088 
			elser (40) >> node_092 
			elser (10) >> node_073 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_073 
			elser (50) >> node_081 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			>> node_076 
		elif self.distance_2d_to_target().leq(850) 
			random (100) >> node_087 
			elser (0) >> node_076 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (80) >> node_088 
			elser (10) >> node_077 
			elser (10) >> node_081 
			endr 
		else 
			random (50) >> node_077 
			elser (50) >> node_081 
			endr 
		endif 
	endif 
	return 
endf 

def node_102
	>> node_103 
	>> node_104 
	return 
endf 

def node_103
	>> node_001 
	>> node_083 
	-> teostra.reversal_take_off() 
	return 
endf 

def node_104
	if self.distance_2d_to_target().leq(300) 
		>> node_105 
	elif self.distance_2d_to_target().leq(1850) 
	elif self.distance_2d_to_target().leq(3250) 
		random (80) >> node_106 
		elser (20) 
		endr 
	else 
	endif 
	>> node_107 
	return 
endf 

def node_105
	>> node_002 
	-> teostra.tail_attack_fly() 
	return 
endf 

def node_106
	>> node_002 
	-> teostra.radiation_breath_fly() 
	return 
endf 

def node_107
	>> node_002 
	-> teostra.rush_to_landing() 
	return 
endf 

def node_108
	>> node_002 
	-> teostra.super_nova() 
	>> node_001 
	return 
endf 

def node_109
	if function#102(2,2) 
	else 
		[RegisterVar0 |-] 
		if [RegisterVar0 -= 10] 
			[RegisterVar0 ++] 
			>> node_156 
		else 
		endif 
	endif 
	return 
endf 

def node_110
	if function#102(2,2) 
		[RegisterVar1 |-] 
		if [RegisterVar1 -= 13] 
			[RegisterVar1 ++] 
			>> node_093 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_111
	if self.hp_percent().gt(30) 
		if function#102(0,3) 
			function#103(0,30) 
		else 
			function#103(0,15) 
		endif 
	elif self.hp_percent().gt(70) 
		function#103(0,20) 
	else 
		if function#102(0,3) 
			function#103(0,15) 
		else 
			function#103(0,30) 
		endif 
	endif 
	return 
endf 

def node_112
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_113
	>> node_251 
	self.targetArea(target_area.nearest_entrance) 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_114
	>> node_251 
	self.targetArea(target_area.area_center) 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_115
	>> node_251 
	self.targetArea(39) 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_116
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dying_walk(1,2,0,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_117
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_118
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_119
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_120
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_121
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> teostra.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_122
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.dying_walk_fly(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_123
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.dying_glide_direct_move(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_124
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.dying_glide_direct_move(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_125
	if self.distance_2d_to_target().leq(600) 
	else 
		-> teostra.glide_combat(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_126
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_127
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_128
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_129
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_130
	if self.distance_2d_to_target().leq(600) 
	else 
		-> teostra.glide_combat(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_131
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_132
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_133
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_134
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,0,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_135
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,500) 
	endif 
	return 
endf 

def node_136
	if self.distance_2d_to_target().leq(600) 
	else 
		-> teostra.glide_combat(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_137
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,1,0,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_138
	if self.distance_2d_to_target().leq(600) 
	else 
		-> teostra.glide_combat(2,1,0,1500,500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
	else 
		-> teostra.glide_combat(2,1,0,1500,500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
	else 
		-> teostra.glide_combat(2,1,0,1500,500) 
	endif 
	return 
endf 

def node_139
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> teostra.glide_direct_move(2,1,0,1500,700) 
	endif 
	return 
endf 

def node_140
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> teostra.glide_combat(2,0,0,1500) 
	endif 
	return 
endf 

def node_141
	>> node_001 
	-> teostra.take_off_switch_pattern_by_dist() 
	>> node_134 
	return 
endf 

def node_142
	>> node_001 
	-> teostra.sudden_rise() 
	return 
endf 

def node_143
	>> node_002 
	-> teostra.sudden_drop() 
	return 
endf 

def node_144
	if self.flying() 
		-> teostra.discover_fly() 
	else 
		-> teostra.discover() 
	endif 
	return 
endf 

def node_145
	if self.flying() 
		-> teostra.barrier_up_fly() 
		-> teostra.chance_fly() 
	else 
		-> teostra.barrier_up() 
		-> teostra.chance() 
	endif 
	return 
endf 

def node_146
	if self.flying() 
		-> teostra.threat_short_fly() 
	else 
		-> teostra.threat_short() 
	endif 
	return 
endf 

def node_147
	if [$V += 0] 
		[$V |-] 
		>> node_146 
	else 
	endif 
	return 
endf 

def node_148
	if self.flying() 
		-> teostra.fly_battle_search() 
	else 
		-> teostra.combat_search() 
	endif 
	return 
endf 

def node_149
	if self.flying() 
		-> teostra.fly_battle_search() 
	else 
		-> teostra.combat_search() 
	endif 
	return 
endf 

def node_150
	if self.flying() 
		-> teostra.fly_battle_search() 
	else 
		-> teostra.lost_search() 
	endif 
	return 
endf 

def node_151
	>> node_001 
	-> teostra.tired() 
	return 
endf 

def node_152
	>> node_001 
	-> teostra.refresh() 
	return 
endf 

def node_153
	>> node_001 
	if self.in_combat() 
		-> teostra.lost_search() 
	else 
		-> teostra.life_search() 
	endif 
	return 
endf 

def node_154
	>> node_001 
	-> teostra.lost_search() 
	return 
endf 

def node_155
	if self.flying() 
		-> teostra.threat_short_fly() 
	else 
		-> teostra.threat_short() 
	endif 
	return 
endf 

def node_156
	if self.flying() 
		-> teostra.barrier_up_fly() 
		-> teostra.chance_fly() 
	else 
		-> teostra.barrier_up() 
		-> teostra.chance() 
	endif 
	return 
endf 

def node_157
	self.targetArea(target_area.nearest_entrance) 
	>> node_158 
	return 
endf 

def node_158
	if function#5A(20) 
		>> node_159 
	elif function#5A(21) 
		>> node_159 
	elif function#5A(22) 
		>> node_159 
	elif function#5A(23) 
		>> node_159 
	elif function#5A(24) 
		>> node_159 
	elif function#5A(25) 
		>> node_159 
	elif function#5A(30) 
		>> node_160 
	elif function#5A(31) 
		>> node_160 
	elif function#5A(32) 
		>> node_160 
	elif function#5A(33) 
		>> node_160 
	elif function#5A(34) 
		>> node_160 
	elif function#5A(35) 
		>> node_160 
	else 
		>> node_161 
	endif 
	return 
endf 

def node_159
	if self.distance_3d_to_target().leq(15000) 
		>> node_001 
		>> node_162 
	else 
		>> node_161 
	endif 
	return 
endf 

def node_160
	if self.distance_3d_to_target().leq(15000) 
		>> node_002 
		>> node_162 
	else 
		>> node_161 
	endif 
	return 
endf 

def node_161
	if function#AD() 
		>> node_162 
	else 
		>> node_163 
	endif 
	return 
endf 

def node_162
	if function#5A(10) 
		>> node_002 
	elif function#5A(11) 
		>> node_002 
	elif function#5A(12) 
		>> node_002 
	elif function#5A(13) 
		>> node_002 
	elif function#5A(14) 
		>> node_002 
	elif function#5A(15) 
		>> node_002 
	elif function#5A(30) 
		>> node_002 
	elif function#5A(31) 
		>> node_002 
	elif function#5A(32) 
		>> node_002 
	elif function#5A(33) 
		>> node_002 
	elif function#5A(34) 
		>> node_002 
	elif function#5A(35) 
		>> node_002 
	else 
		>> node_001 
	endif 
	if self.flying() 
		>> node_128 
	else 
		>> node_113 
	endif 
	return 
endf 

def node_163
	>> node_164 
	>> node_165 
	>> node_166 
	>> node_167 
	return 
endf 

def node_164
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_129 
	else 
		self.targetArea(target_area.area_center) 
		>> node_114 
		self.targetArea(target_area.area_aerial_center) 
		>> node_141 
	endif 
	return 
endf 

def node_165
	self.targetArea(target_area.nearest_entrance) 
	if self.flying() 
		self.targetArea(40) 
		>> node_127 
	else 
		self.targetArea(39) 
		>> node_115 
	endif 
	return 
endf 

def node_166
	if function#5A(10) 
	elif function#5A(11) 
	elif function#5A(12) 
	elif function#5A(13) 
	elif function#5A(14) 
	elif function#5A(15) 
	elif function#5A(30) 
	elif function#5A(31) 
	elif function#5A(32) 
	elif function#5A(33) 
	elif function#5A(34) 
	elif function#5A(35) 
	else 
		if self.flying() 
			self.targetArea(target_area.area_center) 
			>> node_001 
		else 
		endif 
	endif 
	return 
endf 

def node_167
	self.targetArea(target_area.nearest_entrance) 
	if self.flying() 
		>> node_128 
	else 
		>> node_113 
	endif 
	return 
endf 

def node_168
	if function#C2() 
		self.targetArea(target_area.next_exit) 
	else 
		self.targetArea(14) 
	endif 
	if function#AD() 
		>> node_169 
	else 
		>> node_170 
	endif 
	>> node_174 
	return 
endf 

def node_169
	if self.flying() 
		self.targetArea(40) 
		>> node_133 
	else 
		>> node_117 
	endif 
	return 
endf 

def node_170
	>> node_171 
	>> node_173 
	return 
endf 

def node_171
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_134 
	else 
		self.targetArea(target_area.area_aerial_center) 
		>> node_141 
	endif 
	return 
endf 

def node_172
	self.targetArea(target_area.area_center) 
	>> node_117 
	self.targetArea(target_area.area_aerial_center) 
	>> node_141 
	return 
endf 

def node_173
	if function#C2() 
		self.targetArea(target_area.next_exit) 
	else 
		self.targetArea(14) 
	endif 
	if self.flying() 
		self.targetArea(40) 
		>> node_132 
	else 
		>> node_117 
	endif 
	return 
endf 

def node_174
	self.targetArea(target_area.area_center) 
	if self.flying() 
		if self.fatigued() 
			>> node_001 
		else 
			>> node_143 
		endif 
	else 
	endif 
	return 
endf 

def node_175
	self.targetArea(24) 
	if function#AD() 
		>> node_176 
	else 
		>> node_177 
	endif 
	return 
endf 

def node_176
	>> node_001 
	self.targetArea(24) 
	>> node_116 
	return 
endf 

def node_177
	>> node_178 
	>> node_179 
	>> node_180 
	>> node_181 
	return 
endf 

def node_178
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_124 
	else 
		self.targetArea(target_area.area_center) 
		>> node_116 
		self.targetArea(target_area.area_aerial_center) 
		>> node_002 
	endif 
	return 
endf 

def node_179
	self.targetArea(24) 
	if self.flying() 
		self.targetArea(40) 
		>> node_122 
	else 
		self.targetArea(39) 
		>> node_116 
	endif 
	return 
endf 

def node_180
	if self.flying() 
		self.targetArea(target_area.area_center) 
		>> node_001 
	else 
	endif 
	return 
endf 

def node_181
	if self.flying() 
	else 
		self.targetArea(24) 
		>> node_116 
	endif 
	return 
endf 

def node_182
	if function#AD() 
		>> node_183 
	else 
		>> node_184 
	endif 
	return 
endf 

def node_183
	if self.flying() 
		>> node_137 
	else 
		if self.in_combat() 
			>> node_117 
		else 
			>> node_112 
		endif 
	endif 
	return 
endf 

def node_184
	>> node_185 
	>> node_186 
	>> node_187 
	return 
endf 

def node_185
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_133 
	else 
		self.targetArea(target_area.area_center) 
		if self.in_combat() 
			>> node_117 
		else 
			>> node_112 
		endif 
		self.targetArea(target_area.area_aerial_center) 
		>> node_141 
	endif 
	return 
endf 

def node_186
	if self.flying() 
		self.targetArea(40) 
		>> node_132 
	else 
		self.targetArea(39) 
		if self.in_combat() 
			>> node_117 
		else 
			>> node_112 
		endif 
	endif 
	return 
endf 

def node_187
	if self.flying() 
		self.targetArea(target_area.area_center) 
		>> node_001 
	else 
	endif 
	return 
endf 

def node_188
	self.targetArea(target_area.area_center) 
	if self.flying() 
		if self.fatigued() 
			>> node_001 
		else 
			>> node_143 
		endif 
	else 
	endif 
	return 
endf 

def node_189
	if self.flying() 
		>> node_137 
	else 
		if self.in_combat() 
			>> node_117 
		else 
			>> node_112 
		endif 
	endif 
	return 
endf 

def node_190
	if self.flying() 
		-> teostra.turn_fly() 
	else 
		-> teostra.turn() 
	endif 
	return 
endf 

def node_191
	if self.angle_2d_cw_between(15,345) 
		>> node_190 
	else 
	endif 
	return 
endf 

def node_192
	if self.angle_2d_cw_between(30,330) 
		>> node_190 
	else 
	endif 
	return 
endf 

def node_193
	if self.angle_2d_cw_between(60,300) 
		>> node_190 
	else 
	endif 
	return 
endf 

def node_194
	if self.angle_2d_cw_between(90,270) 
		>> node_190 
	else 
	endif 
	return 
endf 

def node_195
	if self.flying() 
		>> node_264 
	else 
		-> teostra.quick_turn() 
	endif 
	return 
endf 

def node_196
	if self.angle_2d_cw_between(15,345) 
		>> node_195 
	else 
	endif 
	return 
endf 

def node_197
	if self.angle_2d_cw_between(30,330) 
		>> node_195 
	else 
	endif 
	return 
endf 

def node_198
	if self.angle_2d_cw_between(60,300) 
		>> node_195 
	else 
	endif 
	return 
endf 

def node_199
	if self.angle_2d_cw_between(90,270) 
		>> node_195 
	else 
	endif 
	return 
endf 

def node_200
	>> node_001 
	-> teostra.lost_search() 
	return 
endf 

def node_201
	>> node_001 
	-> teostra.lost_search() 
	return 
endf 

def node_202
	>> node_001 
	random (50) -> teostra.combat_search() 
	elser (50) -> teostra.lost_search() 
	endr 
	return 
endf 

def node_203
	>> node_001 
	random (50) -> teostra.combat_search() 
	elser (50) -> teostra.lost_search() 
	endr 
	return 
endf 

def node_204
	>> node_001 
	-> teostra.dash(2,1,0,1000,750) 
	return 
endf 

def node_205
	>> node_001 
	-> teostra.dash(2,1,0,2000,750) 
	return 
endf 

def node_206
	>> node_001 
	if self.distance_2d_to_target().leq(900) 
		random (65) >> node_076 
		elser (35) >> node_080 
		endr 
	else 
		random (65) >> node_077 
		elser (35) >> node_081 
		endr 
	endif 
	>> node_250 
	-> teostra.anger_search() 
	return 
endf 

def node_207
	>> node_001 
	if self.target(10) 
		-> teostra.dash(2,0,0,1000) 
	else 
	endif 
	if self.enraged() 
		>> node_083 
	else 
		>> node_083 
	endif 
	return 
endf 

def node_208
	>> node_001 
	-> teostra.tired() 
	return 
endf 

def node_209
	if self.distance_3d_to_target().leq(900) 
		>> node_239 
	elif self.distance_3d_to_target().leq(1350) 
		>> node_241 
	else 
	endif 
	return 
endf 

def node_210
	if self.distance_2d_to_target().leq(900) 
	else 
		-> teostra.dash(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(900) 
	else 
		-> teostra.dash(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(900) 
	else 
		-> teostra.dash(2,0,0,1500) 
	endif 
	return 
endf 

def node_211
	>> node_001 
	-> teostra.lost_search() 
	return 
endf 

def node_212
	>> node_001 
	>> node_192 
	-> teostra.life_search() 
	if self.in_map(st.Special_Arena).in_area(-1) 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
	else 
		random (50) 
					self.targetArea(22) @ parameter2:500 
					>> node_192 
					-> teostra.life_search() 
		elser (50) 
		endr 
	endif 
	return 
endf 

def node_213
	>> node_001 
	self.targetArea(17) 
	>> node_192 
	-> teostra.marking() 
	return 
endf 

def node_214
	>> node_001 
	self.targetArea(17) 
	random (75) >> node_212 
	elser (25) >> node_192 
				-> teostra.rest() 
	endr 
	return 
endf 

def node_215
	>> node_001 
	self.targetArea(17) 
	>> node_192 
	-> teostra.rest() 
	return 
endf 

def node_216
	>> node_001 
	>> node_191 
	-> teostra.life_search() 
	return 
endf 

def node_217
	>> node_001 
	self.targetArea(17) 
	>> node_192 
	-> teostra.sleep() 
	return 
endf 

def node_218
	>> node_002 
	>> node_192 
	-> teostra.fly_battle_search() 
	return 
endf 

def node_219
	>> node_002 
	>> node_192 
	-> teostra.chance_fly() 
	return 
endf 

def node_220
	>> node_002 
	>> node_192 
	-> teostra.fly_battle_search() 
	return 
endf 

def node_221
	>> node_002 
	>> node_191 
	-> teostra.fly_battle_search() 
	return 
endf 

def node_222
	>> node_002 
	>> node_192 
	-> teostra.fly_battle_search() 
	return 
endf 

def node_223
	>> node_002 
	self.targetEnemy(17) 
	-> teostra.sudden_drop() 
	return 
endf 

def node_224
	>> node_001 
	>> node_192 
	if function#C9() 
		-> teostra.dying_sleep() 
	else 
		function#CA() 
	endif 
	return 
endf 

def node_225
	if self.distance_2d_to_target().leq(500) 
	else 
		-> teostra.glide_direct_move(1,2,0,400,1500) 
		repeat 
	endif 
	return 
endf 

def node_226
	>> node_002 
	self.targetArea(22) @ parameter2:500 
	-> teostra.quick_turn_fly() 
	return 
endf 

def node_227
	>> node_002 
	-> teostra.ride_rage_head() 
	return 
endf 

def node_228
	>> node_002 
	-> teostra.ride_rage_head_lv2() 
	return 
endf 

def node_229
	>> node_002 
	-> teostra.ride_rage_body() 
	return 
endf 

def node_230
	>> node_002 
	-> teostra.ride_rage_body_lv2() 
	return 
endf 

def node_231
	>> node_002 
	if self.distance_2d_to_target().leq(600) 
		>> node_259 
	else 
	endif 
	>> node_225 
	>> node_232 
	return 
endf 

def node_232
	if function#11(1000) 
	else 
		if self.above_area() 
			-> teostra.short_up_fly() 
		else 
			-> teostra.short_down_fly() 
		endif 
	endif 
	return 
endf 

def node_233
	>> node_002 
	-> teostra.ride_rage_crash_head() 
	return 
endf 

def node_234
	>> node_002 
	-> teostra.ride_rage_crash_head_lv2() 
	return 
endf 

def node_235
	>> node_002 
	-> teostra.ride_rage_crash_body() 
	return 
endf 

def node_236
	>> node_002 
	-> teostra.ride_rage_crash_body_lv2() 
	return 
endf 

def node_237
	>> node_002 
	-> teostra.ride_rage_threat() 
	return 
endf 

def node_238
	>> node_002 
	-> teostra.ride_tired() 
	return 
endf 

def node_239
	>> node_001 
	-> teostra.back_turn() 
	return 
endf 

def node_240
	if self.angle_2d_cw_between(15,345) 
		>> node_239 
	else 
	endif 
	return 
endf 

def node_241
	if self.angle_2d_cw_between(30,330) 
		>> node_239 
	else 
	endif 
	return 
endf 

def node_242
	if self.angle_2d_cw_between(45,315) 
		>> node_239 
	else 
	endif 
	return 
endf 

def node_243
	if self.angle_2d_cw_between(60,300) 
		>> node_239 
	else 
	endif 
	return 
endf 

def node_244
	if self.angle_2d_cw_between(90,270) 
		>> node_239 
	else 
	endif 
	return 
endf 

def node_245
	>> node_001 
	-> teostra.quick_turn() 
	return 
endf 

def node_246
	if self.angle_2d_cw_between(15,345) 
		>> node_245 
	else 
	endif 
	return 
endf 

def node_247
	if self.angle_2d_cw_between(30,330) 
		>> node_245 
	else 
	endif 
	return 
endf 

def node_248
	if self.angle_2d_cw_between(45,315) 
		>> node_245 
	else 
	endif 
	return 
endf 

def node_249
	if self.angle_2d_cw_between(60,300) 
		>> node_245 
	else 
	endif 
	return 
endf 

def node_250
	if self.angle_2d_cw_between(90,270) 
		>> node_245 
	else 
	endif 
	return 
endf 

def node_251
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					if function#30(2) 
						if self.target.in_combat() 
							random (35) >> node_252 
							elser (0) >> node_253 
							elser (10) >> node_254 
							elser (55) >> node_255 
							endr 
						else 
							random (10) >> node_252 
							elser (35) >> node_253 
							elser (0) >> node_254 
							elser (55) >> node_255 
							endr 
						endif 
					else 
						if self.target.in_combat() 
							random (35) >> node_252 
							elser (10) >> node_253 
							elser (55) >> node_254 
							elser (0) >> node_255 
							endr 
						else 
							random (35) >> node_252 
							elser (55) >> node_253 
							elser (10) >> node_254 
							elser (0) >> node_255 
							endr 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_252
	return 
endf 

def node_253
	>> node_197 
	>> node_155 
	return 
endf 

def node_254
	>> node_253 
	if self.flying() 
		if self.distance_2d_to_target().leq(750) 
		else 
		endif 
	else 
		if self.distance_2d_to_target().leq(1500) 
		else 
		endif 
	endif 
	return 
endf 

def node_255
	self.force_area_change2() 
	return 
endf 

def node_256
	random (35) 
				self.targetArea(21) @ parameter2:300 
	elser (35) 
				self.targetArea(22) @ parameter2:300 
	elser (15) 
				self.targetArea(21) @ parameter2:500 
	elser (15) 
				self.targetArea(22) @ parameter2:500 
	endr 
	return 
endf 

def node_257
	if self.current_quest().is_rank(rank.AT) 
	elif self.current_quest().is_rank(rank.MR) 
		random (5) 
					if self.flying() 
						-> teostra.chance_fly() 
					else 
						-> teostra.chance() 
					endif 
		elser (95) 
		endr 
	else 
		random (35) 
					if self.flying() 
						-> teostra.chance_fly() 
					else 
						-> teostra.chance() 
					endif 
		elser (65) 
		endr 
	endif 
	return 
endf 

def node_258
	if self.flying() 
		-> teostra.chance_fly() 
	else 
		-> teostra.chance() 
	endif 
	return 
endf 

def node_259
	>> node_002 
	-> teostra.fly_back_step() 
	return 
endf 

def node_260
	if self.angle_2d_cw_between(15,345) 
		>> node_259 
	else 
	endif 
	return 
endf 

def node_261
	if self.angle_2d_cw_between(30,330) 
		>> node_259 
	else 
	endif 
	return 
endf 

def node_262
	if self.angle_2d_cw_between(45,315) 
		>> node_259 
	else 
	endif 
	return 
endf 

def node_263
	if self.angle_2d_cw_between(90,270) 
		>> node_259 
	else 
	endif 
	return 
endf 

def node_264
	if self.angle_2d_cw_between(0,180) 
		-> teostra.quick_turn_fly() 
	else 
		-> teostra.quick_turn_fly() 
	endif 
	return 
endf 

def node_265
	if self.angle_2d_cw_between(15,345) 
		>> node_264 
	else 
	endif 
	return 
endf 

def node_266
	if self.angle_2d_cw_between(30,330) 
		>> node_264 
	else 
	endif 
	return 
endf 

def node_267
	if self.angle_2d_cw_between(45,315) 
		>> node_264 
	else 
	endif 
	return 
endf 

def node_268
	if self.angle_2d_cw_between(90,270) 
		>> node_264 
	else 
	endif 
	return 
endf 

def node_269
	>> node_001 
	>> node_197 
	if self.flying() 
		-> teostra.chance_fly() 
	else 
		-> teostra.chance() 
	endif 
	return 
endf 

def node_270
	>> node_001 
	if self.targetEnemy(target_em.any_monster) 
		random (20) >> node_197 
		elser (80) 
		endr 
	else 
	endif 
	random (60) -> teostra.chance() 
	elser (10) -> teostra.lost_search() 
	elser (30) -> teostra.combat_search() 
	endr 
	return 
endf 

def node_271
	>> node_001 
	>> node_197 
	random (40) -> teostra.chance() 
	elser (20) -> teostra.lost_search() 
	elser (40) -> teostra.combat_search() 
	elser (0) -> teostra.threat_short() 
	endr 
	return 
endf 

def node_272
	>> node_001 
	>> node_192 
	-> teostra.life_search() 
	return 
endf 

def node_273
	>> node_001 
	self.targetEnemy(58) 
	random (0) >> node_274 
	elser (100) 
	endr 
	self.targetEnemy(22) @ parameter2:2000 
	random (40) >> node_192 
	elser (60) 
	endr 
	random (70) -> teostra.life_search() 
	elser (30) -> teostra.marking() 
	endr 
	return 
endf 

def node_274
	-> teostra.walk(1,2,0,600,1500) 
	return 
endf 

def node_275
	-> teostra.glide_combat(1,2,0,600,2000) 
	return 
endf 

def node_276
	if self.fatigued() 
		>> node_001 
	else 
	endif 
	return 
endf 

def node_277
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#5D() 
		>> node_280 
	elif self.target(3) 
		>> node_281 
	elif self.target(4) 
		>> node_281 
	elif self.target(55) 
	elif self.target(0) 
		if self.target(0) @ parameter2:1 
			>> node_284 
		else 
			>> node_285 
		endif 
	elif self.target(14) 
		>> node_286 
	elif self.target(11) 
		>> node_287 
	elif self.target.mudded() 
		>> node_294 
	elif self.target(12) 
	elif self.flying() 
		if self.above_target() 
			>> node_290 
		elif self.vertical_distance_to_target().leq(750) 
			if self.above_target() 
				>> node_290 
			else 
			endif 
		else 
			>> node_290 
		endif 
	elif self.target(52) 
		>> node_289 
	else 
		>> node_278 
	endif 
	return 
endf 

def node_278
	if self.vertical_distance_to_target().leq(450) 
	else 
		>> node_289 
	endif 
	return 
endf 

def node_279
	if [RegisterVar3 -= 10] 
		[RegisterVar3 ++] 
	elif [RegisterVar3 -= 1] 
		[RegisterVar3 |-] 
	else 
	endif 
	return 
endf 

def node_280
	if self.distance_2d_to_target().leq(1500) 
		if self.angle_2d_cw_between(300,60) 
		else 
			function#5E() 
			>> node_148 
		endif 
	else 
		if self.angle_2d_cw_between(300,60) 
			function#5E() 
			>> node_148 
		else 
			function#5E() 
			>> node_149 
		endif 
	endif 
	return 
endf 

def node_281
	>> node_282 
	>> node_283 
	reset 
endf 

def node_282
	self.targetArea(19) 
	if self.distance_2d_to_target().leq(900) 
	else 
		if self.flying() 
			>> node_136 
		else 
			>> node_117 
		endif 
	endif 
	return 
endf 

def node_283
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_001 
	-> teostra.lost_search() 
	return 
endf 

def node_284
	if self.flying() 
		>> node_290 
	else 
		>> node_288 
		if self.distance_2d_to_target().leq(1000) 
			if self.target(0) 
				if self.above_target() 
					-> teostra.jump_attack_wall_up() 
				else 
					-> teostra.jump_attack_wall_down() 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_285
	if self.flying() 
		>> node_290 
	else 
		>> node_288 
		if self.distance_2d_to_target().leq(1000) 
			if self.target(0) 
				if self.above_target() 
					-> teostra.jump_attack_wall_up() 
				else 
					self.targetArea(77) 
					-> teostra.dash(1,2,0,0,1500) 
					self.targetArea(1) 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_286
	if self.flying() 
		>> node_290 
	else 
		>> node_288 
		if self.distance_2d_to_target().leq(2000) 
			if self.target(14) 
				if self.above_target() 
					-> teostra.jump_attack_wall_up() 
				else 
					-> teostra.jump_attack_wall_down() 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_287
	if self.flying() 
		>> node_293 
	else 
		>> node_289 
	endif 
	return 
endf 

def node_288
	if self.distance_2d_to_target().leq(600) 
		if self.vertical_distance_to_target().leq(1500) 
		else 
			-> teostra.dash(1,2,0,500,1500) 
		endif 
	else 
		-> teostra.dash(1,2,0,500,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if self.vertical_distance_to_target().leq(1500) 
		else 
			-> teostra.dash(1,2,0,500,1500) 
		endif 
	else 
		-> teostra.dash(1,2,0,500,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if self.vertical_distance_to_target().leq(1500) 
		else 
			-> teostra.dash(1,2,0,500,1500) 
		endif 
	else 
		-> teostra.dash(1,2,0,500,1500) 
	endif 
	return 
endf 

def node_289
	if self.distance_3d_to_target().leq(400) 
	else 
		-> teostra.dash(1,2,0,300,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.dash(1,2,0,500,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.dash(1,2,0,500,1500) 
	endif 
	return 
endf 

def node_290
	if self.distance_2d_to_target().leq(300) 
		if self.vertical_distance_to_target().leq(1000) 
		else 
			-> teostra.glide_combat(1,2,0,200,1500) 
		endif 
	else 
		-> teostra.glide_combat(1,2,0,200,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if self.vertical_distance_to_target().leq(1000) 
		else 
			-> teostra.glide_combat(1,2,0,500,1500) 
		endif 
	else 
		-> teostra.glide_combat(1,2,0,500,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if self.vertical_distance_to_target().leq(1000) 
		else 
			-> teostra.glide_combat(1,2,0,500,1500) 
		endif 
	else 
		-> teostra.glide_combat(1,2,0,500,1500) 
	endif 
	>> node_291 
	return 
endf 

def node_291
	if self.above_target() 
		random (0) >> node_264 
		elser (50) >> node_262 
		elser (50) 
		endr 
		>> node_292 
	elif self.vertical_distance_to_target().leq(400) 
		random (0) >> node_264 
		elser (50) >> node_262 
		elser (50) 
		endr 
		>> node_292 
	else 
	endif 
	return 
endf 

def node_292
	>> node_002 
	-> teostra.short_up_fly() 
	return 
endf 

def node_293
	if self.distance_3d_to_target().leq(300) 
	else 
		-> teostra.glide_direct_move(1,2,0,200,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(1,2,0,500,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> teostra.glide_direct_move(1,2,0,500,1500) 
	endif 
	return 
endf 

def node_294
	>> node_001 
	>> node_295 
	>> node_296 
	reset 
endf 

def node_295
	if self.distance_3d_to_target().leq(1500) 
	else 
		-> teostra.dash(1,2,0,1400,2000) 
	endif 
	if self.distance_3d_to_target().leq(1500) 
	else 
		-> teostra.dash(1,2,0,1400,2000) 
	endif 
	if self.distance_3d_to_target().leq(1500) 
	else 
		-> teostra.dash(1,2,0,1400,2000) 
	endif 
	return 
endf 

def node_296
	random (20) >> node_081 
	elser (10) >> node_080 
	elser (20) >> node_083 
	elser (30) >> node_087 
	elser (20) >> node_088 
	endr 
	return 
endf 

def node_297
endf 

def node_298
	if self.targetEnemy(target_em.any_monster) 
		if self.target_is(em.Lunastra) @ parameter2:1 
		elif self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					random (100) >> node_253 
					elser (0) 
					endr 
				endif 
			endif 
		endif 
	endif 
	return 
endf 

def node_299
	if self.targetEnemy(target_em.any_monster) 
		if self.target_is(em.Lunastra) @ parameter2:1 
		elif self.target(13) 
		elif self.vertical_distance_to_target().leq(1000) 
			if self.distance_2d_to_target().leq(1200) 
				if self.flying() >> node_107 
				else >> node_087 
				endif 
			elif self.distance_2d_to_target().leq(3000) 
				if self.flying() >> node_107 
				else >> node_077 
				endif 
			endif 
		endif 
	endif 
	return 
endf 

def node_300
	if [RegisterVar2 += 0] 
		if self.hp_percent().gt(50) 
			function#C3(100) 
			[RegisterVar2 |-] 
		endif 
	endif 
	return 
endf 

def node_301
	if function#C2() 
		self.targetEnemy(59) 
		>> node_001 
		>> node_120 
		-> teostra.combat_search() 
		>> node_120 
		-> teostra.combat_search() 
		>> node_120 
		-> teostra.combat_search() 
	endif 
	return 
endf 

def node_302
	if self.targetEnemy(target_em.any_monster) 
		if self.target_is(em.Lunastra) @ parameter2:1 
		elif self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					if self.target_is(em.Gold_Rathian) 
						>> node_308 
					elif self.target_is(em.Silver_Rathalos) 
						>> node_308 
					elif function#30(2) 
						if self.target.in_combat() 
							random (0) >> node_304 
							elser (0) >> node_305 
							elser (0) >> node_307 
							elser (100) >> node_308 
							endr 
						else 
							random (0) >> node_304 
							elser (0) >> node_305 
							elser (0) >> node_306 
							elser (100) >> node_308 
							endr 
						endif 
					elif function#30(4) 
						if self.target.in_combat() 
							random (0) >> node_304 
							elser (0) >> node_305 
							elser (100) >> node_307 
							elser (0) >> node_308 
							endr 
						else 
							random (0) >> node_304 
							elser (70) >> node_305 
							elser (30) >> node_306 
							elser (0) >> node_308 
							endr 
						endif 
					else 
						if self.target.in_combat() 
							random (0) >> node_304 
							elser (20) >> node_305 
							elser (80) >> node_307 
							elser (0) >> node_308 
							endr 
						else 
							random (0) >> node_304 
							elser (60) >> node_305 
							elser (20) >> node_306 
							elser (20) >> node_308 
							endr 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	>> node_309 
	return 
endf 

def node_303
	if self.targetEnemy(target_em.any_monster) 
		if self.target_is(em.Lunastra) @ parameter2:1 
		elif self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					if self.target_is(em.Gold_Rathian) 
						>> node_308 
					elif self.target_is(em.Silver_Rathalos) 
						>> node_308 
					elif function#30(2) 
						if self.target.in_combat() 
							random (30) >> node_304 
							elser (0) >> node_305 
							elser (0) >> node_306 
							elser (70) >> node_308 
							endr 
						else 
							random (30) >> node_304 
							elser (0) >> node_305 
							elser (0) >> node_306 
							elser (70) >> node_308 
							endr 
						endif 
					elif function#30(4) 
						if self.target.in_combat() 
							random (30) >> node_304 
							elser (0) >> node_305 
							elser (70) >> node_306 
							elser (0) >> node_308 
							endr 
						else 
							random (50) >> node_304 
							elser (0) >> node_305 
							elser (50) >> node_306 
							elser (0) >> node_308 
							endr 
						endif 
					else 
						if self.target.in_combat() 
							random (30) >> node_304 
							elser (20) >> node_305 
							elser (30) >> node_306 
							elser (20) >> node_308 
							endr 
						else 
							random (30) >> node_304 
							elser (20) >> node_305 
							elser (50) >> node_306 
							elser (0) >> node_308 
							endr 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	>> node_309 
	return 
endf 

def node_304
	return 
endf 

def node_305
	self.targetEnemy(target_em.closest_entity) 
	>> node_197 
	if self.in_combat() 
		>> node_155 
	else 
		if self.target.in_combat() 
			>> node_155 
		else 
			>> node_155 
		endif 
	endif 
	return 
endf 

def node_306
	self.targetEnemy(target_em.closest_entity) 
	if self.flying() 
		>> node_107 
	else 
		>> node_310 
		self.targetEnemy(target_em.closest_entity) 
		if self.distance_2d_to_target().leq(900) 
			random (60) >> node_078 
			elser (40) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (60) >> node_077 
			elser (40) >> node_087 
			endr 
		elif self.distance_2d_to_target().leq(2000) 
			random (70) >> node_077 
			elser (30) >> node_088 
			endr 
		else 
			random (70) >> node_083 
			elser (30) >> node_088 
			endr 
		endif 
	endif 
	return 
endf 

def node_307
	>> node_306 
	>> node_306 
	random (70) 
	elser (30) 
				return 
	endr 
	>> node_306 
	random (70) 
	elser (30) 
				return 
	endr 
	>> node_306 
	return 
endf 

def node_308
	if self.in_map(st.Special_Arena).in_area(-1) 
		>> node_306 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
		>> node_306 
	else 
		if [RegisterVar5 -= 8] 
			[RegisterVar5 ++] 
			self.force_area_change2() 
		elif [RegisterVar5 -= 5] 
			random (30) 
						[RegisterVar5 ++] 
						self.force_area_change2() 
			elser (70) 
			endr 
		else 
		endif 
		[RegisterVar5 |-] 
		if self.target.in_combat() 
			>> node_306 
			[RegisterVar5 |-] 
		else 
			[RegisterVar5 |-] 
			>> node_305 
		endif 
		self.targetEnemy(target_em.closest_entity) 
		if self.distance_2d_to_target().leq(3000) 
			if self.vertical_distance_to_target().leq(1000) 
				if function#5F() 
					repeat 
				elif self.in_combat() 
				else 
					repeat 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_309
	if self.defense_downed() 
		if function#31(49,3000) 
			self.targetEnemy(target_em.closest_entity) 
			random (25) >> node_197 
						>> node_155 
			elser (75) 
			endr 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_310
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(1000) 
		random (50) >> node_239 
					return 
		elser (50) 
		endr 
	elif self.distance_3d_to_target().leq(2000) 
	elif self.distance_3d_to_target().leq(3000) 
		random (50) 
					return 
		elser (50) 
		endr 
	else 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> teostra.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> teostra.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> teostra.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> teostra.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> teostra.dash(1,2,0,1500,1500) 
	endif 
	return 
endf 

