importactions Viper_TobiKadachi as viper_tobikadachi
importlibrary Global as Global

def node_000
	>> node_001 
	if self.target(4) 
		>> node_003 
	elif self.target(3) 
		>> node_003 
	elif self.target(55) 
		>> Global.node_021 
	elif self.target(12) 
		>> node_004 
	elif self.target(14) 
		>> node_005 
	elif self.target(11) 
		>> node_006 
	elif self.target(0) 
		>> node_007 
	else 
		if self.quest_id(66862) 
			>> node_046 
		else 
			>> node_008 
		endif 
	endif 
	reset 
endf 

def node_001
	if function#45() 
	else 
		>> Global.node_004 
	endif 
	>> node_002 
	return 
endf 

def node_002
	if function#5D() 
		function#5E() 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> node_009 
		self.targetArea(4) 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	return 
endf 

def node_003
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(800) 
		>> Global.node_039 
		repeat 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> Global.node_053 
		random (40) >> Global.node_117 
		elser (30) >> Global.node_115 
		elser (30) >> Global.node_124 
		endr 
	endif 
	return 
endf 

def node_004
	if self.distance_3d_to_target().leq(1000) 
		>> Global.node_073 
	else 
		-> viper_tobikadachi.dash(2,1,0,2000,900) 
		>> Global.node_073 
	endif 
	return 
endf 

def node_005
	if self.distance_2d_to_target().gt(2000) 
		-> viper_tobikadachi.dash(2,6,0,2500,1000) 
	else 
	endif 
	if self.target(14) 
		random (70) >> Global.node_070 
		elser (30) >> Global.node_053 
					>> Global.node_118 
		endr 
	else 
		>> Global.node_053 
		>> Global.node_118 
	endif 
	return 
endf 

def node_006
	>> Global.node_036 
	>> Global.node_073 
	return 
endf 

def node_007
	if self.above_target() 
		if self.distance_2d_to_target().gt(1500) 
			-> viper_tobikadachi.dash(2,6,0,1500,1000) 
		elif self.distance_2d_to_target().leq(500) 
			>> Global.node_058 
		else 
			random (70) >> Global.node_070 
			elser (30) >> Global.node_053 
						>> Global.node_118 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(1500) 
			>> Global.node_057 
			>> Global.node_180 
			if self.target(0) 
				if self.above_target() 
				else 
					>> Global.node_040 
				endif 
			else 
			endif 
		else 
			-> viper_tobikadachi.dash(2,6,0,1000,800) 
		endif 
	endif 
	return 
endf 

def node_008
	if self.in_map(st.Ancient_Forest).in_area(6) 
		if self.vertical_distance_to_target().gt(300) 
			>> Global.node_041 
			return 
		else 
		endif 
	else 
	endif 
	if self.vertical_distance_to_target().gt(450) 
		>> Global.node_040 
	elif self.target(52) 
		>> Global.node_041 
	else 
	endif 
	if self.distance_2d_to_target().leq(400) 
		self.enraged() >> node_010 => reset 
		self.fatigued() >> node_014 => reset 
		>> node_018 => reset 
	elif self.distance_2d_to_target().leq(800) 
		self.enraged() >> node_022 => reset 
		self.fatigued() >> node_026 => reset 
		>> node_030 => reset 
	elif self.distance_2d_to_target().leq(3000) 
		self.enraged() >> node_034 => reset 
		self.fatigued() >> node_035 => reset 
		>> node_036 => reset 
	elif self.distance_2d_to_target().leq(8000) 
		self.enraged() >> node_037 => reset 
		self.fatigued() >> node_038 => reset 
		>> node_039 => reset 
	else 
		self.enraged() >> node_040 => reset 
		self.fatigued() >> node_041 => reset 
		>> node_042 => reset 
	endif 
	return 
endf 

def node_009
	if self.angle_2d_cw_between(270,90) 
		>> Global.node_114 
	else 
		>> Global.node_114 
	endif 
	return 
endf 

def node_010
	>> node_045 
	>> node_011 
	>> node_045 
	>> node_012 
	>> node_045 
	>> node_013 
	return 
endf 

def node_011
	random (75) >> Global.node_085 
	elser (25) >> Global.node_076 
				reset 
	elser (0) 
	endr 
	random (40) >> Global.node_072 
	elser (60) >> Global.node_077 
	endr 
	return 
endf 

def node_012
	if self.angle_2d_cw_between(115,245) 
		random (0) >> Global.node_074 
					reset 
		elser (25) >> Global.node_075 
		elser (15) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (25) >> Global.node_102 
		elser (20) >> Global.node_081 
		endr 
	else 
		random (0) >> Global.node_074 
					reset 
		elser (0) >> Global.node_075 
		elser (25) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (35) >> Global.node_102 
		elser (25) >> Global.node_081 
		endr 
	endif 
	return 
endf 

def node_013
	if self.angle_2d_cw_between(290,70) 
		random (30) >> Global.node_084 
		elser (70) 
		endr 
	else 
		random (0) >> Global.node_084 
		elser (100) 
		endr 
	endif 
	return 
endf 

def node_014
	>> node_015 
	>> node_016 
	>> Global.node_108 
	return 
endf 

def node_015
	random (100) >> Global.node_085 
	elser (0) 
	endr 
	random (40) >> Global.node_072 
	elser (60) >> Global.node_077 
	endr 
	return 
endf 

def node_016
	if self.angle_2d_cw_between(115,245) 
		random (10) >> Global.node_074 
					reset 
		elser (35) >> Global.node_075 
		elser (15) >> Global.node_073 
		elser (10) >> Global.node_079 
		elser (15) >> Global.node_102 
		elser (15) >> Global.node_081 
		endr 
	else 
		random (15) >> Global.node_074 
					reset 
		elser (0) >> Global.node_075 
		elser (20) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (25) >> Global.node_102 
		elser (25) >> Global.node_081 
		endr 
	endif 
	return 
endf 

def node_017
	if self.angle_2d_cw_between(290,70) 
		random (15) >> Global.node_084 
		elser (85) 
		endr 
	else 
		random (0) >> Global.node_084 
		elser (100) 
		endr 
	endif 
	return 
endf 

def node_018
	>> node_045 
	>> node_019 
	>> node_045 
	>> node_020 
	>> node_045 
	>> node_021 
	return 
endf 

def node_019
	random (100) >> Global.node_085 
	elser (0) 
	endr 
	random (40) >> Global.node_072 
	elser (60) >> Global.node_077 
	endr 
	return 
endf 

def node_020
	if self.angle_2d_cw_between(115,245) 
		random (10) >> Global.node_074 
					reset 
		elser (35) >> Global.node_075 
		elser (15) >> Global.node_073 
		elser (10) >> Global.node_079 
		elser (15) >> Global.node_102 
		elser (15) >> Global.node_081 
		endr 
	else 
		random (15) >> Global.node_074 
					reset 
		elser (0) >> Global.node_075 
		elser (20) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (25) >> Global.node_102 
		elser (25) >> Global.node_081 
		endr 
	endif 
	return 
endf 

def node_021
	if self.angle_2d_cw_between(290,70) 
		random (20) >> Global.node_084 
		elser (80) 
		endr 
	else 
		random (0) >> Global.node_084 
		elser (100) 
		endr 
	endif 
	return 
endf 

def node_022
	>> node_045 
	>> node_023 
	>> node_045 
	>> node_024 
	>> node_045 
	>> node_025 
	return 
endf 

def node_023
	random (75) >> Global.node_085 
	elser (25) >> Global.node_076 
				reset 
	elser (0) 
	endr 
	random (40) >> Global.node_072 
	elser (60) >> Global.node_077 
	endr 
	return 
endf 

def node_024
	if self.angle_2d_cw_between(115,245) 
		random (0) >> Global.node_074 
					reset 
		elser (25) >> Global.node_075 
		elser (15) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (25) >> Global.node_102 
		elser (20) >> Global.node_081 
		endr 
	else 
		random (0) >> Global.node_074 
					reset 
		elser (0) >> Global.node_075 
		elser (25) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (35) >> Global.node_102 
		elser (25) >> Global.node_081 
		endr 
	endif 
	return 
endf 

def node_025
	if self.angle_2d_cw_between(290,70) 
		random (30) >> Global.node_084 
		elser (70) 
		endr 
	else 
		random (0) >> Global.node_084 
		elser (100) 
		endr 
	endif 
	return 
endf 

def node_026
	>> node_027 
	>> node_028 
	>> Global.node_108 
	return 
endf 

def node_027
	random (100) >> Global.node_085 
	elser (0) 
	endr 
	random (40) >> Global.node_072 
	elser (60) >> Global.node_077 
	endr 
	return 
endf 

def node_028
	if self.angle_2d_cw_between(115,245) 
		random (10) >> Global.node_074 
					reset 
		elser (35) >> Global.node_075 
		elser (15) >> Global.node_073 
		elser (10) >> Global.node_079 
		elser (15) >> Global.node_102 
		elser (15) >> Global.node_081 
		endr 
	else 
		random (15) >> Global.node_074 
					reset 
		elser (0) >> Global.node_075 
		elser (20) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (25) >> Global.node_102 
		elser (25) >> Global.node_081 
		endr 
	endif 
	return 
endf 

def node_029
	if self.angle_2d_cw_between(290,70) 
		random (15) >> Global.node_084 
		elser (85) 
		endr 
	else 
		random (0) >> Global.node_084 
		elser (100) 
		endr 
	endif 
	return 
endf 

def node_030
	>> node_045 
	>> node_031 
	>> node_045 
	>> node_032 
	>> node_045 
	>> node_033 
	return 
endf 

def node_031
	random (100) >> Global.node_085 
	elser (0) 
	endr 
	random (40) >> Global.node_072 
	elser (60) >> Global.node_077 
	endr 
	return 
endf 

def node_032
	if self.angle_2d_cw_between(115,245) 
		random (10) >> Global.node_074 
					reset 
		elser (35) >> Global.node_075 
		elser (15) >> Global.node_073 
		elser (10) >> Global.node_079 
		elser (15) >> Global.node_102 
		elser (15) >> Global.node_081 
		endr 
	else 
		random (15) >> Global.node_074 
					reset 
		elser (0) >> Global.node_075 
		elser (20) >> Global.node_073 
		elser (15) >> Global.node_079 
		elser (25) >> Global.node_102 
		elser (25) >> Global.node_081 
		endr 
	endif 
	return 
endf 

def node_033
	if self.angle_2d_cw_between(290,70) 
		random (20) >> Global.node_084 
		elser (80) 
		endr 
	else 
		random (0) >> Global.node_084 
		elser (100) 
		endr 
	endif 
	return 
endf 

def node_034
	>> node_045 
	if self.hp_percent().gt(50) 
		random (20) >> Global.node_078 
		elser (10) >> Global.node_062 
		elser (35) >> Global.node_102 
		elser (35) >> node_043 
		endr 
	else 
		random (40) >> Global.node_078 
		elser (10) >> Global.node_062 
		elser (50) >> node_043 
		endr 
	endif 
	return 
endf 

def node_035
	if self.hp_percent().gt(50) 
		random (10) >> Global.node_078 
		elser (50) >> Global.node_062 
		elser (15) >> Global.node_102 
		elser (25) >> node_043 
		endr 
	else 
		random (20) >> Global.node_078 
		elser (50) >> Global.node_062 
		elser (30) >> node_043 
		endr 
	endif 
	>> Global.node_108 
	return 
endf 

def node_036
	>> node_045 
	if self.hp_percent().gt(50) 
		random (10) >> Global.node_078 
		elser (50) >> Global.node_062 
		elser (15) >> Global.node_102 
		elser (25) >> node_043 
		endr 
	else 
		random (20) >> Global.node_078 
		elser (50) >> Global.node_062 
		elser (30) >> node_043 
		endr 
	endif 
	return 
endf 

def node_037
	>> node_045 
	if self.hp_percent().gt(50) 
		random (10) >> Global.node_078 
		elser (40) >> Global.node_062 
		elser (25) >> Global.node_102 
		elser (25) >> node_043 
		endr 
	else 
		random (35) >> Global.node_078 
		elser (40) >> Global.node_062 
		elser (25) >> node_043 
		endr 
	endif 
	return 
endf 

def node_038
	if self.hp_percent().gt(50) 
		random (10) >> Global.node_078 
		elser (50) >> Global.node_062 
		elser (15) >> Global.node_102 
		elser (25) >> node_043 
		endr 
	else 
		random (15) >> Global.node_078 
		elser (60) >> Global.node_062 
		elser (25) >> node_043 
		endr 
	endif 
	>> Global.node_108 
	return 
endf 

def node_039
	>> node_045 
	if self.hp_percent().gt(50) 
		random (10) >> Global.node_078 
		elser (50) >> Global.node_062 
		elser (15) >> Global.node_102 
		elser (25) >> node_043 
		endr 
	else 
		random (15) >> Global.node_078 
		elser (60) >> Global.node_062 
		elser (25) >> node_043 
		endr 
	endif 
	return 
endf 

def node_040
	>> Global.node_036 
	return 
endf 

def node_041
	>> Global.node_036 
	return 
endf 

def node_042
	>> Global.node_036 
	return 
endf 

def node_043
	>> Global.node_084 
	>> node_044 
	return 
endf 

def node_044
	if self.enraged() 
		if self.hp_percent().gt(50) 
			random (20) >> Global.node_078 
			elser (10) >> Global.node_062 
			elser (70) >> Global.node_102 
			endr 
		else 
			random (80) >> Global.node_078 
			elser (20) >> Global.node_062 
			endr 
		endif 
	elif self.fatigued() 
		if self.hp_percent().gt(50) 
			random (15) >> Global.node_078 
			elser (55) >> Global.node_062 
			elser (0) >> Global.node_102 
			elser (30) >> Global.node_108 
			endr 
		else 
			random (10) >> Global.node_078 
			elser (60) >> Global.node_062 
			elser (30) >> Global.node_108 
			endr 
		endif 
	else 
		if self.hp_percent().gt(50) 
			random (25) >> Global.node_078 
			elser (50) >> Global.node_062 
			elser (25) >> Global.node_102 
			endr 
		else 
			random (50) >> Global.node_078 
			elser (50) >> Global.node_062 
			endr 
		endif 
	endif 
	return 
endf 

def node_045
	if self.target.paralyzed() 
		random (75) >> Global.node_093 
					reset 
		elser (25) 
		endr 
	elif self.target.poisoned() 
		random (15) >> Global.node_093 
		elser (85) 
		endr 
	elif self.target.deadly_poisoned() 
		random (25) >> Global.node_093 
		elser (75) 
		endr 
	else 
	endif 
	return 
endf 

def node_046
	if self.in_map(st.Ancient_Forest).in_area(6) 
		if self.vertical_distance_to_target().gt(300) 
			>> Global.node_041 
			return 
		else 
		endif 
	else 
	endif 
	if self.vertical_distance_to_target().gt(450) 
		>> Global.node_040 
	elif self.target(52) 
		>> Global.node_041 
	else 
	endif 
	if self.distance_2d_to_target().leq(600) 
		self.enraged() >> node_010 => reset 
		self.fatigued() >> node_014 => reset 
		>> node_018 => reset 
	elif self.distance_2d_to_target().leq(1200) 
		self.enraged() >> node_022 => reset 
		self.fatigued() >> node_026 => reset 
		>> node_030 => reset 
	elif self.distance_2d_to_target().leq(3000) 
		self.enraged() >> node_034 => reset 
		self.fatigued() >> node_035 => reset 
		>> node_036 => reset 
	elif self.distance_2d_to_target().leq(8000) 
		self.enraged() >> node_037 => reset 
		self.fatigued() >> node_038 => reset 
		>> node_039 => reset 
	else 
		self.enraged() >> node_040 => reset 
		self.fatigued() >> node_041 => reset 
		>> node_042 => reset 
	endif 
	return 
endf 

