importactions Velkhana as velkhana

def node_000
	conclude 
endf 

def node_001
	[RegisterVar10 |-] 
	if self.in_map(st.Elder_Recess).in_area(1) 
		if function#10F(1500) 
		else 
			[RegisterVar10 ++] 
		endif 
	elif self.in_map(st.Elder_Recess).in_area(2) 
		if function#10F(1250) 
		else 
			[RegisterVar10 ++] 
		endif 
	elif self.in_map(st.Elder_Recess).in_area(4) 
		if function#10F(1750) 
		else 
			[RegisterVar10 ++] 
		endif 
	elif self.in_map(st.Elder_Recess).in_area(5) 
		if function#10F(1500) 
		else 
			[RegisterVar10 ++] 
		endif 
	elif self.in_map(st.Elder_Recess).in_area(6) 
		if function#10F(1250) 
		else 
			[RegisterVar10 ++] 
		endif 
	elif self.in_map(st.Elder_Recess).in_area(7) 
		if function#10F(1500) 
		else 
			[RegisterVar10 ++] 
		endif 
	elif self.in_map(st.Elder_Recess).in_area(8) 
		if function#10F(1825) 
		else 
			[RegisterVar10 ++] 
		endif 
	else 
		if function#10F(1500) 
		else 
			[RegisterVar10 ++] 
		endif 
	endif 
	return 
endf 

def node_002
	>> node_001 
	if [RegisterVar10 == 0] 
		random (60) >> node_004 
		elser (40) >> node_025 
		endr 
	else 
		random (40) >> node_004 
		elser (60) >> node_025 
		endr 
	endif 
	return 
endf 

def node_003
	>> node_001 
	if self.target(44) 
		>> node_004 
	else 
		if [RegisterVar10 == 0] 
			random (55) >> node_008 
			elser (45) >> node_025 
			endr 
		else 
			random (40) >> node_008 
			elser (60) >> node_025 
			endr 
		endif 
	endif 
	return 
endf 

def node_004
	>> node_001 
	if [RegisterVar10 == 0] 
		>> node_005 
	else 
		>> node_007 
	endif 
	return 
endf 

def node_005
	>> node_001 
	if [RegisterVar10 == 0] 
		>> node_046 
		if self.distance_2d_to_target().leq(800) 
			-> velkhana.adjust_bite() @ comboSetting:1 
			-> velkhana.ex_rotate_ice_wall_breath_seq() 
		elif self.distance_2d_to_target().leq(1500) 
			-> velkhana.ex_rotate_ice_wall_breath_seq() 
		else 
			>> node_233 
			-> velkhana.adjust_bite() @ comboSetting:1 
			-> velkhana.ex_rotate_ice_wall_breath_seq() 
		endif 
	else 
		if self.enraged() 
			random (20) >> node_033 
			elser (0) >> node_031 
			elser (0) >> node_030 
			elser (0) >> node_032 
			elser (20) >> node_036 
			elser (20) >> node_039 
			elser (40) >> node_025 
			endr 
		else 
			random (0) >> node_033 
			elser (0) >> node_031 
			elser (0) >> node_030 
			elser (0) >> node_032 
			elser (50) >> node_036 
			elser (0) >> node_039 
			elser (50) >> node_025 
			endr 
		endif 
	endif 
	return 
endf 

def node_006
	>> node_046 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_rotate_ice_wall_breath() 
	return 
endf 

def node_007
	>> node_046 
	if function#101(2) 
		if self.distance_2d_to_target().leq(800) 
			-> velkhana.adjust_bite() @ comboSetting:1 
			-> velkhana.ex_area_breath() @ comboSetting:1 
			-> velkhana.chance() 
		else 
			-> velkhana.ex_area_breath() @ comboSetting:1 
			-> velkhana.chance() 
		endif 
	else 
		-> velkhana.ex_area_breath() @ comboSetting:1 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_008
	>> node_001 
	if [RegisterVar10 == 0] 
		>> node_012 
	else 
		>> node_009 
	endif 
	return 
endf 

def node_009
	if [RegisterVar9 == 0] 
		>> node_010 
	elif [RegisterVar9 == 1] 
		>> node_010 
	elif [RegisterVar9 == 2] 
		>> node_011 
	else 
		>> node_011 
	endif 
	return 
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce2() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_area_breath() @ comboSetting:1 
	-> velkhana.chance() 
	return 
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.rush5() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_area_breath() @ comboSetting:1 
	-> velkhana.chance() 
	return 
endf 

def node_010
	>> node_044 
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.rush5() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_area_breath() @ comboSetting:1 
	-> velkhana.chance() 
	return 
endf 

def node_011
	>> node_045 
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce2() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_area_breath() @ comboSetting:1 
	-> velkhana.chance() 
	return 
endf 

def node_012
	if [RegisterVar9 == 0] 
		>> node_013 
	elif [RegisterVar9 == 1] 
		>> node_013 
	elif [RegisterVar9 == 2] 
		>> node_014 
	else 
		>> node_014 
	endif 
	return 
	>> node_046 
	-> velkhana.rush5() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_rotate_ice_wall_breath_seq() 
	return 
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce2() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_rotate_ice_wall_breath_seq() 
	return 
endf 

def node_013
	>> node_044 
	>> node_046 
	-> velkhana.rush5() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_rotate_ice_wall_breath_seq() 
	return 
endf 

def node_014
	>> node_045 
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce2() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_rotate_ice_wall_breath_seq() 
	return 
endf 

def node_015
	>> node_046 
	-> velkhana.rush3() @ comboSetting:1 
	-> velkhana.adjust_bite() @ comboSetting:1 
	-> velkhana.ex_rotate_ice_wall_breath() 
	return 
endf 

def node_016
	if function#10F(750) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	else 
		if function#110(315,45) 
			>> node_017 
		elif function#110(135,225) 
			>> node_018 
		elif function#110(45,135) 
			>> node_019 
		else 
			>> node_020 
		endif 
	endif 
	return 
endf 

def node_017
	if self.angle_2d_cw_between(315,45) 
		>> node_021 
	elif self.angle_2d_cw_between(135,225) 
		>> node_023 
	elif self.angle_2d_cw_between(45,135) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	else 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	endif 
	return 
endf 

def node_018
	if self.angle_2d_cw_between(315,45) 
		>> node_023 
	elif self.angle_2d_cw_between(135,225) 
		>> node_021 
	elif self.angle_2d_cw_between(45,135) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	else 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	endif 
	return 
endf 

def node_019
	if self.angle_2d_cw_between(315,45) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	elif self.angle_2d_cw_between(135,225) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	elif self.angle_2d_cw_between(45,135) 
		>> node_021 
	else 
		>> node_023 
	endif 
	return 
endf 

def node_020
	if self.angle_2d_cw_between(315,45) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	elif self.angle_2d_cw_between(135,225) 
		random (50) >> node_021 
		elser (50) >> node_023 
		endr 
	elif self.angle_2d_cw_between(45,135) 
		>> node_023 
	else 
		>> node_021 
	endif 
	return 
endf 

def node_021
	>> node_046 
	-> velkhana.rush4() @ comboSetting:1 
	-> velkhana.adjust_bite() 
	return 
endf 

def node_022
	>> node_046 
	-> velkhana.rush3() @ comboSetting:1 
	-> velkhana.adjust_bite() 
	return 
endf 

def node_023
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce2() @ comboSetting:1 
	-> velkhana.adjust_bite() 
	return 
endf 

def node_024
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce2() 
	return 
endf 

def node_025
	>> node_001 
	if [RegisterVar10 == 0] 
		>> node_029 
	else 
		if [RegisterVar7 == 1] 
			>> node_029 
		else 
			>> node_026 
		endif 
	endif 
	return 
endf 

def node_026
	>> node_046 
	if function#111() 
		function#111() 
		-> velkhana.ex_rush_halt() 
		self.targetEnemy(50) 
		-> velkhana.sweep_180_breath_turn() 
	else 
		-> velkhana.ex_rush_halt() 
		-> velkhana.sweep_180_breath_turn() 
	endif 
	return 
endf 

def node_027
	>> node_046 
	if function#111() 
		function#111() 
		-> velkhana.ex_rush_halt() 
		self.targetEnemy(50) 
		-> velkhana.sweep_180_breath_turn() 
	else 
		-> velkhana.ex_rush_halt() 
		-> velkhana.sweep_180_breath_turn() 
	endif 
	return 
endf 

def node_028
	>> node_046 
	if function#111() 
		function#111() 
		-> velkhana.ex_rush_halt() 
		>> node_381 
		-> velkhana.sweep_180_breath_turn() 
	else 
		>> node_381 
		-> velkhana.ex_rush_halt() 
		-> velkhana.sweep_180_breath_turn() 
	endif 
	return 
endf 

def node_029
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.ex_back_step_pierce_halt() 
	if self.distance_2d_to_target().leq(800) 
		-> velkhana.ex_ice_wave_start() 
	else 
		-> velkhana.ex_ice_block_breath_to_ground() 
	endif 
	return 
endf 

def node_030
	>> node_046 
	>> node_069 
	return 
endf 

def node_031
	>> node_046 
	if self.target(44) 
		random (50) >> node_080 
		elser (50) >> node_065 
		endr 
	else 
		if self.distance_2d_to_target().leq(1600) 
		else 
			>> node_233 
		endif 
		[RegisterVar7 |-] 
		[RegisterVar7 ++] 
		[RegisterVar7 ++] 
		>> node_085 
		>> node_142 
	endif 
	return 
endf 

def node_032
	>> node_046 
	if self.distance_2d_to_target().leq(2200) 
	else 
		>> node_239 
	endif 
	-> velkhana.ex_ice_block_breath_to_ground() 
	return 
endf 

def node_033
	if [RegisterVar7 == 1] 
		[RegisterVar7 |-] 
		if self.distance_2d_to_target().leq(1300) 
			>> node_035 
		else 
			>> node_080 
		endif 
	else 
		>> node_080 
	endif 
	return 
endf 

def node_034
	if [RegisterVar7 == 1] 
		[RegisterVar7 |-] 
		if self.distance_2d_to_target().leq(1600) 
			>> node_035 
		else 
			>> node_084 
		endif 
	else 
		>> node_084 
	endif 
	return 
endf 

def node_035
	if function#101() 
		if self.distance_2d_to_target().leq(1000) 
			random (35) >> node_058 
			elser (65) >> node_065 
			endr 
		else 
			if self.enraged() 
				>> node_072 
			else 
				>> node_071 
			endif 
		endif 
	elif function#101(1) 
		if self.distance_2d_to_target().leq(800) 
			random (40) >> node_030 
			elser (0) >> node_007 
			elser (60) >> node_036 
			endr 
		else 
			random (0) >> node_030 
			elser (40) >> node_007 
			elser (60) >> node_036 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(1000) 
			random (0) >> node_030 
			elser (20) >> node_007 
			elser (40) >> node_036 
			elser (40) >> node_025 
			endr 
		else 
			random (0) >> node_030 
			elser (20) >> node_007 
			elser (40) >> node_036 
			elser (40) >> node_025 
			endr 
		endif 
	endif 
	return 
endf 

def node_036
	if [RegisterVar9 == 0] 
		>> node_037 
	elif [RegisterVar9 == 1] 
		>> node_038 
	elif [RegisterVar9 == 2] 
		>> node_037 
	else 
		>> node_038 
	endif 
	return 
endf 

def node_037
	>> node_046 
	if self.distance_2d_to_target().leq(1000) 
	else 
		>> node_233 
	endif 
	>> node_042 
	-> velkhana.fly_tail_sting() @ comboSetting:1 
	-> velkhana.ex_ice_wave_start_fly() 
	return 
endf 

def node_038
	>> node_046 
	if self.target(44) 
		random (50) >> node_080 
		elser (50) >> node_065 
		endr 
	else 
		if self.distance_2d_to_target().leq(1300) 
		else 
			>> node_233 
		endif 
		>> node_043 
		-> velkhana.ex_tail_swing_halt() 
		if self.distance_2d_to_target().leq(850) 
			[RegisterVar7 |-] 
			[RegisterVar7 ++] 
			[RegisterVar7 ++] 
			-> velkhana.freeze_breath() 
			>> node_086 
			>> node_142 
		else 
			-> velkhana.ex_area_breath() @ comboSetting:1 
			-> velkhana.chance() 
		endif 
	endif 
	return 
endf 

def node_039
	if self.target(44) 
		>> node_036 
	else 
		if [RegisterVar9 == 0] 
			>> node_040 
		elif [RegisterVar9 == 1] 
			>> node_041 
		elif [RegisterVar9 == 2] 
			>> node_040 
		else 
			>> node_041 
		endif 
	endif 
	return 
endf 

def node_040
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	>> node_042 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_fly_tail_sting() @ comboSetting:1 
	-> velkhana.ex_ice_wave_start_fly() 
	return 
endf 

def node_041
	>> node_046 
	if self.target(44) 
		random (100) >> node_080 
		elser (0) >> node_065 
		endr 
	else 
		if self.distance_2d_to_target().leq(250) 
		elif self.distance_2d_to_target().leq(800) 
		else 
			>> node_233 
		endif 
		>> node_043 
		-> velkhana.tail_sting() @ comboSetting:1 
		-> velkhana.ex_combo_tail_swing_halt() 
		if self.distance_2d_to_target().leq(850) 
			[RegisterVar7 |-] 
			[RegisterVar7 ++] 
			[RegisterVar7 ++] 
			-> velkhana.freeze_breath() 
			>> node_086 
			>> node_142 
		else 
			-> velkhana.ex_area_breath() @ comboSetting:1 
			-> velkhana.chance() 
		endif 
	endif 
	return 
endf 

def node_042
	if [RegisterVar9 == 0] 
		[RegisterVar9 ++] 
	elif [RegisterVar9 == 1] 
	elif [RegisterVar9 == 2] 
		[RegisterVar9 ++] 
	elif [RegisterVar9 == 3] 
	else 
		[RegisterVar9 |-] 
	endif 
	return 
endf 

def node_043
	if [RegisterVar9 == 0] 
	elif [RegisterVar9 == 1] 
		[RegisterVar9 |-] 
	elif [RegisterVar9 == 2] 
	elif [RegisterVar9 == 3] 
		[RegisterVar9 |-] 
		[RegisterVar9 ++] 
		[RegisterVar9 ++] 
	else 
		[RegisterVar9 |-] 
	endif 
	return 
endf 

def node_044
	if [RegisterVar9 == 0] 
		[RegisterVar9 ++] 
		[RegisterVar9 ++] 
	elif [RegisterVar9 == 1] 
		[RegisterVar9 ++] 
		[RegisterVar9 ++] 
	elif [RegisterVar9 == 2] 
	elif [RegisterVar9 == 3] 
	else 
		[RegisterVar9 |-] 
	endif 
	return 
endf 

def node_045
	if [RegisterVar9 == 0] 
	elif [RegisterVar9 == 1] 
	elif [RegisterVar9 == 2] 
		[RegisterVar9 |-] 
	elif [RegisterVar9 == 3] 
		[RegisterVar9 |-] 
		[RegisterVar9 ++] 
	else 
		[RegisterVar9 |-] 
	endif 
	return 
endf 

def node_046
	if self.flying() 
		if function#AF(5000) 
			-> velkhana.landing() 
		else 
			>> node_048 
		endif 
	else 
	endif 
	return 
endf 

def node_047
	if self.flying() 
	else 
		-> velkhana.take_off() 
	endif 
	return 
endf 

def node_048
	self.targetArea(target_area.area_aerial_center) 
	>> node_253 
	self.targetArea(target_area.area_center) 
	-> velkhana.landing() 
	return 
endf 

def node_049
	>> node_046 
	-> velkhana.adjust_bite() 
	return 
endf 

def node_050
	>> node_046 
	-> velkhana.rush() 
	return 
endf 

def node_051
	>> node_046 
	-> velkhana.rush_2() 
	return 
endf 

def node_052
	if self.distance_2d_to_target().leq(1500) 
		>> node_050 
	elif self.distance_2d_to_target().leq(2000) 
		>> node_113 
	else 
	endif 
	return 
endf 

def node_053
	>> node_046 
	-> velkhana.back_step_pierce() 
	return 
endf 

def node_054
	>> node_046 
	-> velkhana.back_step_pierce_2() 
	return 
endf 

def node_055
	if self.distance_2d_to_target().leq(1300) 
		>> node_053 
	elif self.distance_2d_to_target().leq(2000) 
		>> node_113 
	else 
	endif 
	return 
endf 

def node_056
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() 
	return 
endf 

def node_057
	>> node_046 
	if self.distance_2d_to_target().leq(900) 
	else 
		>> node_233 
	endif 
	-> velkhana.fly_tail_sting_to_ground() 
	return 
endf 

def node_058
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_swing() 
	return 
endf 

def node_059
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_sting() 
	return 
endf 

def node_060
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_fly_tail_sting_to_ground() 
	return 
endf 

def node_061
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_swing() 
	return 
endf 

def node_062
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_sting() 
	return 
endf 

def node_063
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_sting() @ comboSetting:1 
	-> velkhana.combo_fly_tail_sting_to_ground() 
	return 
endf 

def node_064
	>> node_046 
	if self.distance_2d_to_target().leq(250) 
	elif self.distance_2d_to_target().leq(800) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_swing() 
	return 
endf 

def node_065
	if self.distance_2d_to_target().leq(900) 
	else 
		>> node_233 
	endif 
	if self.enraged() 
		random (0) >> node_059 
		elser (50) >> node_062 
		elser (0) >> node_060 
		elser (25) >> node_063 
		elser (0) >> node_061 
		elser (25) >> node_064 
		endr 
	else 
		random (60) >> node_059 
		elser (0) >> node_057 
		elser (20) >> node_060 
		elser (0) >> node_058 
		elser (20) >> node_061 
		endr 
	endif 
	return 
endf 

def node_066
	>> node_046 
	if self.current_quest().is_rank(rank.AT) 
		-> velkhana.ex_ice_block_breath_to_ground() 
	else 
		-> velkhana.ice_block_breath_to_ground() 
	endif 
	return 
endf 

def node_067
	>> node_046 
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			-> velkhana.ex_ice_block_breath() 
		else 
			-> velkhana.ice_block_breath() 
		endif 
	else 
		-> velkhana.ice_block_breath() 
	endif 
	return 
endf 

def node_068
	>> node_046 
	if self.current_quest().is_rank(rank.AT) 
		-> velkhana.ex_area_breath() @ comboSetting:1 
		-> velkhana.chance() 
	else 
		-> velkhana.area_breath() @ comboSetting:1 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_069
	>> node_046 
	if self.current_quest().is_rank(rank.AT) 
		-> velkhana.ex_ice_wave_start() 
	else 
		-> velkhana.ice_wave_start() 
	endif 
	return 
endf 

def node_070
	>> node_046 
	if self.current_quest().is_rank(rank.AT) 
		-> velkhana.ex_ice_drop() 
	else 
		-> velkhana.ice_drop() 
	endif 
	return 
endf 

def node_071
	>> node_046 
	-> velkhana.straight_breath() 
	return 
endf 

def node_072
	>> node_046 
	-> velkhana.straight_breath() @ comboSetting:1 
	-> velkhana.combo_straight_breath() 
	return 
endf 

def node_073
	>> node_046 
	-> velkhana.sweep_90_breath() 
	[RegisterVar4 ++] 
	return 
endf 

def node_074
	>> node_046 
	-> velkhana.sweep_180_breath_turn() 
	[RegisterVar4 ++] 
	return 
endf 

def node_075
	>> node_046 
	if self.angle_2d_cw_between(315,45) 
		-> velkhana.sweep_180_breath() 
	elif self.angle_2d_cw_between(45,135) 
		-> velkhana.sweep_180_breath_lf() 
	elif self.angle_2d_cw_between(135,180) 
		-> velkhana.sweep_180_breath_lb() 
	elif self.angle_2d_cw_between(180,225) 
		-> velkhana.sweep_180_breath_rb() 
	else 
		-> velkhana.sweep_180_breath_rf() 
	endif 
	[RegisterVar4 ++] 
	return 
endf 

def node_076
	if self.current_quest().is_rank(rank.AT) 
		>> node_046 
		if self.angle_2d_cw_between(0,180) 
			-> velkhana.turn_step_side_r() @ comboSetting:1 
			-> velkhana.straight_breath() 
		else 
			-> velkhana.turn_step_side_l() @ comboSetting:1 
			-> velkhana.straight_breath() 
		endif 
	else 
		>> node_110 
		>> node_071 
	endif 
	return 
endf 

def node_077
	if self.current_quest().is_rank(rank.AT) 
		>> node_046 
		if self.angle_2d_cw_between(0,180) 
			-> velkhana.turn_step_side_r() @ comboSetting:1 
			-> velkhana.straight_breath() @ comboSetting:1 
			-> velkhana.combo_straight_breath() 
		else 
			-> velkhana.turn_step_side_l() @ comboSetting:1 
			-> velkhana.straight_breath() @ comboSetting:1 
			-> velkhana.combo_straight_breath() 
		endif 
	else 
		>> node_110 
		>> node_072 
	endif 
	return 
endf 

def node_078
	>> node_046 
	>> node_113 
	>> node_073 
	return 
endf 

def node_079
	>> node_046 
	>> node_113 
	>> node_074 
	return 
endf 

def node_080
	if self.target(44) 
		if self.enraged() 
			>> node_077 
		else 
			>> node_076 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			if self.enraged() 
				>> node_077 
			else 
				>> node_076 
			endif 
		elif self.distance_2d_to_target().leq(1300) 
			if self.enraged() 
				>> node_077 
			else 
				>> node_076 
			endif 
		else 
			if self.enraged() 
				>> node_072 
			else 
				>> node_071 
			endif 
		endif 
	endif 
	return 
endf 

def node_081
	if self.distance_2d_to_target().leq(1600) 
		>> node_078 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_082
	if self.distance_2d_to_target().leq(1600) 
		>> node_079 
	else 
		>> node_074 
	endif 
	return 
endf 

def node_083
	if function#101(2) 
		if self.enraged() 
			random (20) >> node_082 
			elser (80) >> node_080 
			endr 
		else 
			random (10) >> node_082 
			elser (90) >> node_080 
			endr 
		endif 
	elif function#101(1) 
		if self.enraged() 
			random (20) >> node_081 
			elser (80) >> node_080 
			endr 
		else 
			random (10) >> node_081 
			elser (90) >> node_080 
			endr 
		endif 
	else 
		>> node_080 
	endif 
	return 
endf 

def node_084
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			>> node_082 
		elif function#101(1) 
			>> node_082 
		else 
			>> node_080 
		endif 
	else 
		if function#101(2) 
			>> node_082 
		elif function#101(1) 
			>> node_081 
		else 
			>> node_080 
		endif 
	endif 
	reset 
endf 

def node_085
	>> node_046 
	if self.target(44) 
		random (50) >> node_080 
		elser (50) >> node_065 
		endr 
	else 
		if self.angle_2d_cw_between(330,30) 
			-> velkhana.freeze_breath() 
		else 
			-> velkhana.quick_turn() @ comboSetting:1 
			-> velkhana.freeze_breath_front() 
		endif 
		>> node_086 
	endif 
	return 
endf 

def node_086
	if self.target(57) 
		-> velkhana.freeze_breath_to_attack() 
		reset 
	else 
		-> velkhana.freeze_breath_miss() @ comboSetting:1 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_087
	>> node_046 
	if self.distance_2d_to_target().leq(1300) 
	else 
		>> node_233 
	endif 
	-> velkhana.fly_tail_sting() 
	return 
endf 

def node_088
	>> node_046 
	if self.distance_2d_to_target().leq(900) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_fly_tail_sting() 
	return 
endf 

def node_089
	>> node_046 
	if self.distance_2d_to_target().leq(900) 
	else 
		>> node_233 
	endif 
	-> velkhana.tail_sting() @ comboSetting:1 
	-> velkhana.combo_tail_sting() @ comboSetting:1 
	-> velkhana.combo_fly_tail_sting() 
	return 
endf 

def node_090
	if self.distance_2d_to_target().leq(900) 
		if self.enraged() 
			random (100) >> node_087 
			elser (0) >> node_088 
			elser (0) >> node_089 
			endr 
		else 
			random (100) >> node_087 
			elser (0) >> node_088 
			elser (0) >> node_089 
			endr 
		endif 
	else 
		>> node_087 
	endif 
	return 
endf 

def node_091
	>> node_047 
	if self.angle_2d_cw_between(0,180) 
		-> velkhana.turn_step_r_fly() 
	else 
		-> velkhana.turn_step_l_fly() 
	endif 
	return 
endf 

def node_092
	>> node_047 
	-> velkhana.fly_tail_sting_fly_start() 
	return 
endf 

def node_093
	>> node_047 
	-> velkhana.tail_swing_fly() 
	return 
endf 

def node_094
	>> node_047 
	-> velkhana.rush_fly() 
	return 
endf 

def node_095
	>> node_047 
	-> velkhana.vertical_breath_fly() 
	return 
endf 

def node_096
	>> node_047 
	-> velkhana.vertical_breath_fly_to_ground() 
	return 
endf 

def node_097
	>> node_047 
	if self.current_quest().is_rank(rank.AT) 
		-> velkhana.ex_ice_wave_start_fly() 
	else 
		-> velkhana.ice_wave_start_fly() 
	endif 
	return 
endf 

def node_098
	if self.distance_2d_to_target().leq(300) 
		random (50) >> node_092 
		elser (50) >> node_093 
		elser (0) >> node_094 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (50) >> node_092 
		elser (50) >> node_093 
		elser (0) >> node_094 
		endr 
	else 
		>> node_094 
	endif 
	return 
endf 

def node_099
	if self.distance_2d_to_target().leq(400) 
		>> node_091 
	else 
		>> node_098 
	endif 
	return 
endf 

def node_100
	if function#101() 
		>> node_103 
	else 
		>> node_106 
	endif 
	return 
endf 

def node_101
	if function#101() 
		>> node_104 
	else 
		>> node_107 
	endif 
	return 
endf 

def node_102
	if function#101() 
		>> node_105 
	else 
		>> node_108 
	endif 
	return 
endf 

def node_103
	>> node_090 
	>> node_405 
	>> node_096 
	return 
endf 

def node_104
	>> node_090 
	>> node_405 
	>> node_098 
	>> node_405 
	>> node_096 
	return 
endf 

def node_105
	>> node_090 
	>> node_405 
	>> node_098 
	>> node_405 
	>> node_098 
	>> node_405 
	>> node_096 
	return 
endf 

def node_106
	>> node_090 
	>> node_405 
	random (50) 
				>> node_097 
	elser (50) 
				>> node_096 
	endr 
	return 
endf 

def node_107
	>> node_090 
	>> node_405 
	random (50) 
				>> node_095 
				>> node_405 
				>> node_097 
	elser (50) 
				>> node_098 
				>> node_405 
				>> node_096 
	endr 
	return 
endf 

def node_108
	>> node_090 
	>> node_405 
	random (30) 
				>> node_098 
				>> node_405 
				>> node_095 
				>> node_405 
				>> node_097 
	elser (30) 
				>> node_098 
				>> node_405 
				>> node_098 
				>> node_405 
				>> node_097 
	elser (40) 
				>> node_098 
				>> node_405 
				>> node_098 
				>> node_405 
				>> node_096 
	endr 
	return 
endf 

def node_109
	>> node_046 
	if self.current_quest().is_rank(rank.AT) 
		if self.target(44) 
		else 
			if self.distance_2d_to_target().leq(1250) 
				>> node_113 
			else 
				>> node_238 
			endif 
			[RegisterVar2 |-] 
			[RegisterVar7 |-] 
			[RegisterVar7 ++] 
			[RegisterVar7 ++] 
			-> velkhana.ex_special_breath_attack_start() @ comboSetting:1 
			-> velkhana.chance() 
			>> node_142 
		endif 
	else 
		if self.distance_2d_to_target().leq(1500) 
		else 
			>> node_233 
		endif 
		if function#7D() 
			-> velkhana.special_breath_attack_start_2() 
		else 
			-> velkhana.special_breath_attack_start() 
		endif 
	endif 
	return 
endf 

def node_110
	>> node_046 
	if self.angle_2d_cw_between(0,180) 
		-> velkhana.turn_step_side_r() 
	else 
		-> velkhana.turn_step_side_l() 
	endif 
	return 
endf 

def node_111
	>> node_046 
	if self.angle_2d_cw_between(0,180) 
		-> velkhana.turn_step_front_r() 
	else 
		-> velkhana.turn_step_front_l() 
	endif 
	return 
endf 

def node_112
	>> node_046 
	if self.angle_2d_cw_between(0,180) 
		-> velkhana.turn_step_back_r() 
	else 
		-> velkhana.turn_step_back_l() 
	endif 
	return 
endf 

def node_113
	if self.angle_2d_cw_between(270,90) 
		>> node_112 
	else 
		>> node_111 
	endif 
	return 
endf 

def node_114
	>> node_046 
	if self.angle_2d_cw_between(0,180) 
		-> velkhana.turn_step_front_far_r() 
	else 
		-> velkhana.turn_step_front_far_l() 
	endif 
	return 
endf 

def node_115
	if function#101() 
		[RegisterVar1 |-] 
		[RegisterVar0 ++] 
		>> node_116 
	elif function#101(1) 
		[RegisterVar0 |-] 
		[RegisterVar1 ++] 
		>> node_117 
	else 
		[RegisterVar0 |-] 
		[RegisterVar1 |-] 
		[RegisterVar2 ++] 
		>> node_118 
	endif 
	return 
endf 

def node_116
	if self.hp_percent().gt(20) 
		if [RegisterVar0 <= 4] 
			[RegisterVar0 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(40) 
		if [RegisterVar0 <= 5] 
			[RegisterVar0 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(60) 
		if [RegisterVar0 <= 6] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(80) 
		if [RegisterVar0 <= 7] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	else 
		if [RegisterVar0 <= 8] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	endif 
	return 
endf 

def node_117
	if self.hp_percent().gt(20) 
		if [RegisterVar1 <= 4] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(40) 
		if [RegisterVar1 <= 5] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(60) 
		if [RegisterVar1 <= 6] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(80) 
		if [RegisterVar1 <= 8] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	else 
		if [RegisterVar1 <= 11] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	endif 
	return 
endf 

def node_118
	if self.flying() 
		return 
	else 
	endif 
	if self.hp_percent().gt(30) 
		if [RegisterVar2 <= 9] 
			>> node_109 
		else 
		endif 
	elif self.hp_percent().gt(50) 
		if [RegisterVar2 <= 10] 
			>> node_109 
		else 
		endif 
	elif self.hp_percent().gt(75) 
		if [RegisterVar2 <= 11] 
			>> node_109 
		else 
		endif 
	else 
		if [RegisterVar2 <= 12] 
			>> node_109 
		else 
		endif 
	endif 
	return 
endf 

def node_119
	[RegisterVar3 ++] 
	if self.target(44) 
	else 
		if function#101() 
			[RegisterVar3 |-] 
		elif function#101(1) 
			if [RegisterVar3 <= 5] 
				[RegisterVar3 |-] 
				>> node_405 
				>> node_129 
				>> node_125 
			else 
				>> node_126 
			endif 
		else 
			[RegisterVar3 |-] 
			>> node_126 
		endif 
	endif 
	return 
endf 

def node_120
	if function#B0(1) 
	else 
		if function#101() 
			[RegisterVar1 |-] 
			[RegisterVar0 ++] 
			>> node_121 
		elif function#101(1) 
			[RegisterVar0 |-] 
			[RegisterVar1 ++] 
			>> node_122 
		else 
			if self.quest_id(1404) 
			else 
				[RegisterVar0 |-] 
				[RegisterVar1 |-] 
				[RegisterVar2 ++] 
				>> node_123 
			endif 
		endif 
	endif 
	return 
endf 

def node_121
	if self.hp_percent().gt(30) 
		if [RegisterVar0 <= 6] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(50) 
		if [RegisterVar0 <= 9] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(75) 
		if [RegisterVar0 <= 12] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	else 
		if [RegisterVar0 <= 15] 
			[RegisterVar0 |-] 
			[RegisterVar2 |-] 
			>> node_279 
		else 
		endif 
	endif 
	return 
endf 

def node_122
	if self.hp_percent().gt(30) 
		if [RegisterVar1 <= 6] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(50) 
		if [RegisterVar1 <= 9] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	elif self.hp_percent().gt(75) 
		if [RegisterVar1 <= 12] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	else 
		if [RegisterVar1 <= 15] 
			[RegisterVar1 |-] 
			>> node_279 
		else 
		endif 
	endif 
	return 
endf 

def node_123
	if self.flying() 
		return 
	else 
	endif 
	if self.hp_percent().gt(30) 
		if [RegisterVar2 <= 6] 
			random (30) 
						[RegisterVar2 |-] 
						>> node_109 
			elser (70) 
			endr 
		elif [RegisterVar2 <= 12] 
			[RegisterVar2 |-] 
			>> node_109 
		else 
		endif 
	elif self.hp_percent().gt(50) 
		if [RegisterVar2 <= 6] 
			random (20) 
						[RegisterVar2 |-] 
						>> node_109 
			elser (80) 
			endr 
		elif [RegisterVar2 <= 12] 
			[RegisterVar2 |-] 
			>> node_109 
		else 
		endif 
	elif self.hp_percent().gt(75) 
		if [RegisterVar2 <= 10] 
			random (30) 
						[RegisterVar2 |-] 
						>> node_109 
			elser (70) 
			endr 
		elif [RegisterVar2 <= 15] 
			[RegisterVar2 |-] 
			>> node_109 
		else 
		endif 
	else 
		if [RegisterVar2 <= 10] 
			random (20) 
						[RegisterVar2 |-] 
						>> node_109 
			elser (80) 
			endr 
		elif [RegisterVar2 <= 15] 
			[RegisterVar2 |-] 
			>> node_109 
		else 
		endif 
	endif 
	return 
endf 

def node_124
	[RegisterVar3 ++] 
	if self.target(44) 
	else 
		if function#101() 
			[RegisterVar3 |-] 
		elif function#101(1) 
			if [RegisterVar3 <= 4] 
				random (75) 
							[RegisterVar3 |-] 
							>> node_128 
							self.targetArea(1) 
							>> node_125 
				elser (25) 
							>> node_126 
				endr 
			else 
				>> node_126 
			endif 
		else 
			if [RegisterVar3 <= 3] 
				random (75) 
							[RegisterVar3 |-] 
							>> node_128 
							self.targetArea(1) 
							>> node_125 
				elser (25) 
							>> node_126 
				endr 
			else 
				>> node_126 
			endif 
		endif 
	endif 
	return 
endf 

def node_125
	[RegisterVar3 |-] 
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			>> node_074 
		elif function#101(1) 
			>> node_074 
		else 
			>> node_073 
		endif 
		return 
	else 
		if function#101(2) 
			>> node_082 
		elif function#101(1) 
			>> node_081 
		else 
			>> node_080 
		endif 
	endif 
	reset 
endf 

def node_126
	if self.current_quest().is_rank(rank.AT) 
		if self.target(44) 
		else 
			if function#101(2) 
				if function#10E(3,50) 
				elif self.target.helpless_0() 
				else 
					return 
				endif 
				if [RegisterVar2 <= 7] 
					random (0) 
								>> node_405 
								[RegisterVar2 |-] 
								>> node_109 
					elser (100) 
					endr 
				else 
					if self.enraged() 
						random (0) 
									>> node_405 
									[RegisterVar3 |-] 
									>> node_008 
						elser (0) 
									>> node_405 
									[RegisterVar3 |-] 
									>> node_025 
						elser (100) 
						endr 
					else 
						random (0) 
									>> node_405 
									[RegisterVar3 |-] 
									>> node_004 
						elser (0) 
									>> node_405 
									[RegisterVar3 |-] 
									>> node_025 
						elser (100) 
						endr 
					endif 
				endif 
			elif function#101(1) 
				if function#10E(3,50) 
				elif self.target.helpless_0() 
				else 
					return 
				endif 
				random (25) 
							>> node_405 
							[RegisterVar3 |-] 
							>> node_129 
							>> node_125 
				elser (75) 
				endr 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_127
	self.targetEnemy(50) 
	random (70) >> node_055 
	elser (30) >> node_052 
	endr 
	return 
endf 

def node_128
	if self.distance_2d_to_target().leq(1300) 
	else 
		random (50) >> node_233 
		elser (50) 
		endr 
	endif 
	self.targetArea(target_area.area_center) 
	if self.distance_2d_to_target().leq(500) 
		self.targetArea(1) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	else 
		if self.angle_2d_cw_between(270,90) 
			self.targetArea(1) 
			if self.angle_2d_cw_between(270,90) 
				>> node_052 
			else 
				>> node_055 
			endif 
		else 
			self.targetArea(1) 
			if self.angle_2d_cw_between(270,90) 
				>> node_055 
			else 
				>> node_052 
			endif 
		endif 
	endif 
	return 
endf 

def node_129
	if self.distance_2d_to_target().leq(1300) 
	else 
		random (50) >> node_233 
		elser (50) 
		endr 
	endif 
	if function#10F(750) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	else 
		if function#110(315,45) 
			>> node_130 
		elif function#110(135,225) 
			>> node_131 
		elif function#110(45,135) 
			>> node_132 
		else 
			>> node_133 
		endif 
	endif 
	return 
endf 

def node_130
	if self.angle_2d_cw_between(315,45) 
		>> node_052 
	elif self.angle_2d_cw_between(135,225) 
		>> node_055 
	elif self.angle_2d_cw_between(45,135) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	else 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	endif 
	return 
endf 

def node_131
	if self.angle_2d_cw_between(315,45) 
		>> node_055 
	elif self.angle_2d_cw_between(135,225) 
		>> node_052 
	elif self.angle_2d_cw_between(45,135) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	else 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	endif 
	return 
endf 

def node_132
	if self.angle_2d_cw_between(315,45) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	elif self.angle_2d_cw_between(135,225) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	elif self.angle_2d_cw_between(45,135) 
		>> node_052 
	else 
		>> node_055 
	endif 
	return 
endf 

def node_133
	if self.angle_2d_cw_between(315,45) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	elif self.angle_2d_cw_between(135,225) 
		random (50) >> node_052 
		elser (50) >> node_055 
		endr 
	elif self.angle_2d_cw_between(45,135) 
		>> node_055 
	else 
		>> node_052 
	endif 
	return 
endf 

def node_134
	self.targetArea(target_area.area_center) 
	if self.distance_2d_to_target().leq(500) 
		self.targetEnemy(50) 
		random (50) >> node_051 
		elser (50) >> node_054 
		endr 
	else 
		if self.angle_2d_cw_between(270,90) 
			self.targetEnemy(50) 
			if self.angle_2d_cw_between(270,90) 
				>> node_051 
			else 
				>> node_054 
			endif 
		else 
			self.targetEnemy(50) 
			if self.angle_2d_cw_between(270,90) 
				>> node_054 
			else 
				>> node_051 
			endif 
		endif 
	endif 
	return 
endf 

def node_135
	if self.distance_2d_to_target().leq(600) 
		random (25) >> node_056 
		elser (25) >> node_058 
		elser (50) >> node_065 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		>> node_076 
	else 
		>> node_071 
	endif 
	return 
endf 

def node_136
	self.targetArea(target_area.area_center) 
	if self.angle_2d_cw_between(270,90) 
		self.targetEnemy(50) 
		if self.angle_2d_cw_between(270,90) 
			>> node_051 
			>> node_137 
		else 
			>> node_054 
			>> node_138 
		endif 
	else 
		self.targetEnemy(50) 
		if self.angle_2d_cw_between(270,90) 
			>> node_054 
			>> node_138 
		else 
			>> node_051 
			>> node_137 
		endif 
	endif 
	>> node_135 
	return 
endf 

def node_137
	if [RegisterVar3 <= 0] 
		self.targetArea(target_area.area_center) 
		if self.distance_2d_to_target().leq(1000) 
			self.targetEnemy(50) 
			if self.distance_2d_to_target().leq(1500) 
				>> node_055 
				>> node_125 
			else 
			endif 
		else 
			if self.angle_2d_cw_between(270,90) 
				self.targetEnemy(50) 
				if self.angle_2d_cw_between(270,90) 
				else 
					if self.distance_2d_to_target().leq(1500) 
						>> node_055 
						>> node_125 
					else 
					endif 
				endif 
			else 
				self.targetEnemy(50) 
				if self.angle_2d_cw_between(270,90) 
					if self.distance_2d_to_target().leq(1500) 
						>> node_055 
						>> node_125 
					else 
					endif 
				else 
				endif 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_138
	if [RegisterVar3 <= 0] 
		self.targetArea(target_area.area_center) 
		if self.distance_2d_to_target().leq(1000) 
			self.targetEnemy(50) 
			if self.distance_2d_to_target().leq(1500) 
				>> node_052 
				>> node_125 
			else 
			endif 
		else 
			if self.angle_2d_cw_between(270,90) 
				self.targetEnemy(50) 
				if self.angle_2d_cw_between(270,90) 
					if self.distance_2d_to_target().leq(1500) 
						>> node_052 
						>> node_125 
					else 
					endif 
				else 
				endif 
			else 
				self.targetEnemy(50) 
				if self.angle_2d_cw_between(270,90) 
				else 
					if self.distance_2d_to_target().leq(1500) 
						>> node_052 
						>> node_125 
					else 
					endif 
				endif 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_139
	if self.target(3) 
	else 
		if [RegisterVar4 <= 1] 
			[RegisterVar4 |-] 
		else 
			if self.distance_2d_to_target().leq(250) 
			elif self.distance_2d_to_target().leq(1300) 
				if function#101(2) 
					random (20) >> node_070 
					elser (80) 
					endr 
				elif function#101(1) 
					random (15) >> node_070 
					elser (85) 
					endr 
				else 
				endif 
			elif self.distance_2d_to_target().leq(3500) 
				if function#101(2) 
					random (35) >> node_070 
					elser (65) 
					endr 
				elif function#101(1) 
					random (25) >> node_070 
					elser (75) 
					endr 
				else 
				endif 
			else 
			endif 
		endif 
	endif 
	return 
endf 

def node_140
	if self.distance_2d_to_target().leq(1300) 
	elif self.distance_2d_to_target().leq(3000) 
		if function#101() 
			random (75) >> node_233 
			elser (25) 
			endr 
		else 
			if [RegisterVar3 <= 4] 
				>> node_233 
			elif [RegisterVar3 <= 2] 
				random (70) >> node_233 
				elser (30) 
				endr 
			else 
				random (40) >> node_233 
				elser (60) 
				endr 
			endif 
		endif 
	else 
		>> node_233 
	endif 
	return 
endf 

def node_141
	if self.flying() 
		[RegisterVar7 |-] 
	elif self.target(3) 
		[RegisterVar7 |-] 
	elif function#101() 
		[RegisterVar7 |-] 
	else 
		if [RegisterVar7 == 3] 
			[RegisterVar7 |-] 
		elif [RegisterVar7 == 2] 
			[RegisterVar7 |-] 
			>> node_070 
		else 
			[RegisterVar7 |-] 
			if function#101(2) 
				if self.distance_2d_to_target().leq(2200) 
					random (0) 
								>> node_070 
					elser (100) 
					endr 
				elif self.distance_2d_to_target().leq(4400) 
					random (25) 
								>> node_070 
					elser (75) 
					endr 
				else 
				endif 
			else 
				if self.distance_2d_to_target().leq(2200) 
					random (0) 
								>> node_070 
					elser (100) 
					endr 
				elif self.distance_2d_to_target().leq(4400) 
					random (15) 
								>> node_070 
					elser (85) 
					endr 
				else 
				endif 
			endif 
		endif 
	endif 
	return 
endf 

def node_142
	if self.flying() 
		[RegisterVar7 |-] 
	elif self.target(3) 
		[RegisterVar7 |-] 
	elif function#101() 
		[RegisterVar7 |-] 
	else 
		[RegisterVar7 |-] 
		>> node_070 
		[RegisterVar7 ++] 
		[RegisterVar7 ++] 
		[RegisterVar7 ++] 
	endif 
	return 
endf 

def node_143
	[RegisterVar7 |-] 
	if self.distance_2d_to_target().leq(1300) 
	elif self.distance_2d_to_target().leq(3300) 
		if function#101() 
			random (75) >> node_233 
						[RegisterVar7 ++] 
			elser (0) >> node_239 
						[RegisterVar7 ++] 
			elser (25) 
			endr 
		else 
			if [RegisterVar3 <= 4] 
				>> node_233 
				[RegisterVar7 ++] 
			elif [RegisterVar3 <= 2] 
				random (50) >> node_233 
							[RegisterVar7 ++] 
				elser (0) >> node_239 
							[RegisterVar7 ++] 
				elser (50) 
				endr 
			else 
				random (25) >> node_233 
							[RegisterVar7 ++] 
				elser (0) >> node_239 
							[RegisterVar7 ++] 
				elser (75) 
				endr 
			endif 
		endif 
	else 
		if function#101() 
			>> node_233 
			[RegisterVar7 ++] 
		else 
			random (40) >> node_233 
						[RegisterVar7 ++] 
			elser (60) >> node_239 
						[RegisterVar7 ++] 
			elser (0) 
			endr 
		endif 
	endif 
	return 
endf 

def node_144
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			>> node_168 
		elif function#101(1) 
			>> node_163 
		else 
			>> node_160 
		endif 
	else 
		if function#101(2) 
			>> node_157 
		elif function#101(1) 
			>> node_154 
		else 
			>> node_151 
		endif 
	endif 
	return 
endf 

def node_145
	if self.distance_2d_to_target().leq(300) 
		random (20) >> node_049 
					>> node_148 
		elser (0) >> node_051 
					>> node_147 
		elser (80) >> node_054 
					>> node_146 
		endr 
	elif self.distance_2d_to_target().leq(700) 
		random (50) >> node_049 
					>> node_148 
		elser (25) >> node_051 
					>> node_147 
		elser (25) >> node_054 
					>> node_146 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (20) >> node_049 
					>> node_148 
		elser (80) >> node_051 
					>> node_147 
		elser (0) >> node_054 
					>> node_146 
		endr 
	else 
	endif 
	return 
endf 

def node_146
	>> node_126 
	if self.distance_2d_to_target().leq(300) 
		random (65) >> node_049 
		elser (0) >> node_134 
		elser (35) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(900) 
		random (65) >> node_049 
		elser (0) >> node_134 
		elser (35) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (65) >> node_049 
		elser (0) >> node_134 
		elser (35) >> node_051 
		elser (0) >> node_054 
		endr 
	else 
	endif 
	return 
endf 

def node_147
	>> node_126 
	if self.distance_2d_to_target().leq(300) 
		random (65) >> node_049 
		elser (0) >> node_134 
		elser (0) >> node_051 
		elser (35) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(900) 
		random (65) >> node_049 
		elser (0) >> node_134 
		elser (0) >> node_051 
		elser (35) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (100) >> node_049 
		elser (0) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	else 
	endif 
	return 
endf 

def node_148
	>> node_126 
	if self.distance_2d_to_target().leq(300) 
		random (50) >> node_049 
		elser (50) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(900) 
		random (50) >> node_049 
		elser (50) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (100) >> node_049 
		elser (0) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	else 
	endif 
	return 
endf 

def node_149
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			>> node_169 
		elif function#101(1) 
			>> node_164 
		else 
			>> node_161 
		endif 
	else 
		if function#101(2) 
			>> node_158 
		elif function#101(1) 
			>> node_155 
		else 
			>> node_152 
		endif 
	endif 
	return 
endf 

def node_150
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			>> node_170 
		elif function#101(1) 
			>> node_165 
		else 
			>> node_162 
		endif 
	else 
		if function#101(2) 
			>> node_159 
		elif function#101(1) 
			>> node_156 
		else 
			>> node_153 
		endif 
	endif 
	return 
endf 

def node_151
	if self.distance_2d_to_target().leq(1600) 
	else 
		>> node_233 
	endif 
	if self.distance_2d_to_target().leq(300) 
		random (20) >> node_049 
		elser (80) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(700) 
		random (20) >> node_049 
		elser (80) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (20) >> node_049 
		elser (0) >> node_134 
		elser (80) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		>> node_049 
	else 
		>> node_050 
	endif 
	return 
endf 

def node_152
	if self.distance_2d_to_target().leq(200) 
		random (0) >> node_049 
		elser (40) >> node_058 
		elser (60) >> node_065 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(600) 
		random (0) >> node_049 
		elser (20) >> node_058 
		elser (80) >> node_065 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(900) 
		random (0) >> node_049 
		elser (20) >> node_058 
		elser (50) >> node_065 
		elser (30) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (50) >> node_049 
		elser (25) >> node_058 
		elser (25) >> node_065 
		elser (0) >> node_080 
		endr 
	else 
		random (0) >> node_049 
		elser (0) >> node_058 
		elser (0) >> node_065 
		elser (100) >> node_080 
		endr 
	endif 
	return 
endf 

def node_153
	if self.distance_2d_to_target().leq(300) 
		random (0) >> node_065 
		elser (0) >> node_057 
		elser (0) >> node_058 
		elser (65) >> node_080 
		elser (0) >> node_084 
		elser (35) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(700) 
		random (0) >> node_065 
		elser (0) >> node_057 
		elser (0) >> node_058 
		elser (60) >> node_080 
		elser (0) >> node_084 
		elser (40) >> node_085 
		endr 
	else 
		random (0) >> node_065 
		elser (0) >> node_057 
		elser (0) >> node_058 
		elser (100) >> node_080 
		elser (0) >> node_084 
		endr 
	endif 
	return 
endf 

def node_154
	if self.distance_2d_to_target().leq(1600) 
	else 
		>> node_233 
	endif 
	if self.distance_2d_to_target().leq(300) 
		random (20) >> node_049 
		elser (80) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(700) 
		random (20) >> node_049 
		elser (80) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (20) >> node_049 
		elser (0) >> node_134 
		elser (80) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		>> node_049 
	else 
		>> node_050 
	endif 
	return 
endf 

def node_155
	if self.distance_2d_to_target().leq(200) 
		random (0) >> node_049 
		elser (40) >> node_058 
		elser (60) >> node_065 
		elser (0) >> node_066 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(600) 
		random (0) >> node_049 
		elser (20) >> node_058 
		elser (80) >> node_065 
		elser (0) >> node_066 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(900) 
		random (0) >> node_049 
		elser (20) >> node_058 
		elser (50) >> node_065 
		elser (0) >> node_066 
		elser (30) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (50) >> node_049 
		elser (25) >> node_058 
		elser (25) >> node_065 
		elser (0) >> node_066 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (50) >> node_049 
		elser (0) >> node_058 
		elser (0) >> node_065 
		elser (50) >> node_066 
		elser (0) >> node_080 
		endr 
	else 
		random (0) >> node_049 
		elser (0) >> node_058 
		elser (0) >> node_065 
		elser (0) >> node_066 
		elser (100) >> node_080 
		endr 
	endif 
	return 
endf 

def node_156
	if self.distance_2d_to_target().leq(350) 
		random (10) >> node_080 
		elser (10) >> node_084 
		elser (40) >> node_069 
		elser (40) >> node_068 
		elser (0) >> node_066 
		elser (0) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(750) 
		random (10) >> node_080 
		elser (10) >> node_084 
		elser (25) >> node_069 
		elser (25) >> node_068 
		elser (0) >> node_066 
		elser (30) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (20) >> node_080 
		elser (10) >> node_084 
		elser (0) >> node_069 
		elser (60) >> node_068 
		elser (10) >> node_066 
		elser (0) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(1700) 
		random (15) >> node_080 
		elser (10) >> node_084 
		elser (0) >> node_069 
		elser (10) >> node_068 
		elser (65) >> node_066 
		elser (0) >> node_085 
		endr 
	else 
		random (80) >> node_080 
		elser (20) >> node_084 
		elser (0) >> node_069 
		elser (0) >> node_068 
		elser (0) >> node_066 
		elser (0) >> node_085 
		endr 
	endif 
	return 
endf 

def node_157
	if self.distance_2d_to_target().leq(1600) 
	else 
		>> node_233 
	endif 
	if self.distance_2d_to_target().leq(300) 
		random (20) >> node_049 
		elser (80) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(700) 
		random (20) >> node_049 
		elser (80) >> node_134 
		elser (0) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (20) >> node_049 
		elser (0) >> node_134 
		elser (80) >> node_051 
		elser (0) >> node_054 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		>> node_049 
	else 
		>> node_050 
	endif 
	return 
endf 

def node_158
	if self.distance_2d_to_target().leq(200) 
		random (0) >> node_049 
		elser (40) >> node_058 
		elser (60) >> node_065 
		elser (0) >> node_066 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(600) 
		random (0) >> node_049 
		elser (20) >> node_058 
		elser (80) >> node_065 
		elser (0) >> node_066 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(900) 
		random (0) >> node_049 
		elser (20) >> node_058 
		elser (50) >> node_065 
		elser (0) >> node_066 
		elser (30) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (50) >> node_049 
		elser (25) >> node_058 
		elser (25) >> node_065 
		elser (0) >> node_066 
		elser (0) >> node_080 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (50) >> node_049 
		elser (0) >> node_058 
		elser (0) >> node_065 
		elser (50) >> node_066 
		elser (0) >> node_080 
		endr 
	else 
		random (0) >> node_049 
		elser (0) >> node_058 
		elser (0) >> node_065 
		elser (0) >> node_066 
		elser (100) >> node_080 
		endr 
	endif 
	return 
endf 

def node_159
	if self.distance_2d_to_target().leq(300) 
		random (10) >> node_080 
		elser (10) >> node_084 
		elser (40) >> node_069 
		elser (40) >> node_068 
		elser (0) >> node_066 
		elser (0) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (10) >> node_080 
		elser (10) >> node_084 
		elser (25) >> node_069 
		elser (25) >> node_068 
		elser (0) >> node_066 
		elser (30) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (15) >> node_080 
		elser (10) >> node_084 
		elser (35) >> node_069 
		elser (30) >> node_068 
		elser (10) >> node_066 
		elser (0) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(2300) 
		random (20) >> node_080 
		elser (10) >> node_084 
		elser (0) >> node_069 
		elser (20) >> node_068 
		elser (50) >> node_066 
		elser (0) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(2800) 
		random (50) >> node_080 
		elser (20) >> node_084 
		elser (0) >> node_069 
		elser (30) >> node_068 
		elser (0) >> node_066 
		elser (0) >> node_085 
		endr 
	else 
		random (80) >> node_080 
		elser (20) >> node_084 
		elser (0) >> node_069 
		elser (0) >> node_068 
		elser (0) >> node_066 
		elser (0) >> node_085 
		endr 
	endif 
	return 
endf 

def node_160
	if self.distance_2d_to_target().leq(1600) 
	else 
		>> node_233 
	endif 
	if self.enraged() 
		if self.distance_2d_to_target().leq(1000) 
			random (0) >> node_049 
			elser (100) >> node_016 
			elser (0) >> node_051 
			elser (0) >> node_024 
			endr 
		else 
			random (100) >> node_049 
			elser (0) >> node_016 
			elser (0) >> node_051 
			elser (0) >> node_024 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(1000) 
			random (30) >> node_049 
			elser (70) >> node_016 
			elser (0) >> node_051 
			elser (0) >> node_024 
			endr 
		else 
			random (100) >> node_049 
			elser (0) >> node_016 
			elser (0) >> node_051 
			elser (0) >> node_024 
			endr 
		endif 
	endif 
	return 
endf 

def node_161
	if self.distance_2d_to_target().leq(200) 
		random (0) >> node_065 
		elser (35) >> node_058 
		elser (35) >> node_033 
		elser (30) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (40) >> node_065 
		elser (20) >> node_058 
		elser (20) >> node_033 
		elser (20) >> node_085 
		endr 
	else 
		random (35) >> node_065 
		elser (0) >> node_058 
		elser (65) >> node_033 
		elser (0) >> node_085 
		endr 
	endif 
	return 
endf 

def node_162
	if self.distance_2d_to_target().leq(200) 
		random (0) >> node_065 
		elser (35) >> node_058 
		elser (35) >> node_033 
		elser (30) >> node_085 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (40) >> node_065 
		elser (20) >> node_058 
		elser (20) >> node_033 
		elser (20) >> node_085 
		endr 
	else 
		random (35) >> node_065 
		elser (0) >> node_058 
		elser (65) >> node_033 
		elser (0) >> node_085 
		endr 
	endif 
	return 
endf 

def node_163
	if function#7F(-999) 
	else 
		if self.distance_2d_to_target().leq(1600) 
		else 
			>> node_233 
		endif 
		if self.enraged() 
			if self.distance_2d_to_target().leq(1000) 
				random (0) >> node_049 
				elser (100) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			else 
				random (100) >> node_049 
				elser (0) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(1000) 
				random (30) >> node_049 
				elser (70) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			else 
				random (100) >> node_049 
				elser (0) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

def node_164
	if self.distance_2d_to_target().leq(200) 
	elif self.distance_2d_to_target().leq(800) 
		random (0) >> node_033 
		elser (0) >> node_030 
		elser (0) >> node_007 
		elser (0) >> node_031 
		elser (0) >> node_066 
		elser (100) >> node_065 
		elser (0) >> node_039 
		elser (0) >> node_038 
		elser (0) >> node_037 
		elser (0) >> node_025 
		elser (0) 
		endr 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	elif self.distance_2d_to_target().leq(1500) 
	elif self.distance_2d_to_target().leq(2200) 
		random (0) >> node_033 
		elser (0) >> node_030 
		elser (0) >> node_007 
		elser (0) >> node_031 
		elser (100) >> node_066 
		elser (0) >> node_065 
		elser (0) >> node_039 
		elser (0) >> node_038 
		elser (0) >> node_037 
		elser (0) >> node_025 
		elser (0) 
		endr 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	else 
	endif 
	return 
endf 

def node_165
	if self.enraged() 
		>> node_167 
	else 
		>> node_166 
	endif 
	return 
endf 

def node_166
	if self.distance_2d_to_target().leq(200) 
		random (10) >> node_033 
		elser (10) >> node_034 
		elser (20) >> node_030 
		elser (20) >> node_007 
		elser (10) >> node_031 
		elser (0) >> node_032 
		elser (30) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (10) >> node_033 
		elser (10) >> node_034 
		elser (15) >> node_030 
		elser (15) >> node_007 
		elser (10) >> node_031 
		elser (0) >> node_032 
		elser (40) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (10) >> node_033 
		elser (10) >> node_034 
		elser (15) >> node_030 
		elser (15) >> node_007 
		elser (10) >> node_031 
		elser (0) >> node_032 
		elser (40) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (15) >> node_033 
		elser (15) >> node_034 
		elser (0) >> node_030 
		elser (30) >> node_007 
		elser (0) >> node_031 
		elser (0) >> node_032 
		elser (40) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(2200) 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (0) >> node_030 
		elser (20) >> node_007 
		elser (0) >> node_031 
		elser (50) >> node_032 
		elser (0) >> node_036 
		endr 
	else 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (0) >> node_030 
		elser (20) >> node_007 
		elser (0) >> node_031 
		elser (20) >> node_032 
		elser (30) >> node_036 
		endr 
	endif 
	return 
endf 

def node_167
	if self.distance_2d_to_target().leq(200) 
		random (10) >> node_033 
		elser (10) >> node_034 
		elser (20) >> node_030 
		elser (20) >> node_007 
		elser (10) >> node_031 
		elser (0) >> node_032 
		elser (0) >> node_039 
		elser (30) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (10) >> node_033 
		elser (10) >> node_034 
		elser (15) >> node_030 
		elser (15) >> node_007 
		elser (10) >> node_031 
		elser (0) >> node_032 
		elser (20) >> node_039 
		elser (20) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (10) >> node_033 
		elser (10) >> node_034 
		elser (15) >> node_030 
		elser (15) >> node_007 
		elser (10) >> node_031 
		elser (0) >> node_032 
		elser (0) >> node_039 
		elser (40) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (20) >> node_033 
		elser (20) >> node_034 
		elser (0) >> node_030 
		elser (20) >> node_007 
		elser (0) >> node_031 
		elser (0) >> node_032 
		elser (20) >> node_039 
		elser (20) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(2200) 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (0) >> node_030 
		elser (20) >> node_007 
		elser (0) >> node_031 
		elser (50) >> node_032 
		elser (0) >> node_039 
		elser (0) >> node_036 
		endr 
	else 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (0) >> node_030 
		elser (20) >> node_007 
		elser (0) >> node_031 
		elser (20) >> node_032 
		elser (15) >> node_039 
		elser (15) >> node_036 
		endr 
	endif 
	return 
endf 

def node_168
	if function#7F(-999) 
	else 
		if self.distance_2d_to_target().leq(1600) 
		else 
			>> node_233 
		endif 
		if self.enraged() 
			if self.distance_2d_to_target().leq(1000) 
				random (0) >> node_049 
				elser (100) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			else 
				random (0) >> node_049 
				elser (100) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(1000) 
				random (0) >> node_049 
				elser (100) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			else 
				random (0) >> node_049 
				elser (100) >> node_016 
				elser (0) >> node_051 
				elser (0) >> node_024 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

def node_169
	if self.distance_2d_to_target().leq(200) 
	elif self.distance_2d_to_target().leq(800) 
		random (0) >> node_033 
		elser (0) >> node_030 
		elser (0) >> node_007 
		elser (0) >> node_031 
		elser (0) >> node_066 
		elser (100) >> node_065 
		elser (0) >> node_039 
		elser (0) >> node_036 
		elser (0) 
		endr 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	elif self.distance_2d_to_target().leq(1500) 
	elif self.distance_2d_to_target().leq(2200) 
		random (0) >> node_033 
		elser (0) >> node_030 
		elser (0) >> node_007 
		elser (0) >> node_031 
		elser (100) >> node_066 
		elser (0) >> node_065 
		elser (0) >> node_039 
		elser (0) >> node_036 
		elser (0) >> node_025 
		elser (0) 
		endr 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	else 
	endif 
	return 
endf 

def node_170
	if self.enraged() 
		>> node_172 
	else 
		>> node_171 
	endif 
	return 
endf 

def node_171
	if self.distance_2d_to_target().leq(200) 
		random (5) >> node_033 
		elser (10) >> node_031 
		elser (10) >> node_030 
		elser (0) >> node_032 
		elser (25) >> node_036 
		elser (50) >> node_002 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (5) >> node_033 
		elser (10) >> node_031 
		elser (10) >> node_030 
		elser (0) >> node_032 
		elser (25) >> node_036 
		elser (50) >> node_002 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (5) >> node_033 
		elser (10) >> node_031 
		elser (10) >> node_030 
		elser (0) >> node_032 
		elser (25) >> node_036 
		elser (50) >> node_002 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (5) >> node_033 
		elser (0) >> node_031 
		elser (10) >> node_030 
		elser (0) >> node_032 
		elser (25) >> node_036 
		elser (60) >> node_002 
		endr 
	elif self.distance_2d_to_target().leq(2200) 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (20) >> node_007 
		elser (50) >> node_032 
		elser (0) >> node_036 
		elser (0) >> node_004 
		elser (0) >> node_025 
		endr 
	else 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (20) >> node_007 
		elser (20) >> node_032 
		elser (30) >> node_036 
		endr 
	endif 
	return 
endf 

def node_172
	if self.distance_2d_to_target().leq(200) 
		random (10) >> node_033 
		elser (0) >> node_031 
		elser (0) >> node_030 
		elser (0) >> node_032 
		elser (30) >> node_036 
		elser (0) >> node_039 
		elser (15) >> node_004 
		elser (45) >> node_003 
		elser (0) 
		endr 
	elif self.distance_2d_to_target().leq(800) 
		random (10) >> node_033 
		elser (0) >> node_031 
		elser (0) >> node_030 
		elser (0) >> node_032 
		elser (15) >> node_036 
		elser (15) >> node_039 
		elser (15) >> node_004 
		elser (45) >> node_003 
		elser (0) 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (10) >> node_033 
		elser (0) >> node_031 
		elser (0) >> node_030 
		elser (0) >> node_032 
		elser (30) >> node_036 
		elser (0) >> node_039 
		elser (15) >> node_004 
		elser (45) >> node_003 
		elser (0) 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (10) >> node_033 
		elser (0) >> node_031 
		elser (0) >> node_030 
		elser (0) >> node_032 
		elser (15) >> node_036 
		elser (15) >> node_039 
		elser (15) >> node_004 
		elser (45) >> node_003 
		elser (0) 
		endr 
	elif self.distance_2d_to_target().leq(2200) 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (20) >> node_007 
		elser (50) >> node_032 
		elser (0) >> node_036 
		elser (0) >> node_039 
		elser (0) >> node_004 
		elser (0) >> node_003 
		elser (0) >> node_008 
		elser (0) >> node_025 
		endr 
	else 
		random (10) >> node_033 
		elser (20) >> node_034 
		elser (20) >> node_007 
		elser (20) >> node_032 
		elser (15) >> node_036 
		elser (15) >> node_039 
		endr 
	endif 
	return 
endf 

def node_173
	>> node_144 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_149 
	return 
endf 

def node_174
	>> node_144 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_150 
	return 
endf 

def node_175
	>> node_149 
	if self.current_quest().is_rank(rank.AT) 
	else 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	endif 
	>> node_150 
	return 
endf 

def node_176
	>> node_145 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_149 
	return 
endf 

def node_177
	>> node_145 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_150 
	return 
endf 

def node_178
	>> node_144 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_149 
	if self.current_quest().is_rank(rank.AT) 
	else 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	endif 
	>> node_150 
	return 
endf 

def node_179
	>> node_145 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_149 
	if self.current_quest().is_rank(rank.AT) 
	else 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	endif 
	>> node_150 
	return 
endf 

def node_180
	>> node_144 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_149 
	if self.current_quest().is_rank(rank.AT) 
	else 
		[RegisterVar7 |-] 
		>> node_405 
		>> node_126 
	endif 
	>> node_150 
	[RegisterVar7 |-] 
	>> node_405 
	>> node_126 
	>> node_150 
	return 
endf 

def node_181
	if self.in_combat() 
		>> node_183 
	elif self.alert_out_of_combat() 
		>> node_182 
	else 
		>> node_182 
	endif 
	return 
endf 

def node_182
	if function#102() 
		if function#103() 
			>> node_047 
			-> velkhana.search_fly() 
			function#103() 
			>> node_321 
			-> velkhana.threat_short_fly() 
			if function#103() 
				if self.distance_2d_to_target().leq(1000) 
					-> velkhana.step_back_fly() 
				else 
					>> node_249 
				endif 
			else 
			endif 
			if function#103() 
				>> node_184 
				-> velkhana.freeze_yokuryu_zako_breath() 
			else 
			endif 
			reset 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_183
	if function#104() 
		if function#102(1) 
			if function#103(1) 
				>> node_046 
				-> velkhana.anger_search() 
				function#103(1) 
				>> node_321 
				-> velkhana.threat_short() 
				if function#103(1) 
					if self.distance_2d_to_target().leq(800) 
						-> velkhana.back_turn() 
					else 
						>> node_236 
					endif 
				else 
				endif 
				if function#103(1) 
					-> velkhana.freeze_combat_zako_breath() 
				else 
				endif 
				reset 
			else 
			endif 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_184
	if function#103() 
		if function#11(500) 
		else 
			if self.above_area() 
				-> velkhana.short_up_step_fly() 
			else 
				-> velkhana.short_down_step_fly() 
			endif 
		endif 
	else 
	endif 
	if function#103() 
		if function#11(500) 
		else 
			if self.above_area() 
				-> velkhana.short_up_step_fly() 
			else 
				-> velkhana.short_down_step_fly() 
			endif 
		endif 
	else 
	endif 
	if function#103() 
		if function#11(500) 
		else 
			if self.above_area() 
				-> velkhana.short_up_step_fly() 
			else 
				-> velkhana.short_down_step_fly() 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_185
	if self.quest_id(1404) 
		>> node_046 
		if function#101() 
			>> node_279 
		else 
		endif 
		>> node_224 
		>> node_225 
		>> node_223 
	else 
	endif 
	return 
endf 

def node_186
	if self.quest_id(1404) 
		>> node_187 
		>> node_192 
	else 
	endif 
	return 
endf 

def node_187
	if function#105() 
		>> node_188 
	elif function#105(0,1) 
		>> node_189 
	elif function#105(0,2) 
		>> node_190 
	elif function#105(0,3) 
	else 
	endif 
	return 
endf 

def node_188
	if function#107(0,8) 
	elif function#107(0,7) 
		if [RegisterVar5 <= 1] 
			[RegisterVar5 |-] 
			function#108(0,8) 
		else 
		endif 
	elif function#109(0,2) 
		function#108(0,7) 
	elif function#109(0,3) 
		function#106(0,1) 
	elif function#107(0,2) 
		if function#109(0,1) 
			function#108(0,3) 
		else 
		endif 
	elif function#107(0,3) 
		if [RegisterVar5 <= 1] 
			[RegisterVar5 |-] 
			function#108(0,4) 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_189
	if function#107() 
		if function#109(0,5) 
			function#10B() 
			function#108(0,1) 
		else 
		endif 
	elif function#107(0,1) 
		if [RegisterVar5 <= 1] 
			[RegisterVar5 |-] 
			function#108(0,2) 
		else 
		endif 
	elif function#107(0,2) 
		if function#109(0,6) 
			function#108(0,3) 
		else 
		endif 
	elif function#107(0,6) 
		if function#109(0,2) 
			function#108(0,7) 
		elif function#109(0,8) 
			function#108(0,7) 
		elif function#109(0,7) 
			function#108(0,7) 
		else 
		endif 
	elif function#107(0,7) 
		if [RegisterVar5 <= 1] 
			[RegisterVar5 |-] 
		else 
		endif 
		if function#109(0,9) 
			function#108(0,8) 
		endif 
	else 
	endif 
	return 
endf 

def node_190
	if function#107() 
		if function#109(0,8) 
			self.targetEnemy(73) 
			if function#109(0,12) 
				function#108(0,1) 
			elif self.vertical_distance_to_target().leq(300) 
				if self.distance_3d_to_target().leq(2500) 
					function#108(0,1) 
				else 
				endif 
			elif self.distance_3d_to_target().leq(1500) 
				function#108(0,1) 
			else 
			endif 
		else 
		endif 
	elif function#107(0,1) 
		if [RegisterVar5 <= 1] 
			[RegisterVar5 |-] 
			function#108(0,2) 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_191
endf 

def node_192
	if function#105() 
		>> node_193 
	elif function#105(0,1) 
		>> node_198 
	elif function#105(0,2) 
		>> node_205 
	elif function#105(0,3) 
		>> node_209 
	else 
	endif 
	return 
endf 

def node_193
	if function#107() 
	elif function#107(0,1) 
	elif function#107(0,2) 
		>> node_211 
	elif function#107(0,3) 
		>> node_211 
		>> node_194 
	elif function#107(0,4) 
		>> node_211 
		>> node_212 
	elif function#107(0,5) 
	elif function#107(0,6) 
		>> node_211 
	elif function#107(0,7) 
		>> node_196 
	elif function#107(0,8) 
		>> node_197 
	else 
	endif 
	return 
endf 

def node_194
	self.targetEnemy(72) 
	[RegisterVar5 |-] 
	if self.distance_3d_to_target().leq(1600) 
		>> node_212 
		[RegisterVar5 ++] 
	else 
		return 
	endif 
	reset 
endf 

def node_195
	>> node_212 
	reset 
endf 

def node_196
	self.targetEnemy(72) 
	if self.distance_3d_to_target().leq(600) 
	else 
		>> node_046 
		-> velkhana.dash(1,2,0,500,2000) 
		repeat 
	endif 
	>> node_319 
	[RegisterVar5 |-] 
	[RegisterVar5 ++] 
	reset 
endf 

def node_197
	function#10A() 
	>> node_221 
	if self.flying() 
	else 
		-> velkhana.take_off(7,0,0,1000) 
	endif 
	-> velkhana.quick_turn_fly() 
	-> velkhana.event_fence_break_quest_fail() 
	-> velkhana.landing() 
	reset 
endf 

def node_198
	if function#107() 
		>> node_211 
	elif function#107(0,1) 
		>> node_199 
	elif function#107(0,2) 
		>> node_200 
	elif function#107(0,3) 
		>> node_201 
	elif function#107(0,4) 
	elif function#107(0,5) 
	elif function#107(0,6) 
		>> node_211 
		>> node_202 
	elif function#107(0,7) 
		>> node_203 
	elif function#107(0,8) 
		>> node_204 
	else 
	endif 
	return 
endf 

def node_199
	self.targetEnemy(72) 
	if self.distance_3d_to_target().leq(600) 
	else 
		>> node_046 
		-> velkhana.dash(1,2,0,500,2000) 
		repeat 
	endif 
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_319 
	[RegisterVar5 |-] 
	[RegisterVar5 ++] 
	reset 
endf 

def node_200
	>> node_212 
	reset 
endf 

def node_201
	-> velkhana.damage_low() 
	reset 
endf 

def node_202
	self.targetEnemy(48) 
	if function#109(0,11) 
		>> node_215 
	else 
		return 
	endif 
	reset 
endf 

def node_203
	self.targetEnemy(72) 
	if self.distance_3d_to_target().leq(600) 
	else 
		>> node_046 
		-> velkhana.dash(1,2,0,500,2000) 
		repeat 
	endif 
	if function#10A() 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	>> node_219 
	[RegisterVar5 |-] 
	[RegisterVar5 ++] 
	reset 
endf 

def node_204
	if function#109(0,10) 
		function#10B(0,1) 
		-> velkhana.threat_short() 
	else 
		function#10A() 
		>> node_221 
		if self.flying() 
		else 
			-> velkhana.take_off(7,0,0,1000) 
		endif 
		-> velkhana.quick_turn_fly() 
		-> velkhana.event_fence_break() 
		-> velkhana.landing() 
	endif 
	>> node_222 
	reset 
endf 

def node_205
	if function#107() 
		>> node_206 
	elif function#107(0,1) 
		>> node_207 
	elif function#107(0,2) 
		>> node_208 
	elif function#107(0,3) 
	else 
	endif 
	return 
endf 

def node_206
	self.targetEnemy(50) 
	if self.target(54) 
		>> node_214 
	else 
		return 
	endif 
	reset 
endf 

def node_207
	self.targetEnemy(73) 
	if self.distance_3d_to_target().leq(600) 
	else 
		>> node_046 
		-> velkhana.dash(1,2,0,500,2000) 
		repeat 
	endif 
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_319 
	[RegisterVar5 |-] 
	[RegisterVar5 ++] 
	reset 
endf 

def node_208
	function#10B() 
	>> node_216 
	reset 
endf 

def node_209
	if function#107() 
		>> node_210 
	else 
	endif 
	return 
endf 

def node_210
	self.targetEnemy(48) 
	if function#109(0,8) 
		>> node_213 
	elif self.target(54) 
		>> node_213 
	else 
		return 
	endif 
	reset 
endf 

def node_211
	self.targetEnemy(50) 
	if self.target(4) 
		>> node_215 
		reset 
	elif self.distance_2d_to_target().leq(1500) 
	elif self.distance_2d_to_target().leq(2000) 
		random (75) 
		elser (25) 
					>> node_215 
					reset 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		random (60) 
		elser (40) 
					>> node_215 
					reset 
		endr 
	elif self.distance_2d_to_target().leq(3000) 
		random (40) 
		elser (60) 
					>> node_215 
					reset 
		endr 
	else 
		random (25) 
		elser (75) 
					>> node_215 
					reset 
		endr 
	endif 
	return 
endf 

def node_212
	>> node_046 
	self.targetEnemy(72) 
	if self.vertical_distance_to_target().leq(400) 
		if self.distance_2d_to_target().leq(650) 
		else 
			>> node_233 
		endif 
	else 
		>> node_233 
	endif 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#101() 
		>> node_279 
	else 
	endif 
	>> node_217 
	return 
endf 

def node_213
	>> node_046 
	self.targetEnemy(73) 
	if self.vertical_distance_to_target().leq(400) 
		if self.distance_2d_to_target().leq(650) 
		else 
			>> node_233 
		endif 
	else 
		>> node_233 
	endif 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#101() 
		>> node_279 
	else 
	endif 
	if self.target(4) 
		>> node_267 
	else 
		>> node_217 
	endif 
	return 
endf 

def node_214
	>> node_046 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#101() 
		>> node_279 
	else 
	endif 
	if self.target(4) 
		>> node_267 
	else 
		>> node_217 
	endif 
	return 
endf 

def node_215
	>> node_046 
	if function#10A() 
	else 
		self.targetEnemy(72) 
	endif 
	if self.vertical_distance_to_target().leq(400) 
		if self.distance_2d_to_target().leq(1500) 
		else 
			>> node_220 
		endif 
	else 
		>> node_220 
	endif 
	if function#10A() 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	if function#101() 
		>> node_279 
	else 
	endif 
	>> node_219 
	return 
endf 

def node_216
	>> node_046 
	self.targetEnemy(73) 
	if self.vertical_distance_to_target().leq(400) 
		if self.distance_2d_to_target().leq(650) 
		else 
			>> node_233 
		endif 
	else 
		>> node_233 
	endif 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#101() 
		>> node_279 
	else 
	endif 
	if self.target(4) 
		>> node_267 
	else 
		>> node_070 
	endif 
	return 
endf 

def node_217
	if self.distance_2d_to_target().leq(600) 
		random (35) >> node_059 
		elser (25) >> node_071 
		elser (20) >> node_069 
		elser (10) >> node_070 
		elser (10) >> node_278 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (25) >> node_066 
		elser (30) >> node_071 
		elser (25) >> node_069 
		elser (10) >> node_070 
		elser (10) >> node_278 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (40) >> node_066 
		elser (40) >> node_071 
		elser (10) >> node_070 
		elser (10) >> node_278 
		endr 
	else 
		random (30) >> node_070 
		elser (30) >> node_071 
		elser (10) >> node_081 
		elser (30) >> node_278 
		endr 
	endif 
	return 
endf 

def node_218
	if function#101(2) 
		if self.distance_2d_to_target().leq(600) 
			random (25) >> node_065 
			elser (25) >> node_057 
			elser (25) >> node_069 
			elser (25) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(900) 
			random (25) >> node_058 
			elser (25) >> node_057 
			elser (25) >> node_069 
			elser (25) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (25) >> node_066 
			elser (25) >> node_071 
			elser (25) >> node_069 
			elser (25) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1500) 
			random (35) >> node_066 
			elser (30) >> node_071 
			elser (35) >> node_068 
			endr 
		else 
			random (35) >> node_070 
			elser (30) >> node_071 
			elser (35) >> node_068 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			random (25) >> node_065 
			elser (25) >> node_057 
			elser (25) >> node_069 
			elser (25) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(750) 
			random (25) >> node_058 
			elser (25) >> node_057 
			elser (25) >> node_069 
			elser (25) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1400) 
			random (35) >> node_066 
			elser (30) >> node_071 
			elser (35) >> node_068 
			endr 
		else 
			random (35) >> node_070 
			elser (35) >> node_071 
			elser (30) >> node_278 
			endr 
		endif 
	endif 
	return 
endf 

def node_219
	if function#101(2) 
		if self.distance_2d_to_target().leq(600) 
			random (40) >> node_056 
			elser (40) >> node_057 
			elser (0) >> node_069 
			elser (20) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(900) 
			random (40) >> node_058 
			elser (40) >> node_057 
			elser (0) >> node_069 
			elser (20) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (35) >> node_066 
			elser (35) >> node_057 
			elser (0) >> node_071 
			elser (0) >> node_069 
			elser (30) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1500) 
			random (30) >> node_066 
			elser (40) >> node_071 
			elser (30) >> node_068 
			endr 
		else 
			random (50) >> node_071 
			elser (50) >> node_068 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().leq(600) 
			random (40) >> node_056 
			elser (40) >> node_057 
			elser (0) >> node_069 
			elser (20) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(900) 
			random (40) >> node_058 
			elser (40) >> node_057 
			elser (0) >> node_069 
			elser (20) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1200) 
			random (35) >> node_066 
			elser (35) >> node_057 
			elser (0) >> node_071 
			elser (30) >> node_068 
			endr 
		elif self.distance_2d_to_target().leq(1500) 
			random (30) >> node_066 
			elser (40) >> node_071 
			elser (30) >> node_068 
			endr 
		else 
			random (50) >> node_071 
			elser (50) >> node_278 
			endr 
		endif 
	endif 
	return 
endf 

def node_220
	>> node_046 
	if self.distance_3d_to_target().leq(1200) 
	else 
		-> velkhana.dash(1,2,0,1100,1500) 
	endif 
	if self.distance_3d_to_target().leq(1200) 
	else 
		-> velkhana.dash(1,2,0,1100,1500) 
	endif 
	if self.distance_3d_to_target().leq(1200) 
	else 
		-> velkhana.dash(1,2,0,1100,1500) 
	endif 
	if self.distance_3d_to_target().leq(1200) 
	else 
		-> velkhana.dash(1,2,0,1100,1500) 
	endif 
	if self.distance_3d_to_target().leq(1200) 
	else 
		-> velkhana.dash(1,2,0,1100,1500) 
	endif 
	return 
endf 

def node_221
	>> node_046 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	return 
endf 

def node_222
	self.targetEnemy(73) 
	>> node_046 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.dash(1,2,0,500,2000) 
		repeat 
	endif 
	return 
endf 

def node_223
	if function#105(3,1) 
		function#10A() 
		if self.distance_3d_to_target().leq(1500) 
		else 
			>> node_220 
		endif 
		>> node_219 
	else 
		>> node_267 
	endif 
	reset 
endf 

def node_224
	if function#105() 
		if function#107(0,7) 
			if [RegisterVar5 <= 1] 
				[RegisterVar5 |-] 
				function#108(0,8) 
			else 
			endif 
		elif function#109(0,2) 
			function#108(0,7) 
		else 
		endif 
		if function#107(0,7) 
			>> node_196 
		elif function#107(0,8) 
			>> node_197 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_225
	if function#105(0,1) 
		if function#107(0,6) 
			if function#109(0,2) 
				function#108(0,7) 
			elif function#109(0,8) 
				function#108(0,7) 
			elif function#109(0,7) 
				function#108(0,7) 
			else 
			endif 
		elif function#107(0,7) 
			if [RegisterVar5 <= 1] 
				[RegisterVar5 |-] 
			else 
			endif 
			if function#109(0,9) 
				function#108(0,8) 
			endif 
		else 
		endif 
		if function#107(0,7) 
			>> node_203 
		elif function#107(0,8) 
			>> node_204 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_226
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_227
	>> node_376 
	self.targetArea(target_area.nearest_entrance) 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_228
	>> node_376 
	self.targetArea(target_area.area_center) 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_229
	>> node_376 
	self.targetArea(39) 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.walk(1,2,5,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_230
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dying_walk(1,2,0,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_231
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
		repeat 
	endif 
	return 
endf 

def node_232
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_233
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_3d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_234
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_235
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	if self.distance_2d_to_target().leq(700) 
	else 
		-> velkhana.dash(1,2,0,600,1500) 
	endif 
	return 
endf 

def node_236
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(1600) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	return 
endf 

def node_237
	if self.distance_2d_to_target().leq(1500) 
	else 
		-> velkhana.dash(6,2,0,1400,1500) 
	endif 
	if self.distance_2d_to_target().leq(1500) 
	else 
		-> velkhana.dash(6,2,0,1400,1500) 
	endif 
	if self.distance_2d_to_target().leq(1500) 
	else 
		-> velkhana.dash(6,2,0,1400,1500) 
	endif 
	if self.distance_2d_to_target().leq(1500) 
	else 
		-> velkhana.dash(6,2,0,1400,1500) 
	endif 
	if self.distance_2d_to_target().leq(1500) 
	else 
		-> velkhana.dash(6,2,0,1400,1500) 
	endif 
	return 
endf 

def node_238
	if self.distance_2d_to_target().leq(1750) 
	else 
		-> velkhana.dash(6,2,0,1650,1500) 
	endif 
	if self.distance_2d_to_target().leq(1750) 
	else 
		-> velkhana.dash(6,2,0,1650,1500) 
	endif 
	if self.distance_2d_to_target().leq(1750) 
	else 
		-> velkhana.dash(6,2,0,1650,1500) 
	endif 
	if self.distance_2d_to_target().leq(1750) 
	else 
		-> velkhana.dash(6,2,0,1650,1500) 
	endif 
	if self.distance_2d_to_target().leq(1750) 
	else 
		-> velkhana.dash(6,2,0,1650,1500) 
	endif 
	return 
endf 

def node_239
	if self.distance_2d_to_target().leq(1900) 
	else 
		-> velkhana.dash(6,2,0,1800,1500) 
	endif 
	if self.distance_2d_to_target().leq(1900) 
	else 
		-> velkhana.dash(6,2,0,1800,1500) 
	endif 
	if self.distance_2d_to_target().leq(1900) 
	else 
		-> velkhana.dash(6,2,0,1800,1500) 
	endif 
	if self.distance_2d_to_target().leq(1900) 
	else 
		-> velkhana.dash(6,2,0,1800,1500) 
	endif 
	if self.distance_2d_to_target().leq(1900) 
	else 
		-> velkhana.dash(6,2,0,1800,1500) 
	endif 
	return 
endf 

def node_240
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.dying_walk_fly(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_241
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.dying_glide_direct_move(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_242
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.dying_glide_direct_move(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_243
	if self.distance_2d_to_target().leq(600) 
	else 
		-> velkhana.glide_combat(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_244
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_245
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_246
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_247
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_248
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,900) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,900) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,900) 
	endif 
	return 
endf 

def node_249
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,1900) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,1900) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,1900) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,1900) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,1900) 
	endif 
	return 
endf 

def node_250
	if self.distance_2d_to_target().leq(600) 
	else 
		-> velkhana.glide_combat(2,1,5,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_251
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,1,5,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_252
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_253
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_254
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_255
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,500) 
	endif 
	return 
endf 

def node_256
	if self.distance_2d_to_target().leq(600) 
	else 
		-> velkhana.glide_combat(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_257
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,1,0,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_258
	if self.distance_2d_to_target().leq(600) 
	else 
		-> velkhana.glide_combat(2,1,0,1500,500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
	else 
		-> velkhana.glide_combat(2,1,0,1500,500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
	else 
		-> velkhana.glide_combat(2,1,0,1500,500) 
	endif 
	return 
endf 

def node_259
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,700) 
	endif 
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> velkhana.glide_direct_move(2,1,0,1500,700) 
	endif 
	return 
endf 

def node_260
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(1000) 
	else 
		-> velkhana.glide_combat(2,0,0,1500) 
	endif 
	return 
endf 

def node_261
	>> node_046 
	-> velkhana.take_off_switch_pattern_by_dist() 
	>> node_254 
	return 
endf 

def node_262
	>> node_046 
	-> velkhana.sudden_rise() 
	return 
endf 

def node_263
	>> node_047 
	-> velkhana.sudden_drop() 
	return 
endf 

def node_264
	if self.current_quest().is_rank(rank.AT) 
		if function#101(4) 
			if self.flying() 
				-> velkhana.barrier_max_fly() 
			else 
				-> velkhana.barrier_max() 
			endif 
		else 
			if self.flying() 
				-> velkhana.discover_roar_fly() 
			else 
				-> velkhana.discover_roar() 
			endif 
		endif 
		if self.flying() 
		else 
		endif 
	else 
		if function#101(4) 
			if self.flying() 
				-> velkhana.discover_roar_fly_2() 
			else 
				-> velkhana.discover_roar_2() 
			endif 
		else 
			if self.flying() 
				-> velkhana.discover_roar_fly() 
			else 
				-> velkhana.discover_roar() 
			endif 
		endif 
	endif 
	return 
endf 

def node_265
	if self.flying() 
		-> velkhana.discover_fly() 
	else 
		-> velkhana.discover() 
	endif 
	return 
endf 

def node_266
	if self.flying() 
		-> velkhana.threat_short_fly() 
	else 
		-> velkhana.threat_short() 
	endif 
	return 
endf 

def node_267
	if self.flying() 
		-> velkhana.threat_short_fly() 
	else 
		-> velkhana.threat_short() 
	endif 
	return 
endf 

def node_268
	if function#AB() 
		function#AA() 
		>> node_267 
	else 
	endif 
	return 
endf 

def node_269
	if self.flying() 
		-> velkhana.search_fly() 
	else 
		-> velkhana.combat_search() 
	endif 
	return 
endf 

def node_270
	if self.flying() 
		-> velkhana.search_fly() 
	else 
		-> velkhana.combat_search() 
	endif 
	return 
endf 

def node_271
	if self.flying() 
		-> velkhana.search_fly() 
	else 
		-> velkhana.lost_search() 
	endif 
	return 
endf 

def node_272
	if self.flying() 
		-> velkhana.discover_fly() 
	else 
		-> velkhana.discover() 
	endif 
	return 
endf 

def node_273
	>> node_046 
	-> velkhana.tired() 
	return 
endf 

def node_274
	>> node_046 
	-> velkhana.refresh() 
	return 
endf 

def node_275
	>> node_046 
	if self.in_combat() 
		-> velkhana.lost_search() 
	else 
		-> velkhana.life_search() 
	endif 
	return 
endf 

def node_276
	>> node_046 
	-> velkhana.lost_search() 
	return 
endf 

def node_277
	if self.flying() 
		-> velkhana.chance_fly() 
	else 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_278
	if self.flying() 
		-> velkhana.chance_fly() 
	else 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_279
	if self.current_quest().is_rank(rank.AT) 
		>> node_280 
	else 
		if function#7D() 
			if self.flying() 
				-> velkhana.barrier_max_fly() 
			else 
				-> velkhana.barrier_max() 
			endif 
		elif function#101(4) 
			if self.flying() 
				-> velkhana.barrier_max_fly() 
			else 
				-> velkhana.barrier_max() 
			endif 
		else 
			if self.flying() 
				-> velkhana.barrier_up_fly() @ comboSetting:1 
				-> velkhana.threat_short_fly() 
			else 
				-> velkhana.barrier_up() @ comboSetting:1 
				-> velkhana.chance() 
			endif 
		endif 
	endif 
	return 
endf 

def node_280
	if function#7D() 
		if self.flying() 
			-> velkhana.barrier_max_fly() 
		else 
			-> velkhana.barrier_max() 
		endif 
	elif self.hp_percent().gt(40) 
		if self.flying() 
			-> velkhana.barrier_max_fly() 
		else 
			-> velkhana.barrier_max() 
		endif 
	elif function#101(4) 
		if self.flying() 
			-> velkhana.barrier_max_fly() 
		else 
			-> velkhana.barrier_max() 
		endif 
	else 
		if self.flying() 
			-> velkhana.barrier_up_fly() @ comboSetting:1 
			-> velkhana.threat_short_fly() 
		else 
			-> velkhana.barrier_up() @ comboSetting:1 
			-> velkhana.chance() 
		endif 
	endif 
	return 
endf 

def node_281
	self.targetArea(target_area.nearest_entrance) 
	>> node_282 
	return 
endf 

def node_282
	if function#5A(20) 
		>> node_283 
	elif function#5A(21) 
		>> node_283 
	elif function#5A(22) 
		>> node_283 
	elif function#5A(23) 
		>> node_283 
	elif function#5A(24) 
		>> node_283 
	elif function#5A(25) 
		>> node_283 
	elif function#5A(30) 
		>> node_284 
	elif function#5A(31) 
		>> node_284 
	elif function#5A(32) 
		>> node_284 
	elif function#5A(33) 
		>> node_284 
	elif function#5A(34) 
		>> node_284 
	elif function#5A(35) 
		>> node_284 
	else 
		>> node_285 
	endif 
	return 
endf 

def node_283
	if self.distance_3d_to_target().leq(20000) 
		>> node_046 
		>> node_286 
	else 
		>> node_285 
	endif 
	return 
endf 

def node_284
	if self.distance_3d_to_target().leq(20000) 
		>> node_047 
		>> node_286 
	else 
		>> node_285 
	endif 
	return 
endf 

def node_285
	if function#AD() 
		>> node_286 
	else 
		>> node_287 
	endif 
	return 
endf 

def node_286
	if function#5A(10) 
		>> node_047 
	elif function#5A(11) 
		>> node_047 
	elif function#5A(12) 
		>> node_047 
	elif function#5A(13) 
		>> node_047 
	elif function#5A(14) 
		>> node_047 
	elif function#5A(15) 
		>> node_047 
	elif function#5A(30) 
		>> node_047 
	elif function#5A(31) 
		>> node_047 
	elif function#5A(32) 
		>> node_047 
	elif function#5A(33) 
		>> node_047 
	elif function#5A(34) 
		>> node_047 
	elif function#5A(35) 
		>> node_047 
	else 
		>> node_046 
	endif 
	if self.flying() 
		>> node_246 
	else 
		>> node_227 
	endif 
	return 
endf 

def node_287
	>> node_288 
	>> node_289 
	>> node_290 
	>> node_291 
	return 
endf 

def node_288
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_247 
	else 
		self.targetArea(target_area.area_center) 
		>> node_228 
		self.targetArea(target_area.area_aerial_center) 
		>> node_261 
	endif 
	return 
endf 

def node_289
	self.targetArea(target_area.nearest_entrance) 
	if self.flying() 
		self.targetArea(40) 
		>> node_245 
	else 
		self.targetArea(39) 
		>> node_229 
	endif 
	return 
endf 

def node_290
	if function#5A(10) 
	elif function#5A(11) 
	elif function#5A(12) 
	elif function#5A(13) 
	elif function#5A(14) 
	elif function#5A(15) 
	elif function#5A(30) 
	elif function#5A(31) 
	elif function#5A(32) 
	elif function#5A(33) 
	elif function#5A(34) 
	elif function#5A(35) 
	else 
		if self.flying() 
			self.targetArea(target_area.area_center) 
			>> node_046 
		else 
		endif 
	endif 
	return 
endf 

def node_291
	self.targetArea(target_area.nearest_entrance) 
	if self.flying() 
		>> node_246 
	else 
		>> node_227 
	endif 
	return 
endf 

def node_292
	self.targetArea(14) 
	if function#AD() 
		>> node_293 
	else 
		>> node_294 
	endif 
	>> node_298 
	return 
endf 

def node_293
	if self.flying() 
		self.targetArea(40) 
		>> node_253 
	else 
		>> node_231 
	endif 
	return 
endf 

def node_294
	>> node_295 
	>> node_297 
	return 
endf 

def node_295
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_254 
	else 
		self.targetArea(target_area.area_aerial_center) 
		>> node_261 
	endif 
	return 
endf 

def node_296
	self.targetArea(target_area.area_center) 
	>> node_231 
	self.targetArea(target_area.area_aerial_center) 
	>> node_261 
	return 
endf 

def node_297
	self.targetArea(14) 
	if self.flying() 
		self.targetArea(40) 
		>> node_252 
	else 
		>> node_231 
	endif 
	return 
endf 

def node_298
	self.targetArea(14) 
	if self.flying() 
		if self.fatigued() 
			>> node_046 
		else 
			>> node_263 
			>> node_046 
		endif 
	else 
	endif 
	return 
endf 

def node_299
	self.targetArea(24) 
	if function#AD() 
		>> node_300 
	else 
		>> node_301 
	endif 
	return 
endf 

def node_300
	>> node_046 
	self.targetArea(24) 
	>> node_230 
	return 
endf 

def node_301
	>> node_302 
	>> node_303 
	>> node_304 
	>> node_305 
	return 
endf 

def node_302
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_242 
	else 
		self.targetArea(target_area.area_center) 
		>> node_230 
		self.targetArea(target_area.area_aerial_center) 
		>> node_047 
	endif 
	return 
endf 

def node_303
	self.targetArea(24) 
	if self.flying() 
		self.targetArea(40) 
		>> node_240 
	else 
		self.targetArea(39) 
		>> node_230 
	endif 
	return 
endf 

def node_304
	if self.flying() 
		self.targetArea(target_area.area_center) 
		>> node_046 
	else 
	endif 
	return 
endf 

def node_305
	if self.flying() 
	else 
		self.targetArea(24) 
		>> node_230 
	endif 
	return 
endf 

def node_306
	if function#AD() 
		>> node_307 
	else 
		>> node_308 
	endif 
	return 
endf 

def node_307
	if self.flying() 
		>> node_257 
	else 
		if self.in_combat() 
			>> node_231 
		else 
			>> node_226 
		endif 
	endif 
	return 
endf 

def node_308
	>> node_309 
	>> node_310 
	>> node_311 
	return 
endf 

def node_309
	if self.flying() 
		self.targetArea(target_area.area_aerial_center) 
		>> node_253 
	else 
		self.targetArea(target_area.area_center) 
		if self.in_combat() 
			>> node_231 
		else 
			>> node_226 
		endif 
		self.targetArea(target_area.area_aerial_center) 
		>> node_261 
	endif 
	return 
endf 

def node_310
	if self.flying() 
		self.targetArea(40) 
		>> node_252 
	else 
		self.targetArea(39) 
		if self.in_combat() 
			>> node_231 
		else 
			>> node_226 
		endif 
	endif 
	return 
endf 

def node_311
	if self.flying() 
		self.targetArea(target_area.area_center) 
		>> node_046 
	else 
	endif 
	return 
endf 

def node_312
	self.targetArea(target_area.area_center) 
	if self.flying() 
		if self.fatigued() 
			>> node_046 
		else 
			>> node_263 
		endif 
	else 
	endif 
	return 
endf 

def node_313
	if self.flying() 
		>> node_257 
	else 
		if self.in_combat() 
			>> node_231 
		else 
			>> node_226 
		endif 
	endif 
	return 
endf 

def node_314
	if self.flying() 
		-> velkhana.turn_fly() 
	else 
		-> velkhana.turn() 
	endif 
	return 
endf 

def node_315
	if self.angle_2d_cw_between(15,345) 
		>> node_314 
	else 
	endif 
	return 
endf 

def node_316
	if self.angle_2d_cw_between(30,330) 
		>> node_314 
	else 
	endif 
	return 
endf 

def node_317
	if self.angle_2d_cw_between(60,300) 
		>> node_314 
	else 
	endif 
	return 
endf 

def node_318
	if self.angle_2d_cw_between(90,270) 
		>> node_314 
	else 
	endif 
	return 
endf 

def node_319
	if self.flying() 
		-> velkhana.quick_turn_fly() 
	else 
		-> velkhana.quick_turn() 
	endif 
	return 
endf 

def node_320
	if self.angle_2d_cw_between(15,345) 
		>> node_319 
	else 
	endif 
	return 
endf 

def node_321
	if self.angle_2d_cw_between(30,330) 
		>> node_319 
	else 
	endif 
	return 
endf 

def node_322
	if self.angle_2d_cw_between(60,300) 
		>> node_319 
	else 
	endif 
	return 
endf 

def node_323
	if self.angle_2d_cw_between(90,270) 
		>> node_319 
	else 
	endif 
	return 
endf 

def node_324
	>> node_046 
	-> velkhana.lost_search() 
	return 
endf 

def node_325
	>> node_046 
	-> velkhana.lost_search() 
	return 
endf 

def node_326
	>> node_046 
	random (50) -> velkhana.combat_search() 
	elser (50) -> velkhana.lost_search() 
	endr 
	return 
endf 

def node_327
	>> node_046 
	random (50) -> velkhana.combat_search() 
	elser (50) -> velkhana.lost_search() 
	endr 
	return 
endf 

def node_328
	>> node_046 
	-> velkhana.dash(2,1,0,1000,750) 
	return 
endf 

def node_329
	>> node_046 
	-> velkhana.dash(2,1,0,2000,750) 
	return 
endf 

def node_330
	>> node_046 
	>> node_333 
	return 
endf 

def node_331
	>> node_046 
	if self.target(10) 
		-> velkhana.dash(2,0,0,1000) 
	else 
	endif 
	if self.enraged() 
		>> node_050 
	else 
		>> node_050 
	endif 
	return 
endf 

def node_332
	>> node_046 
	-> velkhana.tired() 
	return 
endf 

def node_333
	>> node_046 
	-> velkhana.lost_tail_swing() 
	return 
endf 

def node_334
	if self.distance_3d_to_target().leq(900) 
		>> node_364 
	elif self.distance_3d_to_target().leq(1350) 
		>> node_366 
	else 
	endif 
	return 
endf 

def node_335
	if self.distance_2d_to_target().leq(900) 
	else 
		-> velkhana.dash(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(900) 
	else 
		-> velkhana.dash(2,0,0,1500) 
	endif 
	if self.distance_2d_to_target().leq(900) 
	else 
		-> velkhana.dash(2,0,0,1500) 
	endif 
	return 
endf 

def node_336
	>> node_046 
	-> velkhana.lost_search() 
	return 
endf 

def node_337
	>> node_046 
	>> node_316 
	-> velkhana.life_search() 
	if self.in_map(st.Special_Arena).in_area(-1) 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
	else 
		random (50) 
					self.targetArea(22) @ parameter2:500 
					>> node_316 
					-> velkhana.life_search() 
		elser (50) 
		endr 
	endif 
	return 
endf 

def node_338
	>> node_046 
	self.targetArea(17) 
	>> node_316 
	-> velkhana.marking() 
	return 
endf 

def node_339
	>> node_046 
	self.targetArea(17) 
	random (75) >> node_337 
	elser (25) >> node_316 
				-> velkhana.rest() 
	endr 
	return 
endf 

def node_340
	>> node_046 
	self.targetArea(17) 
	>> node_316 
	-> velkhana.rest() 
	return 
endf 

def node_341
	>> node_046 
	>> node_315 
	-> velkhana.life_search() 
	return 
endf 

def node_342
	>> node_046 
	self.targetArea(17) 
	>> node_316 
	-> velkhana.sleep() 
	return 
endf 

def node_343
	>> node_047 
	>> node_316 
	-> velkhana.search_fly() 
	return 
endf 

def node_344
	>> node_047 
	>> node_316 
	-> velkhana.chance_fly() 
	return 
endf 

def node_345
	>> node_047 
	>> node_316 
	-> velkhana.search_fly() 
	return 
endf 

def node_346
	>> node_047 
	>> node_315 
	-> velkhana.search_fly() 
	return 
endf 

def node_347
	>> node_047 
	>> node_316 
	-> velkhana.search_fly() 
	return 
endf 

def node_348
	>> node_047 
	self.targetEnemy(17) 
	-> velkhana.sudden_drop() 
	return 
endf 

def node_349
	>> node_046 
	>> node_316 
	if function#C9() 
		-> velkhana.dying_sleep() 
	else 
		function#CA() 
	endif 
	return 
endf 

def node_350
	if self.distance_2d_to_target().leq(500) 
	else 
		-> velkhana.glide_direct_move(1,2,0,400,1500) 
		repeat 
	endif 
	return 
endf 

def node_351
	>> node_047 
	self.targetArea(22) @ parameter2:500 
	-> velkhana.quick_turn_fly() 
	return 
endf 

def node_352
	>> node_047 
	-> velkhana.ride_rage_head() 
	return 
endf 

def node_353
	>> node_047 
	-> velkhana.ride_rage_head_lv2() 
	return 
endf 

def node_354
	>> node_047 
	-> velkhana.ride_rage_body() 
	return 
endf 

def node_355
	>> node_047 
	-> velkhana.ride_rage_body_lv2() 
	return 
endf 

def node_356
	>> node_047 
	if self.distance_2d_to_target().leq(600) 
		>> node_384 
	else 
	endif 
	>> node_350 
	>> node_357 
	return 
endf 

def node_357
	if function#11(1000) 
	else 
		if self.above_area() 
			-> velkhana.short_up_step_fly() 
		else 
			-> velkhana.short_down_step_fly() 
		endif 
	endif 
	return 
endf 

def node_358
	>> node_047 
	-> velkhana.ride_rage_crash_head() 
	return 
endf 

def node_359
	>> node_047 
	-> velkhana.ride_rage_crash_head_lv2() 
	return 
endf 

def node_360
	>> node_047 
	-> velkhana.ride_rage_crash_body() 
	return 
endf 

def node_361
	>> node_047 
	-> velkhana.ride_rage_crash_body_lv2() 
	return 
endf 

def node_362
	>> node_047 
	-> velkhana.chance_fly() 
	return 
endf 

def node_363
	>> node_047 
	-> velkhana.ride_tired() 
	return 
endf 

def node_364
	>> node_046 
	-> velkhana.back_turn() 
	return 
endf 

def node_365
	if self.angle_2d_cw_between(15,345) 
		>> node_364 
	else 
	endif 
	return 
endf 

def node_366
	if self.angle_2d_cw_between(30,330) 
		>> node_364 
	else 
	endif 
	return 
endf 

def node_367
	if self.angle_2d_cw_between(45,315) 
		>> node_364 
	else 
	endif 
	return 
endf 

def node_368
	if self.angle_2d_cw_between(60,300) 
		>> node_364 
	else 
	endif 
	return 
endf 

def node_369
	if self.angle_2d_cw_between(90,270) 
		>> node_364 
	else 
	endif 
	return 
endf 

def node_370
	>> node_046 
	-> velkhana.quick_turn() 
	return 
endf 

def node_371
	if self.angle_2d_cw_between(15,345) 
		>> node_370 
	else 
	endif 
	return 
endf 

def node_372
	if self.angle_2d_cw_between(30,330) 
		>> node_370 
	else 
	endif 
	return 
endf 

def node_373
	if self.angle_2d_cw_between(45,315) 
		>> node_370 
	else 
	endif 
	return 
endf 

def node_374
	if self.angle_2d_cw_between(60,300) 
		>> node_370 
	else 
	endif 
	return 
endf 

def node_375
	if self.angle_2d_cw_between(90,270) 
		>> node_370 
	else 
	endif 
	return 
endf 

def node_376
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					if function#30(2) 
						if self.target.in_combat() 
							random (35) >> node_377 
							elser (0) >> node_378 
							elser (10) >> node_379 
							elser (55) >> node_380 
							endr 
						else 
							random (10) >> node_377 
							elser (35) >> node_378 
							elser (0) >> node_379 
							elser (55) >> node_380 
							endr 
						endif 
					else 
						if self.target.in_combat() 
							random (35) >> node_377 
							elser (10) >> node_378 
							elser (55) >> node_379 
							elser (0) >> node_380 
							endr 
						else 
							random (35) >> node_377 
							elser (55) >> node_378 
							elser (10) >> node_379 
							elser (0) >> node_380 
							endr 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_377
	return 
endf 

def node_378
	>> node_321 
	>> node_277 
	return 
endf 

def node_379
	>> node_378 
	if self.flying() 
		if self.distance_2d_to_target().leq(750) 
		else 
		endif 
	else 
		if self.distance_2d_to_target().leq(1500) 
		else 
		endif 
	endif 
	return 
endf 

def node_380
	self.force_area_change2() 
	return 
endf 

def node_381
	random (15) 
				self.targetArea(21) @ parameter2:700 
	elser (35) 
				self.targetArea(22) @ parameter2:700 
	elser (15) 
				self.targetArea(21) @ parameter2:700 
	elser (35) 
				self.targetArea(22) @ parameter2:700 
	endr 
	return 
endf 

def node_382
	random (35) 
				if self.flying() 
					-> velkhana.chance_fly() 
				else 
					-> velkhana.chance() 
				endif 
	elser (65) 
	endr 
	return 
endf 

def node_383
	if self.flying() 
		-> velkhana.chance_fly() 
	else 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_384
	>> node_047 
	-> velkhana.step_back_fly() 
	return 
endf 

def node_385
	if self.angle_2d_cw_between(15,345) 
		>> node_384 
	else 
	endif 
	return 
endf 

def node_386
	if self.angle_2d_cw_between(30,330) 
		>> node_384 
	else 
	endif 
	return 
endf 

def node_387
	if self.angle_2d_cw_between(45,315) 
		>> node_384 
	else 
	endif 
	return 
endf 

def node_388
	if self.angle_2d_cw_between(90,270) 
		>> node_384 
	else 
	endif 
	return 
endf 

def node_389
	if self.angle_2d_cw_between(0,180) 
		-> velkhana.quick_turn_fly() 
	else 
		-> velkhana.quick_turn_fly() 
	endif 
	return 
endf 

def node_390
	if self.angle_2d_cw_between(15,345) 
		>> node_389 
	else 
	endif 
	return 
endf 

def node_391
	if self.angle_2d_cw_between(30,330) 
		>> node_389 
	else 
	endif 
	return 
endf 

def node_392
	if self.angle_2d_cw_between(45,315) 
		>> node_389 
	else 
	endif 
	return 
endf 

def node_393
	if self.angle_2d_cw_between(90,270) 
		>> node_389 
	else 
	endif 
	return 
endf 

def node_394
	>> node_046 
	>> node_321 
	if self.flying() 
		-> velkhana.chance_fly() 
	else 
		-> velkhana.chance() 
	endif 
	return 
endf 

def node_395
	>> node_046 
	if self.targetEnemy(target_em.any_monster) 
		random (20) >> node_321 
		elser (80) 
		endr 
	else 
		if self.current_quest().is_rank(rank.AT) 
			self.targetEnemy(48) 
			>> node_321 
		else 
		endif 
	endif 
	random (60) -> velkhana.chance() 
	elser (10) -> velkhana.lost_search() 
	elser (30) -> velkhana.combat_search() 
	endr 
	return 
endf 

def node_396
	>> node_046 
	>> node_321 
	random (40) -> velkhana.chance() 
	elser (20) -> velkhana.lost_search() 
	elser (40) -> velkhana.combat_search() 
	elser (0) -> velkhana.threat_short() 
	endr 
	return 
endf 

def node_397
	>> node_046 
	>> node_316 
	-> velkhana.life_search() 
	return 
endf 

def node_398
	>> node_046 
	self.targetEnemy(58) 
	random (0) >> node_399 
	elser (100) 
	endr 
	self.targetEnemy(22) @ parameter2:2000 
	random (40) >> node_316 
	elser (60) 
	endr 
	random (70) -> velkhana.life_search() 
	elser (30) -> velkhana.marking() 
	endr 
	return 
endf 

def node_399
	-> velkhana.walk(1,2,0,600,1500) 
	return 
endf 

def node_400
	-> velkhana.glide_combat(1,2,0,600,2000) 
	return 
endf 

def node_401
	if self.fatigued() 
		>> node_046 
	else 
	endif 
	return 
endf 

def node_402
	if self.current_quest().is_rank(rank.AT) 
		>> node_404 
	else 
		>> node_403 
	endif 
	return 
endf 

def node_403
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#5D() 
		>> node_410 
	elif self.target(3) 
		>> node_411 
	elif self.target(4) 
		>> node_411 
	elif self.target(55) 
	elif self.target(0) 
		if self.target(0) @ parameter2:1 
			>> node_414 
		else 
			>> node_415 
		endif 
	elif self.target(14) 
		>> node_416 
	elif self.target(11) 
		>> node_417 
	elif self.target.mudded() 
		>> node_426 
	elif self.target(12) 
	elif self.flying() 
		if self.above_area() 
			>> node_420 
		elif function#11(900) 
			if self.above_area() 
				>> node_420 
			else 
			endif 
		else 
			>> node_420 
		endif 
	elif self.target(52) 
		>> node_419 
	else 
		>> node_408 
	endif 
	return 
endf 

def node_404
	if function#5D() 
		>> node_410 
	elif self.target(3) 
		>> node_411 
	elif self.target(4) 
		>> node_411 
	elif function#7F(-999) 
		>> node_429 
	elif self.target(0) 
		if self.target(0) @ parameter2:1 
			>> node_414 
		else 
			>> node_415 
		endif 
	elif self.target(14) 
		>> node_416 
	elif self.target(11) 
		>> node_417 
	elif self.target.mudded() 
		>> node_426 
	elif self.target(12) 
	elif self.flying() 
		if self.above_area() 
			>> node_420 
		elif function#11(900) 
			if self.above_area() 
				>> node_420 
			else 
			endif 
		else 
			>> node_420 
		endif 
	elif self.target(52) 
		>> node_419 
	else 
		>> node_408 
	endif 
	return 
endf 

def node_405
	if self.current_quest().is_rank(rank.AT) 
		>> node_407 
	else 
		>> node_406 
	endif 
	return 
endf 

def node_406
	if function#5D() 
		>> node_410 
	elif self.target(3) 
		>> node_411 
	elif self.target(4) 
		>> node_411 
	elif self.target(55) 
	elif self.target(0) 
		if self.target(0) @ parameter2:1 
			>> node_414 
		else 
			>> node_415 
		endif 
	elif self.target(14) 
		>> node_416 
	elif self.target(11) 
		>> node_417 
	elif self.target.mudded() 
		>> node_426 
	elif self.flying() 
		return 
	elif self.target(52) 
		>> node_419 
		return 
	else 
		return 
	endif 
	reset 
endf 

def node_407
	if function#5D() 
		>> node_410 
	elif self.target(3) 
		>> node_411 
	elif self.target(4) 
		>> node_411 
	elif function#7F(-999) 
		>> node_430 
		return 
	elif self.target(0) 
		if self.target(0) @ parameter2:1 
			>> node_414 
		else 
			>> node_415 
		endif 
	elif self.target(14) 
		>> node_416 
	elif self.target(11) 
		>> node_417 
	elif self.target.mudded() 
		>> node_426 
	elif self.flying() 
		return 
	elif self.target(52) 
		>> node_419 
		return 
	else 
		return 
	endif 
	reset 
endf 

def node_408
	if self.in_map(st.Ancient_Forest).in_area(2) 
		if self.vertical_distance_to_target().leq(300) 
		else 
			>> node_419 
		endif 
	elif self.in_map(st.Ancient_Forest).in_area(5) 
		if self.vertical_distance_to_target().leq(300) 
		else 
			>> node_419 
		endif 
	elif self.in_map(st.Ancient_Forest).in_area(6) 
		if self.vertical_distance_to_target().leq(300) 
		else 
			>> node_419 
		endif 
	elif self.in_map(st.Coral_Highlands).in_area(2) 
		if self.vertical_distance_to_target().leq(300) 
		else 
			>> node_419 
		endif 
	elif self.in_map(st.Coral_Highlands).in_area(10) 
		if self.vertical_distance_to_target().leq(400) 
		else 
			>> node_419 
		endif 
	elif self.vertical_distance_to_target().leq(450) 
	else 
		>> node_419 
	endif 
	return 
endf 

def node_409
	if [RegisterVar4 <= 10] 
		[RegisterVar4 |-] 
	elif [RegisterVar4 <= 1] 
		[RegisterVar4 ++] 
	else 
	endif 
	return 
endf 

def node_410
	if self.distance_2d_to_target().leq(1500) 
		if self.angle_2d_cw_between(300,60) 
		else 
			function#5E() 
			>> node_269 
		endif 
	else 
		if self.angle_2d_cw_between(300,60) 
			function#5E() 
			>> node_269 
		else 
			function#5E() 
			>> node_270 
		endif 
	endif 
	return 
endf 

def node_411
	>> node_412 
	>> node_413 
	reset 
endf 

def node_412
	self.targetArea(19) 
	if self.distance_2d_to_target().leq(900) 
	else 
		if self.flying() 
			>> node_256 
		else 
			>> node_231 
		endif 
	endif 
	return 
endf 

def node_413
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_046 
	-> velkhana.lost_search() 
	return 
endf 

def node_414
	if self.flying() 
		>> node_420 
		>> node_425 
	else 
		>> node_425 
		>> node_418 
		if self.distance_2d_to_target().leq(1000) 
			if self.target(0) 
				if self.above_area() 
					-> velkhana.jump_attack_wall_up() 
				else 
					-> velkhana.jump_attack_wall_down() 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_415
	if self.flying() 
		>> node_420 
		>> node_425 
	else 
		>> node_425 
		>> node_418 
		if self.distance_2d_to_target().leq(1000) 
			if self.target(0) 
				if self.above_area() 
					-> velkhana.jump_attack_wall_up() 
				else 
					self.targetArea(77) 
					-> velkhana.dash(1,2,0,0,1500) 
					self.targetArea(1) 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_416
	if self.flying() 
		>> node_420 
		>> node_425 
	else 
		>> node_425 
		>> node_418 
		if self.distance_2d_to_target().leq(2000) 
			if self.target(14) 
				if self.above_area() 
					-> velkhana.jump_attack_wall_up() 
				else 
					-> velkhana.jump_attack_wall_down() 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_417
	if self.flying() 
		>> node_424 
	else 
		>> node_419 
	endif 
	return 
endf 

def node_418
	if self.distance_2d_to_target().leq(600) 
		if function#11(1500) 
		else 
			-> velkhana.dash(1,2,0,500,1500) 
		endif 
	else 
		-> velkhana.dash(1,2,0,500,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if function#11(1500) 
		else 
			-> velkhana.dash(1,2,0,500,1500) 
		endif 
	else 
		-> velkhana.dash(1,2,0,500,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if function#11(1500) 
		else 
			-> velkhana.dash(1,2,0,500,1500) 
		endif 
	else 
		-> velkhana.dash(1,2,0,500,1500) 
	endif 
	return 
endf 

def node_419
	if self.distance_3d_to_target().leq(400) 
	else 
		-> velkhana.dash(1,2,0,300,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.dash(1,2,0,500,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.dash(1,2,0,500,1500) 
	endif 
	return 
endf 

def node_420
	if self.distance_2d_to_target().leq(300) 
		if function#11(1000) 
		else 
			-> velkhana.glide_combat(1,2,0,200,1500) 
		endif 
	else 
		-> velkhana.glide_combat(1,2,0,200,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if function#11(1000) 
		else 
			-> velkhana.glide_combat(1,2,0,500,1500) 
		endif 
	else 
		-> velkhana.glide_combat(1,2,0,500,1500) 
	endif 
	if self.distance_2d_to_target().leq(600) 
		if function#11(1000) 
		else 
			-> velkhana.glide_combat(1,2,0,500,1500) 
		endif 
	else 
		-> velkhana.glide_combat(1,2,0,500,1500) 
	endif 
	>> node_421 
	return 
endf 

def node_421
	if function#11(500) 
	else 
		if self.above_area() 
			>> node_422 
		else 
			>> node_423 
		endif 
	endif 
	return 
endf 

def node_422
	>> node_047 
	-> velkhana.short_up_step_fly() 
	return 
endf 

def node_423
	>> node_047 
	-> velkhana.short_down_step_fly() 
	return 
endf 

def node_424
	if self.distance_3d_to_target().leq(300) 
	else 
		-> velkhana.glide_direct_move(1,2,0,200,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(1,2,0,500,1500) 
	endif 
	if self.distance_3d_to_target().leq(600) 
	else 
		-> velkhana.glide_direct_move(1,2,0,500,1500) 
	endif 
	return 
endf 

def node_425
	if self.flying() 
		random (60) >> node_092 
		elser (40) 
		endr 
		>> node_096 
	else 
		if self.target(0) 
		elif self.target(14) 
		else 
			return 
		endif 
		if function#101(4) 
			random (35) >> node_070 
			elser (65) 
			endr 
		else 
		endif 
		if self.target(0) 
		elif self.target(14) 
		else 
			return 
		endif 
		if self.above_area() 
			if self.distance_2d_to_target().leq(1500) 
				-> velkhana.back_turn() 
			elif self.distance_2d_to_target().leq(3000) 
			else 
				-> velkhana.dash(6,2,0,2500,2000) 
			endif 
		else 
		endif 
		if self.target(0) 
		elif self.target(14) 
		else 
			return 
		endif 
		if self.above_area() 
			-> velkhana.vertical_breath() 
		else 
		endif 
	endif 
	return 
endf 

def node_426
	if self.flying() 
		>> node_096 
	else 
		if function#101(4) 
			random (35) >> node_070 
			elser (65) 
			endr 
		else 
		endif 
		>> node_427 
		>> node_428 
	endif 
	reset 
endf 

def node_427
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	return 
endf 

def node_428
	if self.flying() 
		>> node_096 
	else 
		if function#101(2) 
			if self.distance_2d_to_target().leq(1300) 
				random (30) >> node_080 
				elser (10) >> node_084 
				elser (30) >> node_069 
				elser (30) >> node_068 
				endr 
			elif self.distance_2d_to_target().leq(2300) 
				random (25) >> node_080 
				elser (10) >> node_084 
				elser (25) >> node_068 
				elser (40) >> node_066 
				endr 
			else 
				random (75) >> node_080 
				elser (25) >> node_084 
				endr 
			endif 
		elif function#101(1) 
			if self.distance_2d_to_target().leq(1300) 
				random (40) >> node_080 
				elser (20) >> node_084 
				elser (40) >> node_068 
				endr 
			elif self.distance_2d_to_target().leq(1700) 
				random (30) >> node_080 
				elser (10) >> node_084 
				elser (10) >> node_068 
				elser (50) >> node_066 
				endr 
			else 
				random (75) >> node_080 
				elser (25) >> node_084 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(900) 
				random (25) >> node_065 
				elser (15) >> node_058 
				elser (60) >> node_080 
				endr 
			else 
				random (65) >> node_080 
				elser (35) 
							-> velkhana.fly_tail_sting() 
							>> node_093 
							>> node_096 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

def node_429
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			if self.flying() 
			else 
				if self.enraged() 
					[RegisterVar7 |-] 
					[RegisterVar7 ++] 
					random (40) >> node_027 
					elser (40) >> node_015 
					elser (20) 
					endr 
				else 
					[RegisterVar7 |-] 
					[RegisterVar7 ++] 
					random (20) >> node_006 
					elser (20) >> node_022 
					elser (40) >> node_027 
					elser (20) 
					endr 
				endif 
			endif 
		else 
			if self.flying() 
			else 
				if self.enraged() 
					[RegisterVar7 |-] 
					[RegisterVar7 ++] 
					random (40) >> node_049 
					elser (40) >> node_022 
					elser (20) 
					endr 
				else 
					[RegisterVar7 |-] 
					[RegisterVar7 ++] 
					random (40) >> node_049 
					elser (40) >> node_022 
					elser (20) 
					endr 
				endif 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_430
	if self.current_quest().is_rank(rank.AT) 
		if function#101(2) 
			if self.flying() 
				reset 
			else 
				if self.enraged() 
					random (40) >> node_027 
					elser (40) >> node_015 
					elser (20) 
					endr 
				else 
					random (20) >> node_006 
					elser (20) >> node_022 
					elser (40) >> node_027 
					elser (20) 
					endr 
				endif 
			endif 
		else 
			if self.flying() 
				reset 
			else 
				if self.enraged() 
					random (40) >> node_049 
					elser (40) >> node_022 
					elser (20) 
					endr 
				else 
					random (40) >> node_049 
					elser (40) >> node_022 
					elser (20) 
					endr 
				endif 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_431
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					if self.target_is(em.Gold_Rathian) 
						>> node_437 
					elif self.target_is(em.Silver_Rathalos) 
						>> node_437 
					elif function#30(2) 
						if self.target.in_combat() 
							random (0) >> node_433 
							elser (0) >> node_434 
							elser (0) >> node_436 
							elser (100) >> node_437 
							endr 
						else 
							random (0) >> node_433 
							elser (0) >> node_434 
							elser (0) >> node_435 
							elser (100) >> node_437 
							endr 
						endif 
					elif function#30(4) 
						if self.target.in_combat() 
							random (0) >> node_433 
							elser (0) >> node_434 
							elser (100) >> node_436 
							elser (0) >> node_437 
							endr 
						else 
							random (0) >> node_433 
							elser (70) >> node_434 
							elser (30) >> node_435 
							elser (0) >> node_437 
							endr 
						endif 
					else 
						if self.target.in_combat() 
							random (0) >> node_433 
							elser (20) >> node_434 
							elser (80) >> node_436 
							elser (0) >> node_437 
							endr 
						else 
							random (0) >> node_433 
							elser (60) >> node_434 
							elser (20) >> node_435 
							elser (20) >> node_437 
							endr 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	>> node_438 
	return 
endf 

def node_432
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.distance_2d_to_target().leq(3000) 
				if self.vertical_distance_to_target().leq(1000) 
					if self.target_is(em.Gold_Rathian) 
						>> node_437 
					elif self.target_is(em.Silver_Rathalos) 
						>> node_437 
					elif function#30(2) 
						if self.target.in_combat() 
							random (30) >> node_433 
							elser (0) >> node_434 
							elser (0) >> node_435 
							elser (70) >> node_437 
							endr 
						else 
							random (30) >> node_433 
							elser (0) >> node_434 
							elser (0) >> node_435 
							elser (70) >> node_437 
							endr 
						endif 
					elif function#30(4) 
						if self.target.in_combat() 
							random (30) >> node_433 
							elser (0) >> node_434 
							elser (70) >> node_435 
							elser (0) >> node_437 
							endr 
						else 
							random (50) >> node_433 
							elser (0) >> node_434 
							elser (50) >> node_435 
							elser (0) >> node_437 
							endr 
						endif 
					else 
						if self.target.in_combat() 
							random (30) >> node_433 
							elser (20) >> node_434 
							elser (30) >> node_435 
							elser (20) >> node_437 
							endr 
						else 
							random (30) >> node_433 
							elser (20) >> node_434 
							elser (50) >> node_435 
							elser (0) >> node_437 
							endr 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	>> node_438 
	return 
endf 

def node_433
	return 
endf 

def node_434
	self.targetEnemy(target_em.closest_entity) 
	>> node_321 
	if self.in_combat() 
		>> node_277 
	else 
		if self.target.in_combat() 
			>> node_277 
		else 
			>> node_277 
		endif 
	endif 
	return 
endf 

def node_435
	self.targetEnemy(target_em.closest_entity) 
	if self.flying() 
		>> node_096 
	else 
		>> node_439 
		self.targetEnemy(target_em.closest_entity) 
		if function#101(2) 
			if self.distance_2d_to_target().leq(1500) 
				random (30) >> node_080 
				elser (0) >> node_084 
				elser (35) >> node_069 
				elser (35) >> node_068 
				endr 
			elif self.distance_2d_to_target().leq(2500) 
				random (30) >> node_080 
				elser (0) >> node_084 
				elser (30) >> node_068 
				elser (40) >> node_066 
				endr 
			else 
				random (100) >> node_080 
				elser (0) >> node_084 
				endr 
			endif 
		elif function#101(1) 
			if self.distance_2d_to_target().leq(1000) 
				random (30) >> node_058 
				elser (30) >> node_060 
				elser (20) >> node_080 
				elser (20) >> node_068 
				endr 
			elif self.distance_2d_to_target().leq(1500) 
				random (50) >> node_080 
				elser (0) >> node_084 
				elser (50) >> node_068 
				endr 
			elif self.distance_2d_to_target().leq(2000) 
				random (30) >> node_080 
				elser (0) >> node_084 
				elser (20) >> node_068 
				elser (50) >> node_066 
				endr 
			else 
				random (100) >> node_080 
				elser (0) >> node_084 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(1000) 
				random (25) >> node_058 
				elser (25) >> node_060 
				elser (50) >> node_080 
				endr 
			else 
				>> node_080 
			endif 
		endif 
	endif 
	return 
endf 

def node_436
	>> node_435 
	>> node_435 
	random (70) 
	elser (30) 
				return 
	endr 
	>> node_435 
	random (70) 
	elser (30) 
				return 
	endr 
	>> node_435 
	return 
endf 

def node_437
	if self.in_map(st.Special_Arena).in_area(-1) 
		>> node_435 
	elif self.in_map(st.Challenge_Arena).in_area(-1) 
		>> node_435 
	else 
		if [RegisterVar6 <= 8] 
			[RegisterVar6 |-] 
			self.force_area_change2() 
		elif [RegisterVar6 <= 5] 
			random (30) 
						[RegisterVar6 |-] 
						self.force_area_change2() 
			elser (70) 
			endr 
		else 
		endif 
		[RegisterVar6 ++] 
		if self.target.in_combat() 
			>> node_435 
			[RegisterVar6 ++] 
		else 
			[RegisterVar6 ++] 
			>> node_434 
		endif 
		self.targetEnemy(target_em.closest_entity) 
		if self.distance_2d_to_target().leq(3000) 
			if self.vertical_distance_to_target().leq(1000) 
				if function#5F() 
					repeat 
				elif self.in_combat() 
				else 
					repeat 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_438
	if self.defense_downed() 
		if function#31(49,3000) 
			self.targetEnemy(target_em.closest_entity) 
			random (25) >> node_321 
						>> node_277 
			elser (75) 
			endr 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_439
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(1000) 
		random (50) >> node_364 
					return 
		elser (50) 
		endr 
	elif self.distance_3d_to_target().leq(2000) 
	elif self.distance_3d_to_target().leq(3000) 
		random (50) 
					return 
		elser (50) 
		endr 
	else 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	self.targetEnemy(target_em.closest_entity) 
	if self.distance_3d_to_target().leq(2000) 
	else 
		-> velkhana.dash(1,2,0,1500,1500) 
	endif 
	return 
endf 

