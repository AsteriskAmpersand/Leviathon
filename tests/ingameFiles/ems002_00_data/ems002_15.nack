importactions Apceros as apceros
importlibrary Global as Global

def node_000 : 1
	function#54() 
	>> node_015 
	>> Global.node_023 
	>> node_001 
	>> node_002 
	reset 
endf 

def node_001 : 2
	>> node_003 
	>> node_016 
	return 
endf 

def node_002 : 3
	if function#5A() 
		>> node_004 
	elif function#5A(1) 
		>> node_005 
	elif function#5A(2) 
		>> node_006 
	elif function#5A(3) 
		>> node_007 
	elif function#5A(4) 
		>> node_008 
	else 
	endif 
	function#54() 
	return 
endf 

def node_003 : 18
	function#52() 
	self.targetArea(target_area.nearest_entrance) @ unkn3:2097152, unkn12:4, unknExtra1:700 
	return 
endf 

def node_004 : 6
	if function#3C() 
		>> node_009 
	else 
		>> node_009 
	endif 
	return 
endf 

def node_005 : 7
	if function#3C() 
		>> node_009 
	else 
		>> node_009 
	endif 
	return 
endf 

def node_006 : 5
	if function#3C() 
		>> node_010 
	else 
		>> node_010 
	endif 
	return 
endf 

def node_007 : 15
	if function#3C() 
		>> node_009 
	else 
		>> node_009 
	endif 
	return 
endf 

def node_008 : 20
	>> node_013 
	return 
endf 

def node_009 : 11
	-> apceros.glide_combat_no_directmove() 
	-> apceros.glide_combat_only_groundnavi() 
	return 
endf 

def node_010 : 12
	self.targetEnemy(17) 
	>> Global.node_003 
	-> apceros.glide_end() 
	-> apceros.glide_direct_move() 
	return 
endf 

def node_011 : 13
	-> apceros.glide() 
	return 
endf 

def node_012 : 14
	-> apceros.sudden_rise_from_fly() 
	return 
endf 

def node_013 : 19
	random (50) -> apceros.glide_wall_up() 
	elser (50) -> apceros.double_floor_up() 
	endr 
	return 
endf 

def node_014 : 16
	if self.targetEnemy(43) 
		if self.target(7) 
		elif self.target(10) 
		elif self.target(4) 
		else 
			>> Global.node_014 
		endif 
	else 
	endif 
	return 
endf 

def node_015 : 17
	>> Global.node_016 
	return 
endf 

def node_016 : 21
	-> apceros.idle_r(2,1,0,700,600) 
	if self.distance_3d_to_target().gt(700) 
		repeat 
	else 
	endif 
	return 
endf 

def node_017 : 22
	-> apceros.idle_fly(2,1,0,700,600) 
	if self.distance_3d_to_target().gt(700) 
		repeat 
	else 
	endif 
	return 
endf 

