importactions Diablos as diablos
importlibrary Global as Global

def node_000 : 1
	>> Global.node_007 
	>> Global.node_008 
	function#52() 
	>> node_001 
	>> node_002 
	reset 
endf 

def node_001 : 2
	>> Global.node_016 
	self.targetArea(target_area.nearest_entrance) 
	if function#57(1) 
		>> node_004 
	elif function#57(2) 
		>> node_005 
	elif function#57(3) 
		>> node_006 
	elif function#57(5) 
		>> node_007 
	else 
		>> node_003 
	endif 
	self.targetArea(target_area.nearest_entrance) 
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		repeat 
	endif 
	reset 
endf 

def node_002 : 3
	if function#57(1) 
		>> node_009 
		function#56(4) 
	elif function#57(2) 
		>> node_010 
		function#56(4) 
	elif function#57(3) 
		>> node_011 
		function#56(4) 
	elif function#57(5) 
		>> node_012 
		function#56(4) 
	elif function#57(4) 
		>> node_008 
	else 
		function#54() 
		>> Global.node_025 
		function#56(4) 
	endif 
	return 
endf 

def node_003 : 5
	self.targetArea(target_area.nearest_entrance) 
	-> diablos.walk(2,1,5,1500,600) 
	return 
endf 

def node_004 : 8
	self.targetArea(target_area.nearest_entrance) 
	-> diablos.walk(2,1,5,1500,600) 
	return 
endf 

def node_005 : 10
	self.targetArea(target_area.nearest_entrance) 
	-> diablos.walk(2,1,5,1500,600) 
	return 
endf 

def node_006 : 11
	self.targetArea(target_area.nearest_entrance) 
	-> diablos.walk(2,1,5,1500,600) 
	return 
endf 

def node_007 : 22
	self.targetArea(target_area.nearest_entrance) 
	-> diablos.walk(2,1,5,1500,600) 
	return 
endf 

def node_008 : 27
	function#54() 
	self.targetEnemy(17) 
	>> Global.node_004 
	return 
endf 

def node_009 : 21
	function#54() 
	self.targetEnemy(17) 
	>> Global.node_012 
	>> Global.node_005 
	return 
endf 

def node_010 : 15
	function#54() 
	self.targetEnemy(17) 
	>> Global.node_006 
	return 
endf 

def node_011 : 16
	function#54() 
	self.targetEnemy(17) 
	>> Global.node_005 
	return 
endf 

def node_012 : 23
	function#54() 
	self.targetEnemy(17) 
	>> Global.node_005 
	return 
endf 

