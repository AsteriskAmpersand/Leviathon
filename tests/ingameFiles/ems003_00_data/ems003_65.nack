importactions Kelbi as kelbi

def node_000 : 7
	>> node_002 
	>> node_045 
	>> node_006 
	conclude 
endf 

def node_001 : 52
endf 

def node_002 : 24
	function#54() 
	>> node_003 
	>> node_004 
	return 
endf 

def node_003 : 5
	function#E4(4) 
	function#E4(1) 
	function#E4(2) 
	function#E4(11) 
	function#E7(1) 
	function#E7(11) 
	function#E7(2) 
	function#E7(3) 
	function#E7(4) 
	function#E7(5) 
	return 
endf 

def node_004 : 23
	>> node_051 
	>> node_053 
	>> node_055 
	>> node_059 
	return 
endf 

def node_005 : 53
endf 

def node_006 : 6
	>> node_008 
	return 
endf 

def node_007 : 84
endf 

def node_008 : 43
	if [RegisterVar3 >= 0] >> node_009 
	elif [RegisterVar3 >= 1] >> node_010 
	elif [RegisterVar3 >= 2] >> node_011 
	elif [RegisterVar3 <= 3] >> node_012 
	endif 
	return 
endf 

def node_009 : 45
	random (80) >> node_020 
	elser (20) >> node_023 
	elser (0) >> node_026 
	endr 
	return 
endf 

def node_010 : 44
	random (65) >> node_020 
	elser (35) >> node_023 
	elser (0) >> node_026 
	endr 
	return 
endf 

def node_011 : 9
	random (50) >> node_020 
	elser (50) >> node_023 
	elser (0) >> node_026 
	endr 
	return 
endf 

def node_012 : 66
	random (0) >> node_020 
	elser (100) >> node_023 
	elser (0) >> node_026 
	endr 
	return 
endf 

def node_013 : 85
endf 

def node_014 : 48
	if [RegisterVar3 >= 0] >> node_015 
	elif [RegisterVar3 >= 1] >> node_016 
	elif [RegisterVar3 >= 2] >> node_017 
	elif [RegisterVar3 <= 3] >> node_018 
	endif 
	return 
endf 

def node_015 : 49
	random (70) >> node_020 
	elser (0) >> node_023 
	elser (30) >> node_026 
	endr 
	return 
endf 

def node_016 : 50
	random (50) >> node_020 
	elser (0) >> node_023 
	elser (50) >> node_026 
	endr 
	return 
endf 

def node_017 : 51
	random (30) >> node_020 
	elser (0) >> node_023 
	elser (70) >> node_026 
	endr 
	return 
endf 

def node_018 : 65
	random (0) >> node_020 
	elser (0) >> node_023 
	elser (100) >> node_026 
	endr 
	return 
endf 

def node_019 : 54
endf 

def node_020 : 11
	>> node_054 
	>> node_021 
	conclude 
endf 

def node_021 : 22
	>> node_056 
	>> node_070 
	return 
endf 

def node_022 : 86
endf 

def node_023 : 10
	>> node_057 
	>> node_050 
	>> node_024 
	conclude 
endf 

def node_024 : 42
	>> node_069 
	>> node_068 
	return 
endf 

def node_025 : 87
endf 

def node_026 : 12
	>> node_057 
	>> node_052 
	>> node_069 
	>> node_027 
	>> node_028 
	return 
endf 

def node_027 : 17
	function#DD(3500) 
	function#E2(2) 
	if function#D2(3) 
	else 
		function#D2(4) 
	endif 
	return 
endf 

def node_028 : 18
	>> node_045 
	>> node_040 
	if self.distance_3d_to_target().leq(500) 
		>> node_030 
	else 
		>> node_029 
		>> node_031 
		repeat 
	endif 
	return 
endf 

def node_029 : 82
	>> node_061 
	>> node_058 
	return 
endf 

def node_030 : 58
	>> node_059 
	>> node_047 
	>> node_068 
	function#DA() 
	return 
endf 

def node_031 : 59
	if [RegisterVar4 >= 5] 
	elif [RegisterVar4 == 8] >> node_032 
	elif [RegisterVar4 == 16] >> node_033 
	elif [RegisterVar4 == 20] >> node_032 
	elif [RegisterVar4 == 23] >> node_034 
	elif [RegisterVar4 <= 40] >> node_034 
	endif 
	return 
endf 

def node_032 : 77
	random (60) 
	elser (10) >> node_035 
	elser (30) >> node_036 
	endr 
	return 
endf 

def node_033 : 78
	random (55) 
	elser (30) >> node_037 
	elser (15) >> node_038 
	endr 
	return 
endf 

def node_034 : 79
	random (30) 
	elser (0) >> node_036 
	elser (70) >> node_038 
	endr 
	return 
endf 

def node_035 : 67
	>> node_047 
	>> node_064 
	return 
endf 

def node_036 : 60
	>> node_069 
	return 
endf 

def node_037 : 75
	>> node_047 
	>> node_063 
	return 
endf 

def node_038 : 76
	>> node_047 
	>> node_065 
	>> node_068 
	>> node_059 
	conclude 
endf 

def node_039 : 55
endf 

def node_040 : 72
	>> node_041 
	return 
endf 

def node_041 : 33
	function#DE(3500) 
	function#EB(2000) 
	function#DF(80) 
	if function#D2(8) 
		>> node_042 
		function#E5() 
	endif 
	return 
endf 

def node_042 : 34
	if function#D8() 
		>> node_047 
		>> node_043 
	endif 
	return 
endf 

def node_043 : 63
	if self.angle_2d_ccw_between(90,0) 
		>> node_067 
		>> node_066 
		>> node_070 
	else 
		>> node_063 
		>> node_070 
	endif 
	return 
endf 

def node_044 : 89
endf 

def node_045 : 88
	if function#FA() 
		>> node_070 
	endif 
	return 
endf 

def node_046 : 70
endf 

def node_047 : 35
	if function#45() 
		>> node_062 
	endif 
	return 
endf 

def node_048 : 19
	if function#46() 
		>> node_070 
	else 
		return 
	endif 
	reset 
endf 

def node_049 : 56
endf 

def node_050 : 29
	[RegisterVar0 ++] 
	return 
endf 

def node_051 : 2
	[RegisterVar0 |-] 
	return 
endf 

def node_052 : 30
	[RegisterVar1 ++] 
	return 
endf 

def node_053 : 3
	[RegisterVar1 |-] 
	return 
endf 

def node_054 : 31
	[RegisterVar2 ++] 
	return 
endf 

def node_055 : 4
	[RegisterVar2 |-] 
	return 
endf 

def node_056 : 46
	[RegisterVar3 ++] 
	return 
endf 

def node_057 : 47
	[RegisterVar3 |-] 
	return 
endf 

def node_058 : 61
	[RegisterVar4 ++] 
	return 
endf 

def node_059 : 62
	[RegisterVar4 |-] 
	return 
endf 

def node_060 : 57
endf 

def node_061 : 20
	-> action#09(2,0,0,300) 
	>> node_048 
	return 
endf 

def node_062 : 21
	-> action#0D() 
	return 
endf 

def node_063 : 38
	-> action#02() 
	return 
endf 

def node_064 : 37
	-> action#03() 
	return 
endf 

def node_065 : 39
	-> action#04() 
	return 
endf 

def node_066 : 40
	-> action#23() 
	return 
endf 

def node_067 : 41
	-> action#07() 
	return 
endf 

def node_068 : 14
	-> action#06() 
	return 
endf 

def node_069 : 1
	-> action#27() 
	return 
endf 

def node_070 : 8
	-> action#26() 
	return 
endf 

