importactions Glavenus as glavenus
importlibrary Global as Global

def node_000
	>> Global.node_001 
	>> node_001 
	if function#101(2) 
		>> node_002 
	else 
		[RegisterVar0 |-] 
	endif 
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_003 
	reset 
endf 

def node_001
	>> node_076 
	if self.target(4) 
		>> node_077 => reset 
	elif self.target(3) 
		>> node_077 => reset 
	elif self.target(55) 
		>> node_087 => reset 
	elif function#41() 
		>> Global.node_019 => reset 
	elif self.target(12) 
		>> node_083 => reset 
	elif self.target(14) 
		>> node_081 => reset 
	elif self.target(11) 
		>> node_075 => reset 
	elif self.target(0) @ parameter2:1 
		>> node_079 => reset 
	elif self.target(0) 
		>> node_080 => reset 
	elif [RegisterVar5 == 1] 
		>> node_075 => reset 
	endif 
	return 
endf 

def node_002
	[RegisterVar0 ++] 
	if [RegisterVar0 <= 15] 
		[RegisterVar0 |-] 
		-> glavenus.tail_sharpen_to_breath_charge() 
	elif [RegisterVar0 <= 10] 
		if self.current_quest().is_rank(rank.AT) 
			random (90) -> glavenus.tail_sharpen_to_breath_charge() 
			elser (10) 
			endr 
		else 
			random (70) -> glavenus.tail_sharpen_to_breath_charge() 
			elser (30) 
			endr 
		endif 
	elif [RegisterVar0 <= 8] 
		if self.current_quest().is_rank(rank.AT) 
			random (70) -> glavenus.tail_sharpen_to_breath_charge() 
			elser (30) 
			endr 
		else 
			random (50) -> glavenus.tail_sharpen_to_breath_charge() 
			elser (50) 
			endr 
		endif 
	else 
	endif 
	return 
endf 

def node_003
	if function#102() 
		>> node_005 
	else 
		>> node_004 
	endif 
	reset 
endf 

def node_004
	>> node_073 
	if self.distance_3d_to_target().leq(500) 
		if self.enraged() >> node_011 
		elif self.fatigued() >> node_016 
		else >> node_006 
		endif 
	elif self.distance_3d_to_target().leq(1000) 
		if self.enraged() >> node_012 
		elif self.fatigued() >> node_017 
		else >> node_007 
		endif 
	elif self.distance_3d_to_target().leq(1500) 
		if self.enraged() >> node_013 
		elif self.fatigued() >> node_018 
		else >> node_008 
		endif 
	elif self.distance_3d_to_target().leq(2500) 
		if self.enraged() >> node_014 
		elif self.fatigued() >> node_019 
		else >> node_009 
		endif 
	else 
		if self.enraged() >> node_015 
		elif self.fatigued() >> node_020 
		else >> node_010 
		endif 
	endif 
	return 
endf 

def node_005
	>> node_073 
	if self.distance_3d_to_target().leq(500) 
		if self.enraged() >> node_026 
		elif self.fatigued() >> node_031 
		else >> node_021 
		endif 
	elif self.distance_3d_to_target().leq(1000) 
		if self.enraged() >> node_027 
		elif self.fatigued() >> node_032 
		else >> node_022 
		endif 
	elif self.distance_3d_to_target().leq(1500) 
		if self.enraged() >> node_028 
		elif self.fatigued() >> node_033 
		else >> node_023 
		endif 
	elif self.distance_3d_to_target().leq(2500) 
		if self.enraged() >> node_029 
		elif self.fatigued() >> node_034 
		else >> node_024 
		endif 
	else 
		if self.enraged() >> node_030 
		elif self.fatigued() >> node_035 
		else >> node_025 
		endif 
	endif 
	return 
endf 

def node_006
	random (5) >> node_054 
	elser (15) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (10) >> node_037 
	elser (10) >> node_038 
	endr 
	return 
endf 

def node_007
	random (5) >> node_054 
	elser (15) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (20) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (20) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_008
	random (10) >> node_055 
	elser (15) >> node_060 
	elser (25) >> node_061 
	elser (25) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (0) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_009
	random (70) >> node_044 
				return 
	elser (30) >> node_068 
	endr 
	random (20) >> node_055 
	elser (0) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (10) >> node_037 
	elser (10) >> node_038 
	endr 
	return 
endf 

def node_010
	>> node_075 
	return 
endf 

def node_011
	random (10) >> node_054 
	elser (10) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (10) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (20) >> node_037 
	elser (10) >> node_038 
	endr 
	return 
endf 

def node_012
	random (10) >> node_054 
	elser (10) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (20) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (20) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_013
	random (10) >> node_055 
	elser (10) >> node_060 
	elser (20) >> node_061 
	elser (30) >> node_068 
	elser (15) >> node_039 
	elser (15) >> node_040 
	elser (0) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_014
	random (70) >> node_075 
				return 
	elser (30) >> node_068 
	endr 
	random (20) >> node_055 
	elser (0) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (25) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (10) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_015
	>> node_075 
	return 
endf 

def node_016
	random (5) >> node_054 
	elser (15) >> node_060 
	elser (35) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (0) >> node_037 
	elser (10) >> node_038 
	endr 
	return 
endf 

def node_017
	random (25) >> node_054 
	elser (15) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (20) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_018
	random (10) >> node_055 
	elser (20) >> node_060 
	elser (45) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (0) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_019
	random (70) >> node_044 
				return 
	elser (30) >> node_068 
	endr 
	random (20) >> node_055 
	elser (0) >> node_060 
	elser (45) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_020
	>> node_075 
	return 
endf 

def node_021
	random (5) >> node_054 
	elser (15) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (10) >> node_037 
	elser (10) >> node_038 
	elser (5) >> node_041 
	endr 
	return 
endf 

def node_022
	random (5) >> node_054 
	elser (10) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (20) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (20) >> node_037 
	elser (0) >> node_038 
	elser (5) >> node_041 
	endr 
	return 
endf 

def node_023
	random (5) >> node_055 
	elser (15) >> node_060 
	elser (15) >> node_061 
	elser (20) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (0) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	elser (10) >> node_042 
	elser (10) >> node_043 
	endr 
	return 
endf 

def node_024
	random (50) >> node_044 
				return 
	elser (30) >> node_068 
	elser (20) >> node_049 
				return 
	endr 
	random (20) >> node_055 
	elser (0) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (10) >> node_037 
	elser (10) >> node_038 
	endr 
	return 
endf 

def node_025
	>> node_075 
	return 
endf 

def node_026
	random (10) >> node_054 
	elser (10) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (10) >> node_039 
	elser (10) >> node_040 
	elser (5) >> node_036 
	elser (20) >> node_037 
	elser (5) >> node_038 
	elser (10) >> node_041 
	endr 
	return 
endf 

def node_027
	random (10) >> node_054 
	elser (10) >> node_060 
	elser (15) >> node_061 
	elser (0) >> node_068 
	elser (20) >> node_039 
	elser (10) >> node_040 
	elser (5) >> node_036 
	elser (20) >> node_037 
	elser (0) >> node_038 
	elser (10) >> node_041 
	endr 
	return 
endf 

def node_028
	random (10) >> node_055 
	elser (10) >> node_060 
	elser (15) >> node_061 
	elser (20) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (0) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	elser (10) >> node_042 
	elser (10) >> node_043 
	endr 
	return 
endf 

def node_029
	random (50) >> node_044 
				return 
	elser (30) >> node_068 
	elser (20) >> node_049 
				return 
	endr 
	random (20) >> node_055 
	elser (0) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (25) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (10) >> node_037 
	elser (0) >> node_038 
	endr 
	return 
endf 

def node_030
	>> node_075 
	return 
endf 

def node_031
	random (5) >> node_054 
	elser (5) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (0) >> node_037 
	elser (10) >> node_038 
	elser (25) >> node_041 
	endr 
	return 
endf 

def node_032
	random (5) >> node_054 
	elser (10) >> node_060 
	elser (20) >> node_061 
	elser (0) >> node_068 
	elser (20) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	elser (25) >> node_041 
	endr 
	return 
endf 

def node_033
	random (5) >> node_055 
	elser (15) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (0) >> node_036 
	elser (0) >> node_037 
	elser (0) >> node_038 
	elser (20) >> node_042 
	elser (10) >> node_043 
	endr 
	return 
endf 

def node_034
	random (50) >> node_044 
				return 
	elser (30) >> node_068 
	elser (20) >> node_049 
				return 
	endr 
	random (30) >> node_055 
	elser (0) >> node_060 
	elser (25) >> node_061 
	elser (0) >> node_068 
	elser (15) >> node_039 
	elser (10) >> node_040 
	elser (10) >> node_036 
	elser (0) >> node_037 
	elser (10) >> node_038 
	endr 
	return 
endf 

def node_035
	>> node_075 
	return 
endf 

def node_036
	if function#102() 
		>> node_051 
	else 
		>> node_046 
	endif 
	>> node_061 
	return 
endf 

def node_037
	if function#102() 
		>> node_051 
	else 
		>> node_046 
	endif 
	>> node_068 
	return 
endf 

def node_038
	if function#102() 
		>> node_051 
	else 
		>> node_046 
	endif 
	>> node_055 
	if self.target.helpless_0() 
		>> node_068 
	else 
		>> node_061 
	endif 
	return 
endf 

def node_039
	>> node_055 
	if self.target.helpless_0() 
		>> node_068 
	else 
		>> node_061 
	endif 
	return 
endf 

def node_040
	>> node_055 
	>> node_055 
	if self.target.helpless_0() 
		>> node_068 
	else 
		>> node_061 
	endif 
	return 
endf 

def node_041
	if function#102() 
		>> node_051 
	else 
		>> node_046 
	endif 
	if self.enraged() 
		>> node_050 
	else 
		>> node_049 
	endif 
	return 
endf 

def node_042
	if self.enraged() 
		>> node_050 
	else 
		>> node_049 
	endif 
	>> node_061 
	return 
endf 

def node_043
	if self.enraged() 
		>> node_050 
	else 
		>> node_049 
	endif 
	>> node_068 
	return 
endf 

def node_044
	if self.distance_2d_to_target().leq(800) 
	else 
		if self.fatigued() 
			-> glavenus.tired_dash(6,2,0,800,1500) 
		else 
			-> glavenus.dash(1,2,0,800,1500) 
		endif 
	endif 
	if self.distance_2d_to_target().leq(800) 
	else 
		if self.fatigued() 
			-> glavenus.tired_dash(6,2,0,800,1500) 
		else 
			-> glavenus.dash(1,2,0,800,1500) 
		endif 
	endif 
	if self.distance_2d_to_target().leq(800) 
	else 
		if self.fatigued() 
			-> glavenus.tired_dash(6,2,0,800,1500) 
		else 
			-> glavenus.dash(1,2,0,800,1500) 
		endif 
	endif 
	return 
endf 

def node_045
	if self.distance_2d_to_target().leq(1500) 
		>> node_044 
	elif self.distance_2d_to_target().leq(3000) 
		-> glavenus.jump_attack() 
	else 
		>> node_044 
	endif 
	return 
endf 

def node_046
	if self.angle_2d_cw_between(135,225) 
		>> node_047 
	else 
		>> node_048 
	endif 
	return 
endf 

def node_047
	-> glavenus.step_back_short() 
	return 
endf 

def node_048
	if self.angle_2d_cw_between(0,180) 
		-> glavenus.step_side_r() 
	else 
		-> glavenus.step_side_l() 
	endif 
	return 
endf 

def node_049
	-> glavenus.breath() 
	return 
endf 

def node_050
	if self.distance_2d_to_target().leq(1750) 
		-> glavenus.three_breath() 
	else 
		>> node_049 
	endif 
	return 
endf 

def node_051
	if self.angle_2d_cw_between(45,135) 
		>> node_053 
	elif self.angle_2d_cw_between(225,315) 
		>> node_053 
	else 
		>> node_052 
	endif 
	return 
endf 

def node_052
	if self.fatigued() 
		>> node_047 
	else 
		-> glavenus.breath_step() 
	endif 
	return 
endf 

def node_053
	if self.fatigued() 
		>> node_048 
	else 
		if self.angle_2d_cw_between(0,180) 
			-> glavenus.side_step_breath_r() 
		else 
			-> glavenus.side_step_breath_l() 
		endif 
	endif 
	return 
endf 

def node_054
	>> node_055 
	if self.distance_2d_to_target().leq(650) 
	elif self.distance_2d_to_target().leq(1300) 
		random (50) -> glavenus.dash_bite2() 
		elser (50) 
		endr 
	else 
	endif 
	return 
endf 

def node_055
	if self.distance_2d_to_target().leq(200) 
		>> node_059 
	elif self.distance_2d_to_target().leq(700) 
		if self.angle_2d_cw_between(270,90) 
			>> node_056 
		else 
			>> node_059 
		endif 
	else 
		>> node_056 
	endif 
	return 
endf 

def node_056
	if self.distance_2d_to_target().leq(850) 
		>> node_057 
	elif self.distance_2d_to_target().leq(1400) 
		>> node_058 
	elif self.distance_2d_to_target().leq(1750) 
		-> glavenus.dash_bite2() 
	else 
		>> node_044 
		-> glavenus.bite() 
	endif 
	return 
endf 

def node_057
	if self.distance_2d_to_target().leq(400) 
		-> glavenus.back_turn() 
	else 
	endif 
	if self.angle_2d_cw_between(0,360) 
		-> glavenus.bite() 
	elif self.angle_2d_cw_between(45,180) 
		-> glavenus.quick_turn() 
		-> glavenus.bite_no_blend_r() 
	else 
		-> glavenus.quick_turn() 
		-> glavenus.bite_no_blend_l() 
	endif 
	return 
endf 

def node_058
	if self.angle_2d_cw_between(0,360) 
		-> glavenus.dash_bite() 
	elif self.angle_2d_cw_between(45,180) 
		-> glavenus.quick_turn() 
		-> glavenus.dash_bite_no_blend_r() 
	else 
		-> glavenus.quick_turn() 
		-> glavenus.dash_bite_no_blend_l() 
	endif 
	return 
endf 

def node_059
	-> glavenus.turn_tail_attack_l() 
	return 
endf 

def node_060
	if self.distance_2d_to_target().leq(650) 
		if function#102() 
			>> node_053 
		else 
			>> node_048 
		endif 
	else 
	endif 
	if self.angle_2d_cw_between(0,360) 
		-> glavenus.dash_bite2() 
	elif self.angle_2d_cw_between(45,180) 
		-> glavenus.quick_turn() 
		-> glavenus.dash_bite2_no_blend_r() 
	else 
		-> glavenus.quick_turn() 
		-> glavenus.dash_bite2_no_blend_l() 
	endif 
	return 
endf 

def node_061
	if self.distance_2d_to_target().leq(500) 
		>> node_065 
	elif self.distance_2d_to_target().leq(750) 
		random (40) >> node_064 
		elser (60) >> node_063 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (80) >> node_064 
		elser (20) >> node_063 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		>> node_064 
	else 
		>> node_066 
	endif 
	return 
endf 

def node_062
	if self.enraged() 
		if self.angle_2d_cw_between(0,180) 
			>> node_063 
		else 
			>> node_064 
		endif 
	else 
		if self.angle_2d_cw_between(0,180) 
			>> node_064 
		else 
			>> node_063 
		endif 
	endif 
	return 
endf 

def node_063
	-> glavenus.nagiharai() 
	return 
endf 

def node_064
	if self.enraged() 
		if function#101(1) 
			-> glavenus.tail_vertical_attack_slash_combo() 
			>> node_067 
		else 
			-> glavenus.tail_vertical_attack_step_combo() 
			>> node_067 
		endif 
	else 
		-> glavenus.tail_vertical_attack() 
	endif 
	return 
endf 

def node_065
	-> glavenus.tail_fire_attack_back() 
	return 
endf 

def node_066
	-> glavenus.tail_fire_attack() 
	return 
endf 

def node_067
	if self.distance_2d_to_target().leq(500) 
		>> node_065 
	elif self.distance_2d_to_target().leq(1000) 
		>> node_063 
	elif self.distance_2d_to_target().leq(2500) 
		random (30) >> node_066 
		elser (70) >> node_069 
		endr 
	else 
	endif 
	return 
endf 

def node_068
	if self.distance_2d_to_target().leq(1000) 
		>> node_061 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_069
	if self.enraged() 
		if self.distance_2d_to_target().leq(1500) 
			-> glavenus.jump_tail_attack2_start_near() 
		elif self.vertical_distance_to_target().gt(700) 
			-> glavenus.jump_tail_attack2_start_up() 
		else 
			-> glavenus.jump_tail_attack2_start() 
		endif 
	else 
		if self.distance_2d_to_target().leq(1500) 
			-> glavenus.jump_tail_attack_near() 
		elif self.vertical_distance_to_target().gt(700) 
			-> glavenus.jump_tail_attack_up() 
		else 
			-> glavenus.jump_tail_attack() 
		endif 
	endif 
	return 
endf 

def node_070
	if self.distance_2d_to_target().leq(1000) 
		-> glavenus.step_back() 
		>> node_071 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			-> glavenus.jump_tail_attack2_start_near() 
		else 
			-> glavenus.jump_tail_attack_near() 
		endif 
	else 
		>> node_071 
	endif 
	return 
endf 

def node_071
	if self.vertical_distance_to_target().gt(700) 
		if self.enraged() 
			-> glavenus.jump_tail_attack2_start_up() 
		else 
			-> glavenus.jump_tail_attack_up() 
		endif 
	else 
		if self.enraged() 
			-> glavenus.jump_tail_attack2_start() 
		else 
			-> glavenus.jump_tail_attack() 
		endif 
	endif 
	return 
endf 

def node_072
	[RegisterVar1 |-] 
	-> glavenus.special_attack() 
	reset 
endf 

def node_073
	if function#101(1) 
		[RegisterVar1 ++] 
		if self.enraged() 
			[RegisterVar1 ++] 
		endif 
	else 
	endif 
	>> node_074 
	return 
endf 

def node_074
	if function#101(1) 
		if [RegisterVar1 <= 3] 
			if self.distance_3d_to_target().leq(1100) 
				if self.target.helpless_0() 
					>> node_072 
				else 
					random (60) >> node_072 
					elser (40) 
					endr 
				endif 
			else 
				return 
			endif 
		elif [RegisterVar1 <= 5] 
			if self.distance_3d_to_target().leq(1100) 
				>> node_072 
			else 
				return 
			endif 
		else 
			return 
		endif 
	else 
		[RegisterVar1 |-] 
	endif 
	return 
endf 

def node_075
	if self.fatigued() 
		-> glavenus.tired_dash(2,1,0,3500,1200) 
	else 
		-> glavenus.dash(2,1,0,3500,1200) 
	endif 
	return 
endf 

def node_076
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.target.mudded() 
		>> node_075 
		>> node_066 
	else 
	endif 
	[RegisterVar5 |-] 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#5D() 
		function#5E() 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> node_082 
		self.targetArea(4) 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	if self.in_map(st.Ancient_Forest).in_area(5) 
		if self.vertical_distance_to_target().gt(350) 
			[RegisterVar5 ++] 
		elif self.target(52) 
			[RegisterVar5 ++] 
		else 
			[RegisterVar5 |-] 
		endif 
	elif self.in_map(st.Ancient_Forest).in_area(2) 
		if self.vertical_distance_to_target().gt(340) 
			[RegisterVar5 ++] 
		elif self.target(52) 
			[RegisterVar5 ++] 
		else 
			[RegisterVar5 |-] 
		endif 
	else 
		if self.vertical_distance_to_target().gt(400) 
			[RegisterVar5 ++] 
		elif self.target(52) 
			[RegisterVar5 ++] 
		else 
			[RegisterVar5 |-] 
		endif 
	endif 
	return 
endf 

def node_077
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1000) 
		>> Global.node_011 
		repeat 
	else 
		self.targetEnemy(target_em.random_player_or_cat) >> Global.node_009 
		*&
		random (37) -> glavenus.combat_search() 
		elser (23) -> glavenus.threat() 
		elser (40) -> glavenus.wait() 
		endr 
	endif 
	return 
endf 

def node_078
	if self.vertical_distance_to_target().leq(700) 
		if self.distance_3d_to_target().gt(1800) 
			if self.distance_3d_to_target().leq(3000) 
				if function#102() 
					random (30) >> node_075 
					elser (50) -> glavenus.breath() 
					elser (20) >> node_070 
					endr 
				else 
					random (53) >> node_075 
					elser (47) >> node_084 
					endr 
				endif 
			else 
				>> node_075 
			endif 
		else 
			>> node_075 
		endif 
	else 
		>> node_075 
	endif 
	return 
endf 

def node_079
	if self.above_target() 
		if self.distance_2d_to_target().gt(3000) 
			-> glavenus.dash(1,0,0,2500) 
		else 
			-> glavenus.back_turn() 
		endif 
		if function#102() 
			random (20) >> node_075 
			elser (40) -> glavenus.breath() 
			elser (40) >> node_084 
			endr 
		else 
			random (40) >> node_075 
			elser (60) >> node_084 
			endr 
		endif 
	else 
		if self.distance_2d_to_target().gt(1500) 
			-> glavenus.dash(1,0,0,800) 
		else 
			>> node_085 
		endif 
	endif 
	return 
endf 

def node_080
	if self.below_target() 
		self.targetArea(77) 
		>> node_086 
		>> node_075 
	else 
		>> node_079 
	endif 
	*&
	return 
endf 

def node_081
	if self.distance_2d_to_target().gt(3000) 
		>> node_075 
	else 
		-> glavenus.back_turn() 
	endif 
	>> node_084 
	return 
endf 

def node_082
	if self.angle_2d_cw_between(90,270) 
		-> glavenus.combat_search() 
	elif self.distance_3d_to_target().gt(3000) 
		-> glavenus.combat_search() 
	else 
		-> glavenus.combat_search() 
	endif 
	return 
endf 

def node_083
	>> node_070 
	return 
endf 

def node_084
	>> node_086 
	-> glavenus.jump_attack_high() 
	return 
endf 

def node_085
	>> node_086 
	-> glavenus.jump_attack() 
	return 
endf 

def node_086
	if self.angle_2d_cw_between(50,310) 
		*&
	else 
		*&
	endif 
	return 
endf 

def node_087
	if self.enraged() 
		>> node_088 
	elif self.fatigued() 
		>> node_089 
	else 
		>> node_090 
	endif 
	return 
endf 

def node_088
	if function#7F(2) 
		random (25) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	elif function#7F(6) 
		random (25) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	elif function#7F(8) 
		random (25) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	elif function#7F(9) 
		random (25) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	else 
		random (10) -> glavenus.turn_tail_attack_l() 
		elser (10) -> glavenus.nagiharai() 
		elser (10) -> glavenus.back_turn() 
		elser (15) -> glavenus.bite() 
		elser (15) -> glavenus.tail_fire_attack_back() 
		elser (10) -> glavenus.step_side_l() 
		elser (10) -> glavenus.step_side_r() 
		elser (20) -> glavenus.turn_bite() 
		endr 
	endif 
	return 
endf 

def node_089
	random (5) -> glavenus.jump_attack() 
	elser (10) -> glavenus.turn_tail_attack_l() 
	elser (15) -> glavenus.tired_wait() 
	elser (10) -> glavenus.nagiharai() 
	elser (15) -> glavenus.back_turn() 
	elser (15) -> glavenus.bite() 
	elser (5) -> glavenus.step_side_l() 
	elser (5) -> glavenus.step_side_r() 
	elser (20) -> glavenus.turn_bite() 
	endr 
	return 
endf 

def node_090
	if function#7F(2) 
		random (20) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (5) -> glavenus.step_back_short() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	elif function#7F(6) 
		random (20) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (5) -> glavenus.step_back_short() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	elif function#7F(8) 
		random (20) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (5) -> glavenus.step_back_short() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	elif function#7F(9) 
		random (20) -> glavenus.jump_attack() 
		elser (10) -> glavenus.turn_tail_attack_l() 
		elser (15) -> glavenus.nagiharai() 
		elser (5) -> glavenus.back_turn() 
		elser (10) -> glavenus.bite() 
		elser (10) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (5) -> glavenus.step_back_short() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	else 
		random (15) -> glavenus.turn_tail_attack_l() 
		elser (10) -> glavenus.nagiharai() 
		elser (10) -> glavenus.back_turn() 
		elser (15) -> glavenus.bite() 
		elser (15) -> glavenus.tail_fire_attack_back() 
		elser (5) -> glavenus.step_side_l() 
		elser (5) -> glavenus.step_side_r() 
		elser (10) -> glavenus.step_back_short() 
		elser (15) -> glavenus.turn_bite() 
		endr 
	endif 
	return 
endf 

