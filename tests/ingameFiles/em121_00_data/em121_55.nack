importactions Behemoth as behemoth

def node_000
	conclude 
endf 

def node_001
	>> node_002 
	return 
endf 

def node_002
	self.targetEnemy(16) 
	if self.distance_3d_to_target().leq(600) 
		return 
	else 
		-> behemoth.walk(2,1,5,3000,500) 
	endif 
	repeat 
endf 

def node_003
	self.targetArea(14) 
	if self.distance_3d_to_target().gt(1500) 
		>> node_007 
		repeat 
	else 
	endif 
	return 
endf 

def node_004
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1500) 
		>> node_007 
		repeat 
	else 
	endif 
	return 
endf 

def node_005
	-> behemoth.dash(5) 
	return 
endf 

def node_006
	-> behemoth.dash(1,5,0,2000) 
	return 
endf 

def node_007
	-> behemoth.dash(2,1,5,3000,550) 
	return 
endf 

def node_008
endf 

def node_009
	-> behemoth.dash(2,1,5,5000,1400) 
	return 
endf 

def node_010
	-> behemoth.dash(1,5,0,1000) 
	return 
endf 

def node_011
	-> behemoth.walk(5) 
	return 
endf 

def node_012
	-> behemoth.walk(1,5,0,2000) 
	return 
endf 

def node_013
	-> behemoth.walk(2,1,5,3000,550) 
	return 
endf 

def node_014
	-> behemoth.walk(2,1,5,3000,1400) 
	return 
endf 

def node_015
	if self.current_quest().is_rank(rank.AT) 
		>> node_028 
	else 
		-> behemoth.walk(2,1,5,3000,1400) 
	endif 
	return 
endf 

def node_016
	if self.current_quest().is_rank(rank.AT) 
		>> node_028 
	else 
		-> behemoth.dash(2,1,5,5000,1400) 
	endif 
	return 
endf 

def node_017
	-> behemoth.dying_walk(2,5,0,2000) 
	return 
endf 

def node_018
	if self.distance_3d_to_target().leq(700) 
		>> node_022 
	else 
		>> node_023 
	endif 
	return 
endf 

def node_019
	if self.angle_2d_cw_between(30,330) 
		-> behemoth.normal_turn() 
	else 
	endif 
	return 
endf 

def node_020
	if self.angle_2d_cw_between(60,300) 
		-> behemoth.normal_turn() 
	else 
	endif 
	return 
endf 

def node_021
	if self.angle_2d_cw_between(90,270) 
		-> behemoth.normal_turn() 
	else 
	endif 
	return 
endf 

def node_022
	-> behemoth.back_step() 
	return 
endf 

def node_023
	if self.angle_2d_cw_between(30,330) 
		>> node_026 
	else 
	endif 
	return 
endf 

def node_024
	if self.angle_2d_cw_between(60,300) 
		>> node_026 
	else 
	endif 
	return 
endf 

def node_025
	if self.angle_2d_cw_between(90,270) 
		>> node_026 
	else 
	endif 
	return 
endf 

def node_026
	if self.angle_2d_cw_between(270,90) 
		-> behemoth.combat_turn() 
	else 
		-> behemoth.normal_turn() 
	endif 
	return 
endf 

def node_027
	-> behemoth.ride_tired() 
	return 
endf 

def node_028
	-> behemoth.front_step() 
	return 
endf 

def node_029
endf 

def node_030
	-> behemoth.heal() 
	return 
endf 

def node_031
	-> behemoth.search() 
	return 
endf 

def node_032
	-> behemoth.search() 
	return 
endf 

def node_033
	-> behemoth.search() 
	return 
endf 

def node_034
	-> behemoth.damage_stun() 
	return 
endf 

def node_035
endf 

def node_036
	-> behemoth.discover() 
	return 
endf 

def node_037
	-> behemoth.discover() 
	return 
endf 

def node_038
	-> behemoth.refresh() 
	return 
endf 

def node_039
	-> behemoth.damage_ride_down() 
	return 
endf 

def node_040
	-> action#7F(3,0,0,150) 
	return 
endf 

def node_041
	random (33) 
				self.targetEnemy(21) @ parameter2:1000 
	elser (25) 
				self.targetEnemy(22) @ parameter2:1000 
	elser (18) 
				self.targetEnemy(11) @ parameter2:1000 
	elser (24) 
				self.targetEnemy(12) @ parameter2:1000 
	endr 
	return 
endf 

def node_042
	-> behemoth.ride_tired() 
	return 
endf 

def node_043
	-> behemoth.ride_wait() 
	return 
endf 

def node_044
	self.targetEnemy(target_em.last_attacker) 
	>> node_023 
	if self.mounted() 
		-> behemoth.ride_rage_head() 
	else 
		-> behemoth.ride_rage_head_lv2() 
	endif 
	return 
endf 

def node_045
	self.targetEnemy(target_em.last_attacker) 
	>> node_023 
	if self.mounted() 
		-> behemoth.ride_rage_body() 
	else 
		-> behemoth.ride_rage_body_lv2() 
	endif 
	return 
endf 

def node_046
endf 

def node_047
	if function#102() 
		function#104() 
		-> behemoth.mode_change() 
	else 
	endif 
	return 
endf 

def node_048
	if function#2D() 
	else 
		self.targetEnemy(48) 
	endif 
	if function#10F() 
		>> node_077 
	elif self.current_quest().is_rank(rank.AT) 
		>> node_076 
	else 
		>> node_075 
	endif 
	return 
endf 

def node_049
	function#107() 
	if [RegisterVar1 == 1] 
		if function#108(0,45) 
			if self.target(4) 
			else 
				function#109() 
				>> node_071 
			endif 
		else 
		endif 
	elif [RegisterVar1 == 2] 
		if function#108(0,20) 
			if self.target(4) 
			else 
				function#109() 
				>> node_071 
			endif 
		else 
		endif 
	elif [RegisterVar1 == 3] 
		if self.current_quest().is_rank(rank.AT) 
			if function#108(0,345) 
				if self.target(4) 
				else 
					if self.target(3) 
					else 
						function#109(315) 
						>> node_073 
					endif 
				endif 
			else 
			endif 
		else 
			function#109() 
		endif 
	elif [RegisterVar1 == 4] 
		if function#108(0,30) 
			if self.target(4) 
			else 
				function#109() 
				>> node_071 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_050
	if function#10A() 
		>> node_073 
	else 
	endif 
	return 
endf 

def node_051
	[RegisterVar1 |-] 
	if function#110(105,8) 
		[RegisterVar1 ++] 
	elif function#110(105,4) 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
	elif function#110(105,11) 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
	elif function#110(105,13) 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
	elif function#110(105,12) 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
	elif function#110(105,14) 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
		[RegisterVar1 ++] 
	else 
	endif 
	return 
endf 

def node_052
	if [RegisterVar1 == 3] 
		if self.target(3) 
		else 
			if function#103() 
				>> node_079 
			else 
				>> node_078 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_053
	if self.current_quest().is_rank(rank.AT) 
		if [RegisterVar1 == 4] 
			if [RegisterVar2 == 0] 
				if self.hp_percent().gt(20) 
					[RegisterVar2 ++] 
					>> node_073 
				else 
				endif 
			elif [RegisterVar2 == 1] 
				if self.hp_percent().gt(10) 
					[RegisterVar2 ++] 
					>> node_073 
				else 
				endif 
			else 
			endif 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_054
endf 

def node_055
	-> behemoth.rarm_nagi_attack() 
	return 
endf 

def node_056
	if self.angle_2d_cw_between(300,60) 
		-> behemoth.rarm_nagi_attack() 
	elif self.angle_2d_cw_between(120,240) 
		-> behemoth.tail_attack() 
	else 
		-> behemoth.side_scratch() 
	endif 
	return 
endf 

def node_057
	if self.angle_2d_cw_between(250,110) 
		-> behemoth.turn_attack_90() 
	else 
		-> behemoth.turn_attack_180() 
	endif 
	return 
endf 

def node_058
	>> node_024 
	-> behemoth.horn_attack() 
	return 
endf 

def node_059
	-> behemoth.side_tackle() 
	return 
endf 

def node_060
	-> behemoth.spin_attack() 
	return 
endf 

def node_061
	-> behemoth.body_press() 
	return 
endf 

def node_062
	>> node_025 
	-> behemoth.long_range_attack() 
	return 
endf 

def node_063
	>> node_025 
	-> behemoth.jump_attack() 
	return 
endf 

def node_064
	>> node_025 
	-> behemoth.standup_punch() 
	return 
endf 

def node_065
	>> node_025 
	-> behemoth.pinpoint_meteor() 
	return 
endf 

def node_066
	>> node_025 
	if function#103() 
		-> behemoth.pinpoint_meteor() 
	else 
		-> behemoth.pinpoint_meteor_multi() 
	endif 
	return 
endf 

def node_067
	-> behemoth.spell_cast() 
	return 
endf 

def node_068
	if self.current_quest().is_rank(rank.AT) 
		>> node_066 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_069
	if self.distance_3d_to_target().gt(1600) 
		>> node_028 
	else 
	endif 
	>> node_025 
	-> behemoth.ex_attack() 
	return 
endf 

def node_070
	if self.distance_3d_to_target().gt(4000) 
		>> node_009 
	elif self.distance_3d_to_target().gt(3000) 
		>> node_028 
	else 
	endif 
	if self.target.pinned() 
	else 
		-> behemoth.catch_attack() 
	endif 
	if self.target.pinned() 
		self.targetArea(9) @ parameter2:2000 
		-> behemoth.catch_throw() 
		function#10D() 
		function#104() 
		-> behemoth.mode_change() 
	else 
		-> behemoth.catch_attack_miss() 
	endif 
	return 
endf 

def node_071
	if function#103() 
	else 
		self.targetEnemy(50) 
		if self.current_quest().is_rank(rank.AT) 
			-> behemoth.maelstorm_multi() 
		else 
			-> behemoth.maelstorm() 
		endif 
	endif 
	return 
endf 

def node_072
	self.targetEnemy(50) 
	if self.target(4) 
	else 
		>> node_025 
		[RegisterVar0 ++] 
		-> behemoth.comet_meteor() 
	endif 
	return 
endf 

def node_073
	>> node_048 
	function#106() 
	-> behemoth.meteor_start() 
	return 
endf 

def node_074
	>> node_041 
	if self.current_quest().is_rank(rank.AT) 
		-> behemoth.maelstorm_multi() 
	else 
		-> behemoth.maelstorm() 
	endif 
	return 
endf 

def node_075
	if [RegisterVar0 == 0] 
		if self.hp_percent().gt(70) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 1] 
		if self.hp_percent().gt(65) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 2] 
		if self.hp_percent().gt(60) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 3] 
		if self.hp_percent().gt(50) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 4] 
		if self.hp_percent().gt(45) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 5] 
		if self.hp_percent().gt(40) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 6] 
		if self.hp_percent().gt(35) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 7] 
		if self.hp_percent().gt(10) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 8] 
		if self.hp_percent().gt(5) 
			>> node_072 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_076
	if [RegisterVar0 == 0] 
		if self.hp_percent().gt(100) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 1] 
		if self.hp_percent().gt(90) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 2] 
		if self.hp_percent().gt(65) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 3] 
		if self.hp_percent().gt(23) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 4] 
		if self.hp_percent().gt(13) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 5] 
		if self.hp_percent().gt(3) 
			>> node_072 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_077
	if [RegisterVar0 == 0] 
		if self.hp_percent().gt(20) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 1] 
		if self.hp_percent().gt(15) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 2] 
		if self.hp_percent().gt(10) 
			>> node_072 
		else 
		endif 
	elif [RegisterVar0 == 3] 
		if self.hp_percent().gt(5) 
			>> node_072 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_078
	if self.current_quest().is_rank(rank.AT) 
		if self.target.helpless_0() 
			random (80) >> node_070 
			elser (20) 
			endr 
		elif self.target.helpless_1() 
			random (95) >> node_070 
			elser (5) 
			endr 
		elif self.target(15) 
			random (100) >> node_070 
			elser (0) 
			endr 
		else 
		endif 
	else 
		if self.target.helpless_0() 
			random (52) >> node_070 
			elser (48) 
			endr 
		elif self.target.helpless_1() 
			random (75) >> node_070 
			elser (25) 
			endr 
		elif self.target(15) 
			random (90) >> node_070 
			elser (10) 
			endr 
		else 
		endif 
	endif 
	return 
endf 

def node_079
	if self.current_quest().is_rank(rank.AT) 
		if self.target.helpless_0() 
			random (75) >> node_069 
			elser (25) 
			endr 
		elif self.target.helpless_1() 
			random (85) >> node_069 
			elser (15) 
			endr 
		elif self.target(15) 
			random (95) >> node_069 
			elser (5) 
			endr 
		else 
		endif 
	else 
	endif 
	return 
endf 

