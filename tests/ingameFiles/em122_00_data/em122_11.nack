importactions Beotodus as beotodus
importlibrary Global as Global

def node_000
	>> Global.node_001 
	if self.fatigued() 
		random (30) >> Global.node_104 
		elser (70) 
		endr 
	else 
	endif 
	if self.mounted() 
		random (55) >> node_001 
		elser (45) >> node_002 
		endr 
	else 
		random (40) >> node_001 
		elser (60) >> node_002 
		endr 
	endif 
	reset 
endf 

def node_001
	>> node_014 
	function#A8() 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#A9(0,1) 
		self.target_on_part(0) >> node_003 => repeat 
		self.target_on_part(1) >> node_006 => repeat 
	elif function#A9(0,2) 
		self.target_on_part(0) >> node_003 => repeat 
		self.target_on_part(1) >> node_006 => repeat 
	elif function#A9(0,3) 
		>> node_009 => repeat 
	elif function#A9(0,4) 
		self.target_on_part(0) >> node_016 => repeat 
		self.target_on_part(1) >> node_016 => repeat 
	else 
		function#A8(1) 
		return 
	endif 
	return 
endf 

def node_002
	>> node_014 
	function#A8() 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#A9(0,1) 
		>> node_009 => repeat 
	elif function#A9(0,2) 
		self.target_on_part(0) >> node_003 => repeat 
		self.target_on_part(1) >> node_006 => repeat 
	elif function#A9(0,3) 
		>> node_009 => repeat 
	elif function#A9(0,4) 
		self.target_on_part(0) >> node_016 => repeat 
		self.target_on_part(1) >> node_016 => repeat 
	else 
		function#A8(1) 
		return 
	endif 
	return 
endf 

def node_003
	if self.mounted() 
		>> node_004 
	else 
		>> node_005 
	endif 
	return 
endf 

def node_004
	>> Global.node_027 
	return 
endf 

def node_005
	-> beotodus.ride_rage_head() 
	return 
endf 

def node_006
	if self.mounted() 
		>> node_007 
	else 
		>> node_008 
	endif 
	return 
endf 

def node_007
	>> Global.node_028 
	return 
endf 

def node_008
	-> beotodus.ride_rage_body() 
	return 
endf 

def node_009
	if self.mounted() 
		>> node_010 
	else 
		>> node_011 
	endif 
	return 
endf 

def node_010
	if function#29() 
		self.targetArea(7) 
		>> node_013 
		self.targetArea(15) 
		self.target_on_part(0) -> beotodus.ride_rage_crash_head() => return 
		self.target_on_part(1) -> beotodus.ride_rage_crash_body() => return 
	else 
		self.target_on_part(0) >> node_005 => return 
		self.target_on_part(1) >> node_008 => return 
	endif 
	return 
endf 

def node_011
	if function#29() 
		self.targetArea(7) 
		>> node_013 
		self.targetArea(15) 
		self.target_on_part(0) -> beotodus.ride_rage_crash_head_lv2() => return 
		self.target_on_part(1) -> beotodus.ride_rage_crash_body_lv2() => return 
	else 
		>> node_012 => return 
	endif 
	return 
endf 

def node_012
	>> node_018 
	>> Global.node_037 
	return 
endf 

def node_013
	if self.distance_2d_to_target().leq(500) 
		>> Global.node_017 
	elif self.distance_2d_to_target().gt(2000) 
		>> Global.node_127 
		repeat 
	else 
		>> Global.node_127 
	endif 
	return 
endf 

def node_014
	if function#3B() 
		if self.mount_staggered_twice() 
			>> node_015 
		else 
		endif 
	else 
		if self.mount_finisher_ready() 
			if self.mounted() 
				random (65) >> node_015 
				elser (35) 
				endr 
			else 
				random (100) >> node_015 
				elser (0) 
				endr 
			endif 
		elif self.mount_stabbed() 
			if self.mounted() 
				random (50) >> node_015 
				elser (50) 
				endr 
			else 
				random (100) >> node_015 
				elser (0) 
				endr 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_015
	-> beotodus.ride_tired() 
	return 
endf 

def node_016
	if self.mounted() 
		>> node_017 
	else 
	endif 
	return 
endf 

def node_017
	-> beotodus.ride_wait() 
	return 
endf 

def node_018
	random (20) >> node_019 
	elser (80) >> node_020 
	endr 
	>> node_024 
	return 
endf 

def node_019
	self.targetEnemy(21) @ parameter2:1000 
	return 
endf 

def node_020
	self.targetEnemy(22) @ parameter2:1000 
	return 
endf 

def node_021
	random (48) >> node_022 
	elser (52) >> node_023 
	endr 
	return 
endf 

def node_022
	self.targetEnemy(12) @ parameter2:1000 
	return 
endf 

def node_023
	self.targetEnemy(11) @ parameter2:1000 
	return 
endf 

def node_024
	if self.angular_17(300,60) 
		>> Global.node_003 
	else 
	endif 
	return 
endf 

