importactions Fulgur_Anjanath as fulgur_anjanath

def node_000
	conclude 
endf 

def node_001
	>> node_009 
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.vertical_distance_to_target().leq(1000) 
				if self.distance_3d_to_target().leq(3000) 
					if self.target.in_combat() 
						>> node_002 
					else 
						>> node_003 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
		if self.defense_downed() 
			>> node_008 
		else 
		endif 
	endif 
	return 
endf 

def node_002
	if function#30(2) 
		*&
		random (25) 
		elser (10) >> node_004 
		elser (50) >> node_007 
		elser (15) >> node_006 
		endr 
	elif function#30() 
		random (35) 
		elser (0) >> node_004 
		elser (55) >> node_007 
		elser (0) >> node_006 
		elser (10) >> node_007 
					>> node_006 
		endr 
	else 
		random (35) 
		elser (10) >> node_004 
		elser (55) >> node_007 
		elser (0) >> node_006 
		endr 
	endif 
	return 
endf 

def node_003
	if function#30(2) 
		random (35) 
		elser (40) >> node_004 
		elser (10) >> node_007 
		elser (15) >> node_006 
		endr 
	else 
		random (35) 
		elser (55) >> node_004 
		elser (10) >> node_007 
		elser (0) >> node_006 
		endr 
	endif 
	return 
endf 

def node_004
	if function#41() 
	else 
		>> node_012 
		-> fulgur_anjanath.threat_short() 
	endif 
	return 
endf 

def node_005
	if function#41() 
	else 
		>> node_012 
		-> fulgur_anjanath.threat_fly() 
	endif 
	return 
endf 

def node_006
	if function#41() 
	else 
		if self.target_is(em.Rathalos) 
			if self.target(39) 
				self.force_area_change2() 
			else 
				>> node_004 
			endif 
		elif self.target_is(em.Azure_Rathalos) 
			if self.target(39) 
				self.force_area_change2() 
			else 
				>> node_004 
			endif 
		else 
			self.force_area_change2() 
		endif 
	endif 
	return 
endf 

def node_007
	if function#41() 
	else 
		if self.vertical_distance_to_target().gt(500) 
			>> node_031 
		elif self.distance_3d_to_target().gt(2500) 
			if self.current_quest().is_rank(rank.MR) 
				random (20) >> node_051 
				elser (30) >> node_050 
				elser (50) >> node_031 
				endr 
			else 
				*&
				random (40) >> node_051 
				elser (60) >> node_031 
				endr 
			endif 
			>> node_051 
		endif 
	endif 
	return 
endf 

def node_008
	if function#31(49,3000) 
		self.targetEnemy(target_em.closest_entity) 
		random (25) 
					>> node_004 
		elser (75) 
		endr 
	else 
	endif 
	return 
endf 

def node_009
	if self.quest_id(1201) 
		>> node_010 
	elif function#38(0,10004) 
		>> node_010 
	else 
	endif 
	return 
endf 

def node_010
	if function#CE(1,1) 
		function#CF() 
	else 
	endif 
	return 
endf 

def node_011
	if self.angle_2d_cw_between(60,300) 
		if self.in_combat() 
			-> fulgur_anjanath.turn() 
		elif self.alert_out_of_combat() 
			-> fulgur_anjanath.turn() 
		else 
			-> fulgur_anjanath.normal_turn() 
		endif 
	else 
	endif 
	return 
endf 

def node_012
	if self.distance_3d_to_target().leq(550) 
		-> fulgur_anjanath.back_turn() 
	else 
	endif 
	if self.angle_2d_cw_between(30,330) 
		if self.in_combat() 
			-> fulgur_anjanath.turn() 
		else 
			-> fulgur_anjanath.normal_turn() 
		endif 
	else 
	endif 
	return 
endf 

def node_013
	if self.fatigued() 
		-> fulgur_anjanath.tired_dash(2,1,5,1500,800) 
	else 
		-> fulgur_anjanath.dash(2,1,5,1500,800) 
	endif 
	return 
endf 

def node_014
	if self.fatigued() 
		-> fulgur_anjanath.tired_dash(2,1,5,3000,800) 
	else 
		-> fulgur_anjanath.dash(2,1,5,3000,800) 
	endif 
	return 
endf 

def node_015
	if self.fatigued() 
		-> fulgur_anjanath.tired_walk(2,1,5,1500,800) 
	else 
		-> fulgur_anjanath.walk(2,1,5,1500,800) 
	endif 
	return 
endf 

def node_016
	if self.distance_3d_to_target().leq(150) 
		>> node_017 
	elif self.distance_3d_to_target().leq(550) 
		>> node_018 
	elif self.distance_3d_to_target().leq(900) 
		>> node_019 
	elif self.distance_3d_to_target().leq(2000) 
		>> node_020 
	else 
		>> node_020 
	endif 
	return 
endf 

def node_017
	-> fulgur_anjanath.charged_turn_bite_near() 
	return 
endf 

def node_018
	if self.angle_2d_cw_between(345,15) 
		-> fulgur_anjanath.charged_turn_bite_near() 
	elif self.angle_2d_cw_between(15,40) 
		-> fulgur_anjanath.charged_round_bite() 
	elif self.angle_2d_cw_between(40,110) 
		-> fulgur_anjanath.charged_round_bite_short() 
	elif self.angle_2d_cw_between(110,250) 
		-> fulgur_anjanath.charged_turn_bite_behind() 
	elif self.angle_2d_cw_between(250,320) 
		-> fulgur_anjanath.charged_round_bite_short() 
	else 
		-> fulgur_anjanath.charged_round_bite() 
	endif 
	return 
endf 

def node_019
	-> fulgur_anjanath.charged_bite() 
	return 
endf 

def node_020
	if self.distance_3d_to_target().leq(1300) 
		-> fulgur_anjanath.charged_step_bite() 
	else 
		-> fulgur_anjanath.dash(1,0,0,650) 
		self.distance_3d_to_target().gt(1100) -> fulgur_anjanath.charged_step_bite() 
		self.distance_3d_to_target().leq(1100) -> fulgur_anjanath.charged_bite() 
	endif 
	return 
endf 

def node_021
	if self.angle_2d_cw_between(330,30) 
		-> fulgur_anjanath.charged_dash_bite() 
	else 
		*&
		-> fulgur_anjanath.charged_dash_bite() 
	endif 
	return 
endf 

def node_022
	if self.distance_3d_to_target().leq(550) 
		-> fulgur_anjanath.charged_petit_bite_near() 
	elif self.distance_3d_to_target().leq(1100) 
		-> fulgur_anjanath.charged_petit_bite() 
	else 
		>> node_013 
		-> fulgur_anjanath.charged_petit_bite() 
	endif 
	return 
endf 

def node_023
	if self.distance_3d_to_target().leq(550) 
		-> fulgur_anjanath.charged_cut_bite_near() 
	elif self.distance_3d_to_target().leq(1100) 
		-> fulgur_anjanath.charged_cut_bite() 
	else 
		>> node_013 
		-> fulgur_anjanath.charged_cut_bite() 
	endif 
	return 
endf 

def node_024
	if self.angle_2d_cw_between(0,170) 
		-> fulgur_anjanath.charged_side_bite() 
	elif self.angle_2d_cw_between(190,0) 
		-> fulgur_anjanath.charged_side_bite() 
	else 
		-> fulgur_anjanath.charged_side_bite() 
	endif 
	return 
endf 

def node_025
	-> fulgur_anjanath.tail_wind() 
	return 
endf 

def node_026
	>> node_012 
	-> fulgur_anjanath.charged_rush_bite() 
	return 
endf 

def node_027
	-> fulgur_anjanath.charged_bite_2ren() 
	return 
endf 

def node_028
	-> fulgur_anjanath.charged_bite_2ren_combo() 
	-> fulgur_anjanath.charged_bite_3ren() 
	return 
endf 

def node_029
	-> fulgur_anjanath.side_kick() 
	return 
endf 

def node_030
	-> fulgur_anjanath.ride_rage_tail() 
	return 
endf 

def node_031
	>> node_012 
	-> fulgur_anjanath.jump_attack_2() 
	return 
endf 

def node_032
	if self.distance_3d_to_target().leq(100) 
		>> node_016 
	elif self.angle_2d_cw_between(340,20) 
		>> node_016 
	else 
		-> fulgur_anjanath.side_tackle() 
	endif 
	return 
endf 

def node_033
	>> node_012 
	-> fulgur_anjanath.mid_range_attack() 
	return 
endf 

def node_034
	>> node_012 
	-> fulgur_anjanath.nose_breath_in() 
	return 
endf 

def node_035
	-> fulgur_anjanath.tired() 
	return 
endf 

def node_036
	>> node_012 
	random (55) -> fulgur_anjanath.predator_walk_l() 
	elser (45) -> fulgur_anjanath.predator_walk_r() 
	endr 
	return 
endf 

def node_037
	if self.target(0) 
		>> node_039 
	else 
		>> node_039 
	endif 
	reset 
endf 

def node_038
	-> fulgur_anjanath.wall_wait() 
	reset 
endf 

def node_039
	-> fulgur_anjanath.dash() 
	return 
endf 

def node_040
	if function#35(2) 
		self.targetArea(target_area.global_center) 
		>> node_041 
	elif function#35(1) 
		-> fulgur_anjanath.climb_move() 
	else 
		-> fulgur_anjanath.wall_wait() 
	endif 
	return 
endf 

def node_041
	if self.above_target() 
		-> fulgur_anjanath.climb_end_walk() 
	else 
		-> fulgur_anjanath.climb_end_jump() 
	endif 
	return 
endf 

def node_042
	self.targetArea(14) 
	if self.distance_3d_to_target().gt(600) 
		>> node_014 
		repeat 
	else 
	endif 
	return 
endf 

def node_043
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1000) 
		>> node_013 
		repeat 
	else 
	endif 
	return 
endf 

def node_044
	if function#41() 
		>> node_013 => repeat 
	else 
	endif 
	return 
endf 

def node_045
	[RegisterVar0 ++] 
	if [RegisterVar0 <= 10] 
		random (99) >> node_047 
		elser (1) 
		endr 
	elif [RegisterVar0 <= 7] 
		random (90) >> node_047 
		elser (10) 
		endr 
	elif [RegisterVar0 <= 5] 
		random (70) >> node_047 
		elser (30) 
		endr 
	else 
	endif 
	return 
endf 

def node_046
	[RegisterVar0 ++] 
	if self.current_quest().is_rank(rank.MR) 
		if [RegisterVar0 == 5] 
			>> node_049 
		else 
		endif 
	else 
		if function#B9() 
			if [RegisterVar0 == 5] 
				>> node_049 
			else 
			endif 
		else 
			if [RegisterVar0 == 5] 
				>> node_048 
			elif [RegisterVar0 <= 6] 
				>> node_049 
			else 
			endif 
		endif 
	endif 
	return 
endf 

def node_047
	function#F5() 
	[RegisterVar0 |-] 
	-> fulgur_anjanath.breath_charge() 
	return 
endf 

def node_048
	>> node_017 
	-> fulgur_anjanath.breath_sign() 
	return 
endf 

def node_049
	[RegisterVar0 |-] 
	if self.current_quest().is_rank(rank.MR) 
		-> fulgur_anjanath.die_down() 
	else 
		-> fulgur_anjanath.breath_shoot_in() 
		if function#B9() 
		else 
			-> fulgur_anjanath.reflesh() 
		endif 
	endif 
	return 
endf 

def node_050
	if self.angle_2d_cw_between(90,270) 
		-> fulgur_anjanath.turn() 
	else 
	endif 
	-> fulgur_anjanath.asyu_nose_breath() 
	return 
endf 

def node_051
	if self.distance_3d_to_target().leq(150) 
		>> node_052 
	elif self.distance_3d_to_target().leq(550) 
		>> node_053 
	elif self.distance_3d_to_target().leq(900) 
		>> node_054 
	elif self.distance_3d_to_target().leq(2000) 
		>> node_055 
	else 
		>> node_055 
	endif 
	return 
endf 

def node_052
	-> fulgur_anjanath.asyu_turn_bite_near() 
	return 
endf 

def node_053
	if self.angle_2d_cw_between(345,15) 
		-> fulgur_anjanath.asyu_turn_bite_near() 
	elif self.angle_2d_cw_between(15,40) 
		-> fulgur_anjanath.asyu_round_bite() 
	elif self.angle_2d_cw_between(40,110) 
		-> fulgur_anjanath.asyu_round_bite_short() 
	elif self.angle_2d_cw_between(110,250) 
		-> fulgur_anjanath.asyu_turn_bite_behind() 
	elif self.angle_2d_cw_between(250,320) 
		-> fulgur_anjanath.asyu_round_bite_short() 
	else 
		-> fulgur_anjanath.asyu_round_bite() 
	endif 
	return 
endf 

def node_054
	-> fulgur_anjanath.asyu_bite() 
	return 
endf 

def node_055
	if self.distance_3d_to_target().leq(1300) 
		-> fulgur_anjanath.asyu_step_bite() 
	else 
		-> fulgur_anjanath.dash(1,0,0,650) 
		self.distance_3d_to_target().gt(1100) -> fulgur_anjanath.asyu_step_bite() 
		self.distance_3d_to_target().leq(1100) -> fulgur_anjanath.charged_bite() 
	endif 
	return 
endf 

def node_056
	if self.angle_2d_cw_between(330,30) 
		-> fulgur_anjanath.charged_dash_bite() 
	else 
		*&
		-> fulgur_anjanath.charged_dash_bite() 
	endif 
	return 
endf 

