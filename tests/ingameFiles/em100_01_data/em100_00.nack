importactions Fulgur_Anjanath as fulgur_anjanath
importlibrary Global as Global

def node_000
	>> node_098 
	if self.target.pinned() 
		>> node_046 
	else 
	endif 
	if function#105() 
		[RegisterVar0 ++] 
		-> fulgur_anjanath.asyu_charge_start() 
	else 
	endif 
	if self.target.helpless_1() 
		>> node_021 
	else 
	endif 
	if function#45() 
	else 
		>> Global.node_001 
	endif 
	>> node_061 
	if self.target(4) 
		>> node_062 
	elif self.target(3) 
		>> node_062 
	elif self.target(55) 
		>> node_070 
	elif function#41() 
		>> Global.node_037 
	elif self.target(12) 
		>> node_069 
	elif self.target(14) 
		>> node_065 
	elif self.target(11) 
		>> node_055 
	elif self.target(0) @ parameter2:1 
		>> node_064 
	elif self.target(0) 
		>> node_066 
	elif [RegisterVar3 += 1] 
		>> node_063 
	elif self.distance_3d_to_target().leq(500) 
		if self.enraged() >> node_007 
		elif self.fatigued() >> node_013 
		endwith >> node_001 
	elif self.distance_3d_to_target().leq(600) 
		if self.enraged() >> node_008 
		elif self.fatigued() >> node_014 
		endwith >> node_002 
	elif self.distance_3d_to_target().leq(1200) 
		if self.enraged() >> node_009 
		elif self.fatigued() >> node_015 
		endwith >> node_003 
	elif self.distance_3d_to_target().leq(2400) 
		if self.enraged() >> node_010 
		elif self.fatigued() >> node_016 
		endwith >> node_010 
	elif self.distance_3d_to_target().leq(5000) 
		if self.enraged() >> node_011 
		elif self.fatigued() >> node_017 
		endwith >> node_005 
	else 
		if self.enraged() >> node_012 
		elif self.fatigued() >> node_018 
		endwith >> node_006 
	endif 
	reset 
endf 

def node_001
	if function#103() 
		random (20) >> node_086 
		elser (0) >> node_039 
		elser (8) >> node_092 
		elser (12) >> node_093 
		elser (3) >> node_031 
		elser (0) >> node_042 
		elser (5) >> node_078 
		elser (0) >> node_032 
		elser (6) >> node_090 
		elser (10) >> node_096 
		elser (18) >> node_097 
		elser (18) >> node_091 
		elser (0) >> node_041 
		endr 
		>> node_080 
	elif function#104() 
		random (15) >> node_086 
		elser (4) >> node_039 
		elser (18) >> node_025 
		elser (12) >> node_031 
		elser (8) >> node_042 
		elser (12) >> node_078 
		elser (5) >> node_032 
		elser (14) >> node_090 
		elser (12) >> node_091 
		elser (0) >> node_041 
		endr 
	else 
		random (20) >> node_036 
		elser (24) >> node_039 
		elser (23) >> node_025 
		elser (16) >> node_031 
		elser (10) >> node_042 
		elser (0) >> node_078 
		elser (7) >> node_032 
		elser (0) >> node_041 
		endr 
	endif 
	return 
endf 

def node_002
	if function#103() 
		random (0) >> node_043 
		elser (14) >> node_034 
		elser (16) >> node_078 
		elser (0) >> node_045 
		elser (8) >> node_092 
		elser (12) >> node_093 
		elser (0) >> node_039 
		elser (8) >> node_077 
		elser (6) >> node_089 
		elser (20) >> node_090 
		elser (16) >> node_091 
		elser (0) >> node_041 
		endr 
		>> node_080 
	elif function#104() 
		random (5) >> node_043 
		elser (16) >> node_034 
		elser (12) >> node_078 
		elser (8) >> node_045 
		elser (16) >> node_025 
		elser (4) >> node_039 
		elser (10) >> node_077 
		elser (5) >> node_089 
		elser (14) >> node_090 
		elser (10) >> node_091 
		elser (0) >> node_041 
		endr 
	else 
		random (10) >> node_043 
		elser (28) >> node_034 
		elser (8) >> node_078 
		elser (18) >> node_045 
		elser (16) >> node_025 
		elser (8) >> node_039 
		elser (12) >> node_077 
		elser (0) >> node_041 
		endr 
	endif 
	return 
endf 

def node_003
	if function#103() 
		random (0) >> node_043 
		elser (0) >> node_044 
		elser (18) >> node_025 
		elser (0) >> node_055 
		elser (5) >> node_041 
		elser (6) >> node_092 
		elser (15) >> node_077 
		elser (12) >> node_089 
		elser (22) >> node_088 
		elser (22) >> node_095 
		elser (0) >> node_060 
		endr 
		>> node_080 
	elif function#104() 
		random (6) >> node_043 
		elser (4) >> node_044 
		elser (8) >> node_055 
		elser (8) >> node_041 
		elser (18) >> node_025 
		elser (10) >> node_077 
		elser (12) >> node_089 
		elser (17) >> node_088 
		elser (14) >> node_095 
		elser (3) >> node_060 
		endr 
	else 
		random (15) >> node_043 
		elser (15) >> node_044 
		elser (12) >> node_055 
		elser (10) >> node_041 
		elser (20) >> node_025 
		elser (25) >> node_077 
		elser (3) >> node_060 
		endr 
	endif 
	return 
endf 

def node_004
	if function#103() 
		random (0) >> node_043 
		elser (0) >> node_044 
		elser (30) >> node_087 
		elser (16) >> node_055 
		elser (6) >> node_041 
		elser (0) >> node_092 
		elser (14) >> node_077 
		elser (34) >> node_089 
		elser (0) >> node_088 
		elser (0) >> node_060 
		endr 
		>> node_080 
	elif function#104() 
		random (6) >> node_043 
		elser (5) >> node_044 
		elser (20) >> node_087 
		elser (16) >> node_055 
		elser (10) >> node_041 
		elser (0) >> node_025 
		elser (18) >> node_077 
		elser (22) >> node_089 
		elser (0) >> node_088 
		elser (3) >> node_060 
		endr 
	else 
		random (15) >> node_043 
		elser (15) >> node_044 
		elser (12) >> node_055 
		elser (10) >> node_041 
		elser (20) >> node_025 
		elser (25) >> node_077 
		elser (3) >> node_060 
		endr 
	endif 
	return 
endf 

def node_005
	if function#103() 
		random (85) >> node_055 
		elser (15) >> node_077 
		endr 
	elif function#104() 
		random (85) >> node_055 
		elser (15) >> node_077 
		endr 
	else 
		random (85) >> node_055 
		elser (15) >> node_077 
		endr 
	endif 
	return 
endf 

def node_006
	>> node_055 
	return 
endf 

def node_007
	if function#103() 
		random (20) >> node_086 
		elser (8) >> node_092 
		elser (12) >> node_093 
		elser (0) >> node_031 
		elser (12) >> node_078 
		elser (0) >> node_042 
		elser (0) >> node_032 
		elser (8) >> node_096 
		elser (18) >> node_097 
		elser (22) >> node_091 
		elser (0) >> node_041 
		endr 
		>> node_080 
	elif function#104() 
		random (16) >> node_086 
		elser (20) >> node_025 
		elser (4) >> node_031 
		elser (14) >> node_078 
		elser (6) >> node_042 
		elser (8) >> node_032 
		elser (17) >> node_090 
		elser (15) >> node_091 
		elser (0) >> node_041 
		endr 
	else 
		random (10) >> node_036 
		elser (9) >> node_039 
		elser (22) >> node_025 
		elser (17) >> node_031 
		elser (10) >> node_078 
		elser (18) >> node_042 
		elser (9) >> node_032 
		elser (5) >> node_041 
		endr 
	endif 
	return 
endf 

def node_008
	if function#103() 
		random (0) >> node_043 
		elser (0) >> node_085 
		elser (0) >> node_083 
		elser (8) >> node_084 
		elser (8) >> node_078 
		elser (8) >> node_092 
		elser (13) >> node_093 
		elser (0) >> node_045 
		elser (5) >> node_025 
					>> node_034 
		elser (0) >> node_025 
					>> node_031 
		elser (0) >> node_040 
		elser (0) >> node_077 
		elser (6) >> node_094 
		elser (6) >> node_089 
		elser (0) >> node_090 
		elser (8) >> node_096 
		elser (20) >> node_097 
		elser (18) >> node_091 
		elser (0) >> node_041 
		endr 
		>> node_080 
	elif function#104() 
		random (5) >> node_043 
		elser (20) >> node_034 
		elser (12) >> node_078 
		elser (6) >> node_045 
		elser (12) >> node_025 
		elser (4) >> node_040 
		elser (6) >> node_077 
		elser (13) >> node_089 
		elser (12) >> node_090 
		elser (10) >> node_091 
		elser (0) >> node_041 
		endr 
	else 
		random (10) >> node_043 
		elser (28) >> node_034 
		elser (12) >> node_078 
		elser (17) >> node_045 
		elser (16) >> node_092 
		elser (5) >> node_040 
		elser (10) >> node_077 
		elser (2) >> node_041 
		endr 
	endif 
	return 
endf 

def node_009
	if function#103() 
		random (0) >> node_043 
		elser (0) >> node_044 
		elser (8) >> node_025 
		elser (0) >> node_055 
		elser (0) >> node_041 
		elser (0) >> node_077 
		elser (0) >> node_077 
					>> node_034 
		elser (0) >> node_077 
					>> node_043 
		elser (0) >> node_024 
		elser (10) >> node_089 
		elser (30) >> node_088 
		elser (26) >> node_095 
		elser (12) >> node_092 
		elser (14) >> node_093 
		endr 
		>> node_080 
	elif function#104() 
		random (6) >> node_043 
		elser (0) >> node_044 
		elser (16) >> node_025 
		elser (8) >> node_055 
		elser (9) >> node_041 
		elser (14) >> node_077 
		elser (0) >> node_024 
		elser (10) >> node_089 
		elser (22) >> node_088 
		elser (15) >> node_095 
		endr 
	else 
		random (19) >> node_043 
		elser (14) >> node_044 
		elser (6) >> node_055 
		elser (14) >> node_041 
		elser (27) >> node_077 
		elser (0) >> node_024 
		elser (20) >> node_025 
		endr 
	endif 
	return 
endf 

def node_010
	if function#103() 
		random (0) >> node_043 
		elser (0) >> node_044 
		elser (28) >> node_087 
		elser (15) >> node_055 
		elser (4) >> node_041 
		elser (16) >> node_077 
		elser (0) >> node_077 
					>> node_034 
		elser (0) >> node_077 
					>> node_043 
		elser (0) >> node_024 
		elser (37) >> node_089 
		elser (0) >> node_088 
		elser (0) >> node_092 
		endr 
		>> node_080 
	elif function#104() 
		random (6) >> node_043 
		elser (4) >> node_044 
		elser (26) >> node_087 
		elser (10) >> node_055 
		elser (10) >> node_041 
		elser (20) >> node_077 
		elser (0) >> node_024 
		elser (24) >> node_089 
		elser (0) >> node_088 
		elser (0) >> node_025 
		endr 
	else 
		random (19) >> node_043 
		elser (14) >> node_044 
		elser (6) >> node_055 
		elser (14) >> node_041 
		elser (27) >> node_077 
		elser (0) >> node_024 
		elser (20) >> node_025 
		endr 
	endif 
	return 
endf 

def node_011
	if function#103() 
		random (50) >> node_055 
		elser (35) >> node_077 
		elser (15) >> node_041 
		endr 
	elif function#104() 
		random (60) >> node_055 
		elser (25) >> node_077 
		elser (15) >> node_041 
		endr 
	else 
		random (66) >> node_055 
		elser (18) >> node_077 
		elser (16) >> node_041 
		endr 
	endif 
	return 
endf 

def node_012
	>> node_055 
	return 
endf 

def node_013
	random (35) >> node_036 
	elser (15) >> node_023 
	elser (40) >> node_025 
	elser (5) >> node_032 
	elser (5) >> node_059 
	endr 
	return 
endf 

def node_014
	random (5) >> node_043 
	elser (31) >> node_045 
	elser (30) >> node_025 
	elser (29) >> node_023 
	elser (5) >> node_059 
	endr 
	return 
endf 

def node_015
	random (5) >> node_043 
	elser (9) >> node_044 
	elser (16) >> node_055 
	elser (15) >> node_023 
	elser (30) >> node_025 
	elser (20) >> node_060 
	elser (5) >> node_059 
	endr 
	return 
endf 

def node_016
	random (5) >> node_043 
	elser (9) >> node_044 
	elser (16) >> node_055 
	elser (15) >> node_023 
	elser (30) >> node_025 
	elser (20) >> node_060 
	elser (5) >> node_059 
	endr 
	return 
endf 

def node_017
	random (90) >> node_055 
	elser (10) >> node_059 
	endr 
	return 
endf 

def node_018
	random (85) >> node_055 
	elser (15) >> node_059 
	endr 
	return 
endf 

def node_019
	if self.angle_2d_cw_between(30,330) 
		-> fulgur_anjanath.turn() 
	else 
		*&
	endif 
	return 
endf 

def node_020
	if self.angle_2d_cw_between(120,240) 
		-> fulgur_anjanath.turn() 
	else 
		*&
	endif 
	return 
endf 

def node_021
	if self.distance_3d_to_target().gt(3000) 
	elif self.vertical_distance_to_target().gt(500) 
	elif function#41() 
	elif self.target(0) 
	elif self.target(11) 
	elif self.target(14) 
	else 
		if function#103() 
			if self.fatigued() 
			elif self.enraged() 
				if self.target.stunned_0() 
					if [RegisterVar0 -= 5] 
						>> node_079 
					else 
						if self.distance_2d_to_target().leq(600) 
							random (20) >> node_078 
							elser (45) >> node_091 
							elser (35) 
							endr 
						else 
							random (65) >> node_025 
							elser (0) >> node_045 
							elser (35) 
							endr 
						endif 
					endif 
				else 
					if self.distance_2d_to_target().leq(600) 
						random (20) >> node_078 
						elser (45) >> node_091 
						elser (35) 
						endr 
					else 
						random (65) >> node_025 
						elser (0) >> node_045 
						elser (35) 
						endr 
					endif 
				endif 
			else 
				if self.target.stunned_0() 
					if function#B9() 
						>> node_079 
					else 
						if self.distance_2d_to_target().leq(600) 
							random (40) >> node_078 
							elser (0) >> node_045 
							elser (60) 
							endr 
						else 
							random (35) >> node_025 
							elser (0) >> node_045 
							elser (65) 
							endr 
						endif 
					endif 
				else 
					if self.distance_2d_to_target().leq(600) 
						random (40) >> node_078 
						elser (0) >> node_045 
						elser (60) 
						endr 
					else 
						random (35) >> node_025 
						elser (0) >> node_045 
						elser (65) 
						endr 
					endif 
				endif 
			endif 
		elif function#104() 
			if self.distance_2d_to_target().leq(600) 
				random (65) >> node_078 
				elser (0) >> node_045 
				elser (35) 
				endr 
			else 
				random (65) >> node_025 
				elser (0) >> node_045 
				elser (35) 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(600) 
				random (40) >> node_078 
				elser (0) >> node_045 
				elser (60) 
				endr 
			else 
				random (35) >> node_025 
				elser (0) >> node_045 
				elser (65) 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

def node_022
	if self.distance_3d_to_target().gt(3500) 
	elif self.vertical_distance_to_target().gt(500) 
	elif function#41() 
	elif self.target(0) 
	elif self.target(11) 
	elif self.target(14) 
	endif 
	>> node_047 
	return 
endf 

def node_023
	[RegisterVar1 ++] 
	if self.distance_3d_to_target().leq(450) 
		-> fulgur_anjanath.charged_petit_bite_near() 
	elif self.distance_3d_to_target().leq(1100) 
		-> fulgur_anjanath.charged_petit_bite() 
	else 
		>> node_055 
		-> fulgur_anjanath.charged_petit_bite() 
	endif 
	return 
endf 

def node_024
	[RegisterVar1 ++] 
	if self.distance_3d_to_target().leq(450) 
		-> fulgur_anjanath.charged_cut_bite_near() 
	elif self.distance_3d_to_target().leq(1100) 
		-> fulgur_anjanath.charged_cut_bite() 
	else 
		>> node_055 
		-> fulgur_anjanath.charged_cut_bite() 
	endif 
	return 
endf 

def node_025
	if self.target(55) 
		>> node_027 
	else 
		if self.distance_3d_to_target().leq(150) 
			>> node_026 
		elif self.distance_3d_to_target().leq(550) 
			>> node_027 
		elif self.distance_3d_to_target().leq(900) 
			>> node_028 
		elif self.distance_3d_to_target().leq(2000) 
			>> node_029 
		else 
			>> node_029 
		endif 
	endif 
	return 
endf 

def node_026
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_turn_bite_near() 
	return 
endf 

def node_027
	[RegisterVar1 ++] 
	if self.angle_2d_cw_between(345,15) 
		-> fulgur_anjanath.asyu_turn_bite_near() 
	elif self.angle_2d_cw_between(15,40) 
		-> fulgur_anjanath.asyu_round_bite() 
	elif self.angle_2d_cw_between(40,110) 
		-> fulgur_anjanath.asyu_round_bite_short() 
	elif self.angle_2d_cw_between(110,250) 
		-> fulgur_anjanath.asyu_turn_bite_behind() 
	elif self.angle_2d_cw_between(250,320) 
		-> fulgur_anjanath.asyu_round_bite_short() 
	else 
		-> fulgur_anjanath.asyu_round_bite() 
	endif 
	return 
endf 

def node_028
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_bite() 
	return 
endf 

def node_029
	[RegisterVar1 ++] 
	if self.distance_3d_to_target().leq(1300) 
		-> fulgur_anjanath.asyu_step_bite() 
	else 
		-> fulgur_anjanath.dash(1,0,0,650) 
		self.distance_3d_to_target().gt(1100) -> fulgur_anjanath.asyu_step_bite() 
		self.distance_3d_to_target().leq(1100) -> fulgur_anjanath.charged_bite() 
	endif 
	return 
endf 

def node_030
	[RegisterVar1 ++] 
	if self.angle_2d_cw_between(330,30) 
		-> fulgur_anjanath.charged_dash_bite() 
	else 
		*&
		-> fulgur_anjanath.charged_dash_bite() 
	endif 
	return 
endf 

def node_031
	[RegisterVar1 ++] 
	if self.angle_2d_cw_between(0,170) 
		-> fulgur_anjanath.charged_side_bite() 
	elif self.angle_2d_cw_between(190,0) 
		-> fulgur_anjanath.charged_side_bite() 
	else 
		-> fulgur_anjanath.charged_side_bite() 
	endif 
	return 
endf 

def node_032
	[RegisterVar1 ++] 
	-> fulgur_anjanath.tail_wind() 
	return 
endf 

def node_033
	>> node_020 
	-> fulgur_anjanath.charged_rush_bite() 
	return 
endf 

def node_034
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.charged_bite_2ren() 
	return 
endf 

def node_035
	[RegisterVar1 ++] 
	-> fulgur_anjanath.charged_bite_2ren_combo() 
	-> fulgur_anjanath.charged_bite_3ren() 
	return 
endf 

def node_036
	[RegisterVar1 ++] 
	-> fulgur_anjanath.side_kick() 
	return 
endf 

def node_037
	[RegisterVar1 ++] 
	-> fulgur_anjanath.ride_rage_tail() 
	return 
endf 

def node_038
	[RegisterVar1 ++] 
	if self.angle_2d_cw_between(315,45) 
		self.targetArea(9) @ parameter2:1700 
		-> fulgur_anjanath.dash() 
	elif self.angle_2d_cw_between(120,240) 
	else 
		self.targetArea(9) @ parameter2:1150 
		-> fulgur_anjanath.dash() 
	endif 
	-> fulgur_anjanath.ride_rage_tail() 
	return 
endf 

def node_039
	if self.angle_2d_cw_between(260,100) 
		>> node_023 
	else 
		>> node_037 
	endif 
	return 
endf 

def node_040
	if self.angle_2d_cw_between(260,100) 
		>> node_024 
	else 
		>> node_037 
	endif 
	return 
endf 

def node_041
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.jump_attack_2() 
	return 
endf 

def node_042
	[RegisterVar1 ++] 
	if self.distance_3d_to_target().leq(100) 
		>> node_025 
	elif self.angle_2d_cw_between(340,20) 
		>> node_025 
	else 
		-> fulgur_anjanath.side_tackle() 
	endif 
	return 
endf 

def node_043
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.mid_range_attack() 
	return 
endf 

def node_044
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.mid_range_attack2() 
	return 
endf 

def node_045
	[RegisterVar1 ++] 
	>> node_020 
	-> fulgur_anjanath.charged_near_catch_attack() 
	if self.target.pinned() 
		>> node_046 
	else 
		-> fulgur_anjanath.catch_attack_miss() 
	endif 
	return 
endf 

def node_046
	self.targetArea(3) 
	-> fulgur_anjanath.catch_throw() 
	>> node_022 
	return 
endf 

def node_047
	if self.distance_3d_to_target().leq(200) 
		-> fulgur_anjanath.back_turn() 
		-> fulgur_anjanath.charged_corner_bite() 
	elif self.distance_3d_to_target().leq(1000) 
		-> fulgur_anjanath.charged_corner_bite() 
	elif self.distance_3d_to_target().leq(2500) 
		-> fulgur_anjanath.walk(2,1,5,2000,600) 
		-> fulgur_anjanath.charged_corner_bite() 
	else 
	endif 
	return 
endf 

def node_048
	[RegisterVar0 |-] 
	if [RegisterVar0 -= 10] 
		random (99) >> node_050 
		elser (1) 
		endr 
	elif [RegisterVar0 -= 7] 
		random (90) >> node_050 
		elser (10) 
		endr 
	elif [RegisterVar0 -= 5] 
		random (70) >> node_050 
		elser (30) 
		endr 
	else 
	endif 
	return 
endf 

def node_049
	[RegisterVar0 |-] 
	if self.current_quest().is_rank(rank.MR) 
		if [RegisterVar0 -= 3] 
			>> node_052 
		else 
		endif 
	else 
		if function#B9() 
			if [RegisterVar0 += 5] 
				>> node_052 
			else 
			endif 
		else 
			if [RegisterVar0 += 5] 
				>> node_051 
			elif [RegisterVar0 -= 6] 
				>> node_052 
			else 
			endif 
		endif 
	endif 
	return 
endf 

def node_050
	function#101() 
	[RegisterVar0 ++] 
	-> fulgur_anjanath.breath_charge() 
	return 
endf 

def node_051
	>> node_019 
	-> fulgur_anjanath.breath_sign() 
	return 
endf 

def node_052
	[RegisterVar0 ++] 
	if self.current_quest().is_rank(rank.MR) 
		-> fulgur_anjanath.die_water_slide_fall() 
	else 
		-> fulgur_anjanath.breath_shoot_in() 
		if function#B9() 
		else 
			-> fulgur_anjanath.reflesh() 
		endif 
	endif 
	return 
endf 

def node_053
endf 

def node_054
	>> node_019 
	-> fulgur_anjanath.nose_breath_in() 
	return 
endf 

def node_055
	[RegisterVar1 ++] 
	>> node_056 
	return 
endf 

def node_056
	[RegisterVar1 ++] 
	if self.fatigued() 
		-> fulgur_anjanath.tired_dash(2,1,0,1500,800) 
	else 
		-> fulgur_anjanath.dash(2,1,0,1500,800) 
	endif 
	return 
endf 

def node_057
	[RegisterVar1 ++] 
	if self.fatigued() 
		-> fulgur_anjanath.tired_dash(2,1,0,1500,1500) 
	else 
		-> fulgur_anjanath.dash(2,1,0,1500,1500) 
	endif 
	return 
endf 

def node_058
	[RegisterVar1 ++] 
	>> node_020 
	-> fulgur_anjanath.jump_attack() 
	return 
endf 

def node_059
	[RegisterVar1 ++] 
	>> node_020 
	-> fulgur_anjanath.tired() 
	return 
endf 

def node_060
	[RegisterVar1 ++] 
	>> node_020 
	random (55) -> fulgur_anjanath.predator_walk_l() 
	elser (45) -> fulgur_anjanath.predator_walk_r() 
	endr 
	return 
endf 

def node_061
	[RegisterVar3 ++] 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#5D() 
		function#5E() 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> node_068 
		self.targetArea(4) 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	if self.in_map(st.Ancient_Forest).in_area(5) 
		if self.vertical_distance_to_target().gt(400) 
			[RegisterVar3 |-] 
		elif self.target(52) 
			[RegisterVar3 |-] 
		else 
			[RegisterVar3 ++] 
		endif 
	elif self.in_map(st.Ancient_Forest).in_area(2) 
		if self.vertical_distance_to_target().gt(400) 
			[RegisterVar3 |-] 
		elif self.target(52) 
			[RegisterVar3 |-] 
		else 
			[RegisterVar3 ++] 
		endif 
	else 
		if self.vertical_distance_to_target().gt(400) 
			[RegisterVar3 |-] 
		elif self.target(52) 
			[RegisterVar3 |-] 
		else 
			[RegisterVar3 ++] 
			if self.target.mudded() 
				>> node_057 
				>> node_041 
			else 
			endif 
		endif 
	endif 
	return 
endf 

def node_062
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1000) 
		>> Global.node_014 
		repeat 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.target(3) 
			>> Global.node_011 
			random (37) -> fulgur_anjanath.wait() 
			elser (23) -> fulgur_anjanath.combat_search() 
			elser (40) -> fulgur_anjanath.threat_short() 
			endr 
		else 
			if self.target(4) 
				random (37) -> fulgur_anjanath.wait() 
				elser (23) -> fulgur_anjanath.combat_search() 
				elser (40) -> fulgur_anjanath.threat_short() 
				endr 
			else 
				if self.distance_3d_to_target().leq(500) 
					if self.enraged() >> node_007 
					elif self.fatigued() >> node_013 
					endwith >> node_001 
				elif self.distance_3d_to_target().leq(600) 
					if self.enraged() >> node_008 
					elif self.fatigued() >> node_014 
					endwith >> node_002 
				elif self.distance_3d_to_target().leq(1200) 
					if self.enraged() >> node_009 
					elif self.fatigued() >> node_015 
					endwith >> node_003 
				elif self.distance_3d_to_target().leq(2400) 
					if self.enraged() >> node_010 
					elif self.fatigued() >> node_016 
					endwith >> node_010 
				elif self.distance_3d_to_target().leq(5000) 
					if self.enraged() >> node_011 
					elif self.fatigued() >> node_017 
					endwith >> node_005 
				else 
					if self.enraged() >> node_012 
					elif self.fatigued() >> node_018 
					endwith >> node_006 
				endif 
			endif 
		endif 
	endif 
	return 
endf 

def node_063
	if self.target(52) 
		>> node_055 
	else 
		if self.vertical_distance_to_target().leq(700) 
			if self.distance_3d_to_target().leq(3000) 
				random (53) >> node_055 
				elser (47) >> node_041 
				endr 
			else 
				>> node_055 
			endif 
		else 
			>> node_055 
		endif 
	endif 
	return 
endf 

def node_064
	if self.above_target() 
		if self.distance_2d_to_target().gt(3000) 
			-> fulgur_anjanath.dash(1,0,0,2500) 
		else 
			-> fulgur_anjanath.back_turn() 
		endif 
		random (60) >> node_043 
		elser (40) >> node_075 
		endr 
	else 
		if self.distance_2d_to_target().gt(1000) 
			-> fulgur_anjanath.dash(1,0,0,800) 
		else 
			>> node_076 
		endif 
	endif 
	return 
endf 

def node_065
	if self.distance_2d_to_target().gt(2500) 
		-> fulgur_anjanath.dash(1,0,0,2000) 
	else 
		-> fulgur_anjanath.back_turn() 
	endif 
	if self.above_area() 
		if function#11(700) 
			>> node_041 
		else 
			>> node_075 
		endif 
	else 
		>> node_076 
	endif 
	return 
endf 

def node_066
	if self.below_target() 
		self.targetArea(77) 
		>> node_019 
		>> node_055 
	else 
		>> node_064 
	endif 
	*&
	return 
endf 

def node_067
	if self.below_target() 
		self.targetEnemy(target_em.random_player_or_cat) 
		-> fulgur_anjanath.dash() 
	else 
	endif 
	if function#41() 
		>> Global.node_037 
	else 
	endif 
	return 
endf 

def node_068
	if self.angle_2d_cw_between(90,270) 
		-> fulgur_anjanath.combat_search() 
	elif self.distance_3d_to_target().gt(3000) 
		-> fulgur_anjanath.combat_search() 
	else 
		-> fulgur_anjanath.lost_search() 
	endif 
	return 
endf 

def node_069
	>> node_041 
	return 
endf 

def node_070
	if self.enraged() >> node_072 
		*&
	elif self.fatigued() >> node_073 
		*&
	endwith >> node_071 
	return 
endf 

def node_071
	if function#103() 
		random (20) >> node_086 
		elser (0) >> node_039 
		elser (8) >> node_092 
		elser (12) >> node_093 
		elser (3) >> node_031 
		elser (0) >> node_042 
		elser (5) >> node_078 
		elser (0) >> node_032 
		elser (6) >> node_090 
		elser (10) >> node_096 
		elser (18) >> node_097 
		elser (18) >> node_091 
		elser (0) >> node_041 
		endr 
		>> node_080 
	elif function#104() 
		random (15) >> node_086 
		elser (4) >> node_039 
		elser (18) >> node_025 
		elser (12) >> node_031 
		elser (8) >> node_042 
		elser (12) >> node_078 
		elser (5) >> node_032 
		elser (14) >> node_090 
		elser (12) >> node_091 
		elser (0) >> node_041 
		endr 
	else 
		random (20) >> node_036 
		elser (24) >> node_039 
		elser (23) >> node_025 
		elser (16) >> node_031 
		elser (10) >> node_042 
		elser (0) >> node_078 
		elser (7) >> node_032 
		elser (0) >> node_041 
		endr 
	endif 
	return 
endf 

def node_072
	if function#103() 
		random (20) >> node_086 
		elser (8) >> node_092 
		elser (12) >> node_093 
		elser (0) >> node_031 
		elser (12) >> node_078 
		elser (0) >> node_042 
		elser (0) >> node_032 
		elser (8) >> node_096 
		elser (18) >> node_097 
		elser (22) >> node_091 
		elser (0) >> node_041 
		endr 
		>> node_080 
	elif function#104() 
		random (16) >> node_086 
		elser (20) >> node_025 
		elser (4) >> node_031 
		elser (14) >> node_078 
		elser (6) >> node_042 
		elser (8) >> node_032 
		elser (17) >> node_090 
		elser (15) >> node_091 
		elser (0) >> node_041 
		endr 
	else 
		random (10) >> node_036 
		elser (9) >> node_039 
		elser (22) >> node_025 
		elser (17) >> node_031 
		elser (10) >> node_078 
		elser (18) >> node_042 
		elser (9) >> node_032 
		elser (5) >> node_041 
		endr 
	endif 
	return 
endf 

def node_073
	random (35) >> node_036 
	elser (15) >> node_023 
	elser (40) >> node_025 
	elser (5) >> node_032 
	elser (5) >> node_059 
	endr 
	return 
endf 

def node_074
	if function#75(2) 
		random (4) -> fulgur_anjanath.pain_left_foot() 
		elser (96) 
		endr 
	elif function#75(3) 
		random (4) -> fulgur_anjanath.pain_right_foot() 
		elser (96) 
		endr 
	else 
	endif 
	return 
endf 

def node_075
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.jump_attack_high() 
	return 
endf 

def node_076
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.jump_attack_wall_down() 
	return 
endf 

def node_077
	if [RegisterVar1 -= 2] 
		>> node_099 
	else 
		if self.angle_2d_cw_between(90,270) 
			-> fulgur_anjanath.turn() 
		else 
		endif 
		[RegisterVar1 |-] 
		-> fulgur_anjanath.asyu_nose_breath() 
	endif 
	return 
endf 

def node_078
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_rush_bite() 
	return 
endf 

def node_079
	[RegisterVar1 ++] 
	if self.distance_3d_to_target().leq(2500) 
	else 
		-> fulgur_anjanath.dash(2,1,0,1500,2000) 
	endif 
	-> fulgur_anjanath.asyu_charge_attack() 
	[RegisterVar0 ++] 
	return 
endf 

def node_080
	[RegisterVar0 |-] 
	if function#B9() 
		if [RegisterVar0 -= 30] 
			>> node_079 
		else 
		endif 
	else 
		if [RegisterVar0 -= 15] 
			>> node_079 
		else 
		endif 
	endif 
	return 
endf 

def node_081
	if self.angle_2d_cw_between(90,270) 
		-> fulgur_anjanath.turn() 
	else 
	endif 
	-> fulgur_anjanath.asyu_nose_breath() 
	if self.target.helpless_0() 
	else 
	endif 
	return 
endf 

def node_082
	[RegisterVar1 ++] 
	-> fulgur_anjanath.charged_bite_3ren() 
	return 
endf 

def node_083
	>> node_034 
	>> node_040 
	return 
endf 

def node_084
	>> node_034 
	>> node_025 
	return 
endf 

def node_085
	>> node_034 
	>> node_039 
	return 
endf 

def node_086
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_side_kick() 
	return 
endf 

def node_087
	[RegisterVar1 ++] 
	>> node_019 
	-> fulgur_anjanath.asyu_dash_bite() 
	return 
endf 

def node_088
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_middle_range_sweep() 
	return 
endf 

def node_089
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_triple_nose_breath() 
	return 
endf 

def node_090
	[RegisterVar1 ++] 
	if self.distance_3d_to_target().leq(400) 
		-> fulgur_anjanath.asyu_short_head_butt_back() 
	else 
		-> fulgur_anjanath.asyu_short_head_butt() 
	endif 
	return 
endf 

def node_091
	[RegisterVar1 ++] 
	-> fulgur_anjanath.asyu_elec_max_bite() 
	return 
	>> node_025 
	if self.distance_3d_to_target().leq(600) 
		>> node_078 
	else 
	endif 
	return 
endf 

def node_092
	>> node_025 
	if self.target.helpless_1() 
		>> node_021 
	else 
		if self.distance_3d_to_target().leq(600) 
			>> node_078 
		else 
		endif 
	endif 
	return 
endf 

def node_093
	>> node_025 
	if self.target.helpless_1() 
		>> node_021 
	else 
		if self.distance_3d_to_target().leq(600) 
			>> node_091 
		else 
		endif 
	endif 
	return 
endf 

def node_094
	>> node_077 
	if self.target.helpless_1() 
		>> node_021 
	else 
		if self.distance_3d_to_target().leq(600) 
			>> node_078 
		else 
		endif 
	endif 
	return 
endf 

def node_095
	>> node_077 
	if self.target.helpless_1() 
		>> node_021 
	else 
		if self.distance_3d_to_target().leq(800) 
		elif self.distance_3d_to_target().leq(1200) 
			>> node_088 
		else 
		endif 
	endif 
	return 
endf 

def node_096
	if self.distance_3d_to_target().leq(400) 
		-> fulgur_anjanath.asyu_short_head_butt_back() 
	else 
		-> fulgur_anjanath.asyu_short_head_butt() 
	endif 
	if self.target.helpless_1() 
		>> node_021 
	else 
		if self.distance_3d_to_target().leq(600) 
			>> node_078 
		else 
		endif 
	endif 
	return 
endf 

def node_097
	if self.distance_3d_to_target().leq(400) 
		-> fulgur_anjanath.asyu_short_head_butt_back() 
	else 
		-> fulgur_anjanath.asyu_short_head_butt() 
	endif 
	if self.target.helpless_1() 
		>> node_021 
	else 
		if self.distance_3d_to_target().leq(600) 
			>> node_091 
		else 
		endif 
	endif 
	return 
endf 

def node_098
	if self.fatigued() 
	else 
		function#106(0,1) 
	endif 
	return 
endf 

def node_099
	[RegisterVar1 ++] 
	if function#103() 
		if self.enraged() 
			if self.distance_2d_to_target().leq(600) 
				random (20) >> node_078 
				elser (50) >> node_090 
				elser (30) >> node_091 
				endr 
			elif self.distance_2d_to_target().leq(1200) 
				random (30) >> node_025 
				elser (50) >> node_088 
				elser (20) >> node_089 
				endr 
			else 
				random (40) >> node_055 
				elser (60) >> node_087 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(600) 
				random (40) >> node_078 
				elser (40) >> node_090 
				elser (20) >> node_091 
				endr 
			elif self.distance_2d_to_target().leq(1200) 
				random (40) >> node_025 
				elser (30) >> node_088 
				elser (30) >> node_089 
				endr 
			else 
				random (60) >> node_055 
				elser (40) >> node_087 
				endr 
			endif 
		endif 
	elif function#104() 
		if self.enraged() 
			if self.distance_2d_to_target().leq(600) 
				random (40) >> node_034 
				elser (20) >> node_078 
				elser (25) >> node_090 
				elser (15) >> node_091 
				endr 
			elif self.distance_2d_to_target().leq(1200) 
				random (50) >> node_025 
				elser (35) >> node_088 
				elser (15) >> node_089 
				endr 
			else 
				random (50) >> node_055 
				elser (50) >> node_087 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(600) 
				random (40) >> node_034 
				elser (20) >> node_078 
				elser (20) >> node_090 
				elser (20) >> node_025 
				endr 
			elif self.distance_2d_to_target().leq(1200) 
				random (65) >> node_025 
				elser (20) >> node_088 
				elser (15) >> node_089 
				endr 
			else 
				random (70) >> node_055 
				elser (30) >> node_087 
				endr 
			endif 
		endif 
	else 
		if self.enraged() 
			if self.distance_2d_to_target().leq(600) 
				random (40) >> node_034 
				elser (30) >> node_025 
				elser (30) >> node_078 
				endr 
			elif self.distance_2d_to_target().leq(1200) 
				random (30) >> node_043 
				elser (25) >> node_044 
				elser (20) >> node_041 
				elser (25) >> node_025 
				endr 
			else 
				random (35) >> node_043 
				elser (40) >> node_041 
				elser (25) >> node_025 
				endr 
			endif 
		else 
			if self.distance_2d_to_target().leq(600) 
				random (30) >> node_034 
				elser (45) >> node_025 
				elser (25) >> node_078 
				endr 
			elif self.distance_2d_to_target().leq(1200) 
				random (20) >> node_043 
				elser (20) >> node_044 
				elser (20) >> node_041 
				elser (40) >> node_025 
				endr 
			else 
				random (30) >> node_043 
				elser (30) >> node_041 
				elser (40) >> node_025 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

