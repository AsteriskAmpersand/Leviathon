importactions Anjanath as anjanath

def node_000 : 1
	conclude 
endf 

def node_001 : 73
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.vertical_distance_to_target().leq(1000) 
				if self.distance_3d_to_target().leq(3000) 
					if self.target.in_combat() 
						>> node_002 
					else 
						>> node_003 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_002 : 74
	if self.current_quest().is_rank(rank.MR) 
		if function#30(2) 
			*&
			random (25) 
			elser (10) >> node_004 
			elser (50) >> node_007 
			elser (15) >> node_006 
			endr 
		elif function#30(4) 
			random (35) 
			elser (10) >> node_004 
			elser (55) >> node_007 
			elser (0) >> node_006 
			endr 
		else 
			random (35) 
			elser (0) >> node_004 
			elser (55) >> node_007 
			elser (10) >> node_007 
						>> node_006 
			endr 
		endif 
	else 
		if function#30(2) 
			*&
			random (25) 
			elser (10) >> node_004 
			elser (50) >> node_007 
			elser (15) >> node_006 
			endr 
		else 
			random (35) 
			elser (10) >> node_004 
			elser (55) >> node_007 
			elser (0) >> node_006 
			endr 
		endif 
	endif 
	return 
endf 

def node_003 : 75
	if function#30(2) 
		random (35) 
		elser (40) >> node_004 
		elser (10) >> node_007 
		elser (15) >> node_006 
		endr 
	else 
		random (35) 
		elser (55) >> node_004 
		elser (10) >> node_007 
		elser (0) >> node_006 
		endr 
	endif 
	return 
endf 

def node_004 : 80
	if function#41() 
	else 
		>> node_009 
		-> anjanath.threat_short() 
	endif 
	return 
endf 

def node_005 : 81
	if function#41() 
	else 
		>> node_009 
		-> anjanath.threat_fly() 
	endif 
	return 
endf 

def node_006 : 79
	if function#41() 
	else 
		if self.target_is(em.Rathalos) 
			if self.target(39) 
				self.force_area_change2() 
			else 
				>> node_004 
			endif 
		elif self.target_is(em.Azure_Rathalos) 
			if self.target(39) 
				self.force_area_change2() 
			else 
				>> node_004 
			endif 
		else 
			self.force_area_change2() 
		endif 
	endif 
	return 
endf 

def node_007 : 82
	if function#41() 
	else 
		if self.vertical_distance_to_target().gt(500) 
			>> node_031 
		elif self.distance_3d_to_target().gt(2500) 
			if self.current_quest().is_rank(rank.MR) 
				if [RegisterVar0 <= 1] >> node_055 
				else 
					random (40) >> node_013 
					elser (60) >> node_031 
					endr 
				endif 
			else 
				*&
				random (40) >> node_013 
				elser (60) >> node_031 
				endr 
			endif 
			>> node_013 
		endif 
	endif 
	return 
endf 

def node_008 : 86
	if self.angle_2d_cw_between(60,300) 
		if self.in_combat() 
			-> anjanath.turn() 
		elif self.alert_out_of_combat() 
			-> anjanath.turn() 
		else 
			-> anjanath.normal_turn() 
		endif 
	else 
	endif 
	return 
endf 

def node_009 : 17
	if self.distance_3d_to_target().leq(550) 
		-> anjanath.back_turn() 
	else 
	endif 
	if self.angle_2d_cw_between(30,330) 
		if self.in_combat() 
			-> anjanath.turn() 
		else 
			-> anjanath.normal_turn() 
		endif 
	else 
	endif 
	return 
endf 

def node_010 : 51
	>> node_008 
	if self.fatigued() 
		-> anjanath.tired_dash(2,1,5,1500,800) 
	else 
		-> anjanath.dash(2,1,5,1500,800) 
	endif 
	return 
endf 

def node_011 : 84
	if self.fatigued() 
		-> anjanath.tired_dash(2,1,5,3000,800) 
	else 
		-> anjanath.dash(2,1,5,3000,800) 
	endif 
	return 
endf 

def node_012 : 88
	if self.fatigued() 
		-> anjanath.tired_walk(2,1,5,1500,800) 
	else 
		-> anjanath.walk(2,1,5,1500,800) 
	endif 
	return 
endf 

def node_013 : 22
	if self.distance_3d_to_target().leq(150) 
		>> node_014 
	elif self.distance_3d_to_target().leq(550) 
		>> node_015 
	elif self.distance_3d_to_target().leq(900) 
		>> node_016 
	elif self.distance_3d_to_target().leq(2000) 
		>> node_017 
	else 
		>> node_017 
	endif 
	return 
endf 

def node_014 : 23
	-> anjanath.turn_bite_near() 
	return 
endf 

def node_015 : 24
	if self.angle_2d_cw_between(345,15) 
		-> anjanath.turn_bite_near() 
	elif self.angle_2d_cw_between(15,40) 
		-> anjanath.round_bite() 
	elif self.angle_2d_cw_between(40,110) 
		-> anjanath.round_bite_short() 
	elif self.angle_2d_cw_between(110,250) 
		-> anjanath.turn_bite_behind() 
	elif self.angle_2d_cw_between(250,320) 
		-> anjanath.round_bite_short() 
	else 
		-> anjanath.round_bite() 
	endif 
	return 
endf 

def node_016 : 25
	-> anjanath.bite() 
	return 
endf 

def node_017 : 26
	if self.distance_3d_to_target().leq(1300) 
		-> anjanath.step_bite() 
	else 
		-> anjanath.dash(1,0,0,650) 
		self.distance_3d_to_target().gt(1100) -> anjanath.step_bite() 
		self.distance_3d_to_target().leq(1100) -> anjanath.bite() 
	endif 
	return 
endf 

def node_018 : 27
	if self.angle_2d_cw_between(330,30) 
		-> anjanath.dash_bite() 
	else 
		*&
		-> anjanath.dash_bite() 
	endif 
	return 
endf 

def node_019 : 21
	if self.distance_3d_to_target().leq(550) 
		-> anjanath.petit_bite_near() 
	elif self.distance_3d_to_target().leq(1100) 
		-> anjanath.petit_bite() 
	else 
		>> node_010 
		-> anjanath.petit_bite() 
	endif 
	return 
endf 

def node_020 : 43
	if self.distance_3d_to_target().leq(550) 
		-> anjanath.cut_bite_near() 
	elif self.distance_3d_to_target().leq(1100) 
		-> anjanath.cut_bite() 
	else 
		>> node_010 
		-> anjanath.cut_bite() 
	endif 
	return 
endf 

def node_021 : 28
	if self.angle_2d_cw_between(0,170) 
		-> anjanath.side_bite() 
	elif self.angle_2d_cw_between(190,0) 
		-> anjanath.side_bite() 
	else 
		-> anjanath.side_bite() 
	endif 
	return 
endf 

def node_022 : 29
	-> anjanath.tail_wind() 
	return 
endf 

def node_023 : 30
	>> node_009 
	-> anjanath.rush_bite() 
	return 
endf 

def node_024 : 31
	-> anjanath.bite_2ren() 
	return 
endf 

def node_025 : 32
	-> anjanath.bite_2ren_combo() 
	-> anjanath.bite_3ren() 
	return 
endf 

def node_026 : 33
	-> anjanath.side_kick() 
	return 
endf 

def node_027 : 34
	-> anjanath.ride_rage_tail() 
	return 
endf 

def node_028 : 103
	if self.angle_2d_cw_between(315,45) 
		self.targetArea(9) @ parameter2:1700 
		-> anjanath.dash() 
	elif self.angle_2d_cw_between(120,240) 
	else 
		self.targetArea(9) @ parameter2:1150 
		-> anjanath.dash() 
	endif 
	-> anjanath.ride_rage_tail() 
	return 
endf 

def node_029 : 104
	if self.angle_2d_cw_between(260,100) 
		>> node_019 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_030 : 105
	if self.angle_2d_cw_between(260,100) 
		>> node_020 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_031 : 37
	>> node_009 
	-> anjanath.jump_attack_2() 
	return 
endf 

def node_032 : 68
	if self.distance_3d_to_target().leq(100) 
		>> node_013 
	elif self.angle_2d_cw_between(340,20) 
		>> node_013 
	else 
		-> anjanath.side_tackle() 
	endif 
	return 
endf 

def node_033 : 72
	>> node_009 
	-> anjanath.mid_range_attack() 
	return 
endf 

def node_034 : 102
	>> node_008 
	-> anjanath.mid_range_attack2() 
	return 
endf 

def node_035 : 49
	>> node_009 
	-> anjanath.nose_breath_in() 
	return 
endf 

def node_036 : 54
	-> anjanath.tired() 
	return 
endf 

def node_037 : 55
	>> node_009 
	random (55) -> anjanath.predator_walk_l() 
	elser (45) -> anjanath.predator_walk_r() 
	endr 
	return 
endf 

def node_038 : 58
	if self.target(0) 
		>> node_040 
	else 
		>> node_040 
	endif 
	reset 
endf 

def node_039 : 61
	-> anjanath.wall_wait() 
	reset 
endf 

def node_040 : 62
	-> anjanath.dash() 
	return 
endf 

def node_041 : 59
	if function#35(2) 
		self.targetArea(target_area.global_center) 
		>> node_042 
	elif function#35(1) 
		-> anjanath.climb_move() 
	else 
		-> anjanath.wall_wait() 
	endif 
	return 
endf 

def node_042 : 60
	if self.above_target() 
		-> anjanath.climb_end_walk() 
	else 
		-> anjanath.climb_end_jump() 
	endif 
	return 
endf 

def node_043 : 83
	self.targetArea(14) 
	if self.distance_3d_to_target().gt(600) 
		>> node_011 
		repeat 
	else 
	endif 
	return 
endf 

def node_044 : 87
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1000) 
		>> node_010 
		repeat 
	else 
	endif 
	return 
endf 

def node_045 : 85
	if function#41() 
		>> node_010 => repeat 
	else 
	endif 
	return 
endf 

def node_046 : 89
	[RegisterVar0 ++] 
	if [RegisterVar0 <= 10] 
		random (99) >> node_048 
		elser (1) 
		endr 
	elif [RegisterVar0 <= 7] 
		random (90) >> node_048 
		elser (10) 
		endr 
	elif [RegisterVar0 <= 5] 
		random (70) >> node_048 
		elser (30) 
		endr 
	else 
	endif 
	return 
endf 

def node_047 : 90
	[RegisterVar0 ++] 
	if function#B9() 
		if [RegisterVar0 == 5] 
			>> node_050 
		else 
		endif 
	else 
		if [RegisterVar0 == 5] 
			>> node_049 
		elif [RegisterVar0 <= 6] 
			>> node_050 
		else 
		endif 
	endif 
	return 
endf 

def node_048 : 91
	function#102() 
	[RegisterVar0 |-] 
	-> anjanath.breath_charge() 
	return 
endf 

def node_049 : 92
	>> node_014 
	-> anjanath.breath_sign() 
	return 
endf 

def node_050 : 93
	[RegisterVar0 |-] 
	-> anjanath.breath_shoot_in() 
	if function#B9() 
	else 
		-> anjanath.reflesh() 
	endif 
	return 
endf 

def node_051 : 94
	[RegisterVar0 ++] 
	if [RegisterVar0 <= 7] 
		random (99) >> node_053 
		elser (1) 
		endr 
	elif [RegisterVar0 <= 5] 
		random (90) >> node_053 
		elser (10) 
		endr 
	elif [RegisterVar0 <= 3] 
		random (70) >> node_053 
		elser (30) 
		endr 
	else 
	endif 
	return 
endf 

def node_052 : 95
	[RegisterVar0 ++] 
	if [RegisterVar0 <= 8] 
		>> node_055 
	elif [RegisterVar0 <= 1] 
		if self.distance_3d_to_target().leq(1000) 
			*&
		elif self.distance_3d_to_target().leq(2000) 
			>> node_055 
		else 
			*&
		endif 
	endif 
	return 
endf 

def node_053 : 96
	function#102() 
	[RegisterVar0 |-] 
	-> anjanath.breath_charge() 
	return 
endf 

def node_054 : 97
	>> node_014 
	-> anjanath.breath_sign() 
	return 
endf 

def node_055 : 98
	[RegisterVar0 |-] 
	-> anjanath.breath_shoot_in_g() 
	>> node_056 
	return 
endf 

def node_056 : 100
	self.targetUnknown(1,0) 
	>> node_009 
	if self.distance_3d_to_target().leq(800) 
		random (35) >> node_019 
		elser (35) >> node_020 
		elser (30) >> node_024 
		endr 
	else 
	endif 
	return 
endf 

def node_057 : 106
	if self.enraged() 
		>> node_058 
	elif self.fatigued() 
		>> node_059 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_058 : 107
	random (22) >> node_026 
	elser (11) >> node_030 
	elser (20) >> node_013 
	elser (18) >> node_021 
	elser (15) >> node_032 
	elser (14) >> node_022 
	elser (0) 
	endr 
	return 
endf 

def node_059 : 108
	random (35) >> node_026 
	elser (15) >> node_019 
	elser (30) >> node_013 
	elser (12) >> node_022 
	elser (8) >> node_036 
	endr 
	return 
endf 

def node_060 : 109
	random (20) >> node_026 
	elser (18) >> node_030 
	elser (20) >> node_013 
	elser (15) >> node_021 
	elser (15) >> node_032 
	elser (12) >> node_022 
	elser (0) 
	endr 
	return 
endf 

