importactions Brute_Tigrex as brute_tigrex
importlibrary Global as Global

def node_000
	>> Global.node_020 
	>> Global.node_001 
	>> node_103 
	if self.target(4) 
		>> node_104 => reset 
	elif self.target(3) 
		>> node_104 => reset 
	elif self.target(55) 
		>> node_001 => reset 
	elif function#41() 
		>> Global.node_026 => reset 
	elif self.target(12) 
		>> node_110 => reset 
	elif self.target(14) 
		>> node_108 => reset 
	elif self.target(11) 
		>> node_106 => reset 
	elif self.target(0) 
		>> node_107 => reset 
	elif [RegisterVar4 == 1] 
		>> node_105 => reset 
	else 
		>> node_001 
	endif 
	reset 
endf 

def node_001
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_017 
	if self.distance_2d_to_target().leq(550) 
		if self.enraged() >> node_007 
		elif self.fatigued() >> node_012 
		else >> node_002 
		endif 
	elif self.distance_2d_to_target().leq(850) 
		if self.enraged() >> node_008 
		elif self.fatigued() >> node_013 
		else >> node_003 
		endif 
	elif self.distance_2d_to_target().leq(1600) 
		if self.enraged() >> node_009 
		elif self.fatigued() >> node_014 
		else >> node_004 
		endif 
	elif self.distance_2d_to_target().leq(3500) 
		if self.enraged() >> node_010 
		elif self.fatigued() >> node_015 
		else >> node_005 
		endif 
	else 
		if self.enraged() >> node_011 
		elif self.fatigued() >> node_016 
		else >> node_006 
		endif 
	endif 
	>> node_058 
	return 
endf 

def node_002
	random (0) >> node_023 
	elser (30) >> node_054 
	elser (0) >> node_056 
	elser (20) >> node_033 
	elser (15) >> node_034 
	elser (15) >> node_037 
	elser (20) >> node_074 
	elser (0) >> node_075 
	endr 
	return 
endf 

def node_003
	random (45) >> node_023 
	elser (20) >> node_054 
	elser (10) >> node_033 
	elser (5) >> node_034 
	elser (5) >> node_037 
	elser (15) >> node_074 
	elser (0) >> node_075 
	endr 
	return 
endf 

def node_004
	random (25) >> node_063 
				>> node_040 
	elser (15) >> node_034 
	elser (20) >> node_037 
	elser (30) >> node_074 
	elser (10) >> node_076 
	endr 
	return 
endf 

def node_005
	random (40) >> node_039 
				>> node_040 
	elser (20) >> node_037 
	elser (20) >> node_074 
	elser (0) >> node_075 
	elser (20) >> node_076 
	endr 
	return 
endf 

def node_006
	random (40) >> node_039 
				>> node_040 
	elser (0) >> node_037 
	elser (20) >> node_074 
	elser (0) >> node_075 
	elser (40) >> node_076 
	endr 
	return 
endf 

def node_007
	random (0) >> node_023 
	elser (20) >> node_054 
	elser (40) >> node_055 
	elser (0) >> node_056 
	elser (10) >> node_033 
	elser (5) >> node_034 
	elser (5) >> node_037 
	elser (10) >> node_074 
	elser (10) >> node_075 
	endr 
	return 
endf 

def node_008
	random (45) >> node_023 
	elser (10) >> node_054 
	elser (10) >> node_055 
	elser (5) >> node_033 
	elser (5) >> node_034 
	elser (5) >> node_037 
	elser (10) >> node_074 
	elser (10) >> node_075 
	endr 
	return 
endf 

def node_009
	random (25) >> node_063 
				>> node_040 
	elser (10) >> node_056 
	elser (15) >> node_034 
	elser (20) >> node_037 
	elser (10) >> node_074 
	elser (10) >> node_075 
	elser (5) >> node_076 
	elser (5) >> node_077 
	endr 
	return 
endf 

def node_010
	random (40) >> node_039 
				>> node_040 
	elser (20) >> node_037 
	elser (10) >> node_074 
	elser (10) >> node_075 
	elser (10) >> node_076 
	elser (10) >> node_077 
	endr 
	return 
endf 

def node_011
	random (40) >> node_039 
				>> node_040 
	elser (0) >> node_037 
	elser (10) >> node_074 
	elser (10) >> node_075 
	elser (20) >> node_076 
	elser (20) >> node_077 
	endr 
	return 
endf 

def node_012
	random (45) >> node_029 
	elser (5) >> node_033 
	elser (10) >> node_034 
	elser (10) >> node_037 
	elser (30) >> node_080 
	endr 
	return 
endf 

def node_013
	random (40) >> node_029 
	elser (5) >> node_033 
	elser (15) >> node_034 
	elser (10) >> node_037 
	elser (30) >> node_080 
	endr 
	return 
endf 

def node_014
	random (30) >> node_063 
				>> node_029 
	elser (15) >> node_034 
	elser (15) >> node_037 
	elser (40) >> node_080 
	endr 
	return 
endf 

def node_015
	random (20) >> node_064 
				>> node_113 
	elser (30) >> node_039 
				>> node_113 
	elser (20) >> node_037 
	elser (30) >> node_080 
	elser (0) >> node_114 
	endr 
	return 
endf 

def node_016
	random (25) >> node_065 
				>> node_113 
	elser (25) >> node_039 
				>> node_113 
	elser (0) >> node_037 
	elser (50) >> node_080 
	elser (0) >> node_114 
	endr 
	return 
endf 

def node_017
	if self.target.helpless_1() 
	else 
		if self.distance_2d_to_target().leq(850) 
			if self.fatigued() 
			elif self.enraged() 
				if self.angle_2d_cw_between(315,45) 
					random (30) >> node_018 
								>> node_042 
					elser (20) >> node_019 
								>> node_042 
					elser (50) 
					endr 
				else 
					random (15) >> node_018 
								>> node_042 
					elser (10) >> node_019 
								>> node_042 
					elser (75) 
					endr 
				endif 
			else 
				if self.angle_2d_cw_between(315,45) 
					random (50) >> node_019 
								>> node_041 
					elser (50) 
					endr 
				else 
					random (25) >> node_019 
								>> node_041 
					elser (75) 
					endr 
				endif 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_018
	if self.distance_2d_to_target().leq(500) 
		random (50) >> node_020 
		elser (50) >> node_022 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (50) >> node_021 
		elser (50) >> node_022 
		endr 
	endif 
	return 
endf 

def node_019
	if self.distance_2d_to_target().leq(500) 
		random (50) -> brute_tigrex.move_back() @ comboSetting:1 
					-> brute_tigrex.min_roar_single() 
		elser (50) -> brute_tigrex.around_min_roar_auto() 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (15) -> brute_tigrex.min_roar_single() 
		elser (50) -> brute_tigrex.around_min_roar_auto() 
		elser (35) -> brute_tigrex.min_roar_around_auto() 
		endr 
	endif 
	return 
endf 

def node_020
	if self.distance_2d_to_target().leq(500) 
		-> brute_tigrex.move_back() @ comboSetting:1 
		-> brute_tigrex.min_roar_single() 
	else 
		-> brute_tigrex.min_roar_single() 
	endif 
	if self.target.helpless_0() 
	else 
		if self.distance_2d_to_target().leq(850) 
			-> brute_tigrex.min_roar_around_auto() 
		else 
		endif 
	endif 
	return 
endf 

def node_021
	if self.distance_2d_to_target().leq(500) 
		-> brute_tigrex.move_back() @ comboSetting:1 
		-> brute_tigrex.min_roar_around_auto() 
	else 
		-> brute_tigrex.min_roar_around_auto() 
	endif 
	if self.target.helpless_0() 
	else 
		if self.distance_2d_to_target().leq(850) 
			-> brute_tigrex.min_roar_single() 
		else 
		endif 
	endif 
	return 
endf 

def node_022
	-> brute_tigrex.around_min_roar_auto() 
	if self.target.helpless_0() 
	else 
		if self.distance_2d_to_target().leq(850) 
			-> brute_tigrex.around_min_roar_auto() 
		else 
		endif 
	endif 
	return 
endf 

def node_023
	if self.distance_2d_to_target().leq(850) 
	else 
		>> node_065 
	endif 
	if self.enraged() 
		if self.angle_2d_cw_between(10,90) 
			-> brute_tigrex.check_attack_l() 
		elif self.angle_2d_cw_between(270,10) 
			-> brute_tigrex.foot_sweep_l() 
		elif self.angle_2d_cw_between(90,180) 
			-> brute_tigrex.back_tail_attack() 
		else 
			random (50) -> brute_tigrex.back_tail_attack_r() 
			elser (50) -> brute_tigrex.foot_sweep_l() 
			endr 
		endif 
	else 
		if self.angle_2d_cw_between(350,90) 
			-> brute_tigrex.foot_sweep_r() 
		elif self.angle_2d_cw_between(270,350) 
			-> brute_tigrex.check_attack_r() 
		elif self.angle_2d_cw_between(90,180) 
			random (50) -> brute_tigrex.back_tail_attack() 
			elser (50) -> brute_tigrex.foot_sweep_r() 
			endr 
		else 
			-> brute_tigrex.back_tail_attack_r() 
		endif 
	endif 
	return 
endf 

def node_024
	if self.distance_2d_to_target().leq(850) 
		random (40) >> node_047 
					>> node_028 
		elser (60) 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (25) >> node_047 
					>> node_028 
		elser (75) 
		endr 
	elif self.distance_2d_to_target().leq(3500) 
		random (15) >> node_047 
					>> node_028 
		elser (85) 
		endr 
	else 
	endif 
	return 
endf 

def node_025
	if self.fatigued() 
		>> node_047 
	else 
		if self.distance_2d_to_target().leq(850) 
			random (50) >> node_047 
			elser (50) 
			endr 
		else 
			>> node_047 
		endif 
	endif 
	return 
endf 

def node_026
	>> node_029 
	>> node_030 
	return 
endf 

def node_027
	if self.distance_2d_to_target().leq(550) 
	elif self.distance_2d_to_target().leq(900) 
		if self.angle_2d_cw_between(240,120) 
			random (50) >> node_047 
			elser (50) 
			endr 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_028
	if self.distance_2d_to_target().leq(850) 
		random (40) >> node_032 
		elser (60) 
		endr 
	else 
	endif 
	return 
endf 

def node_029
	if self.distance_2d_to_target().leq(750) 
		-> brute_tigrex.check_bite() 
	else 
		-> brute_tigrex.bite_min() 
	endif 
	return 
endf 

def node_030
	if self.distance_2d_to_target().leq(550) 
		random (70) >> node_032 
		elser (0) >> node_037 
		elser (20) >> node_033 
		elser (10) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (50) >> node_032 
		elser (30) >> node_041 
		elser (0) >> node_037 
		elser (10) >> node_033 
		elser (10) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (50) >> node_037 
		elser (50) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		>> node_036 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_038 
	endif 
	return 
endf 

def node_031
	if self.distance_2d_to_target().leq(550) 
		random (75) >> node_032 
		elser (0) >> node_037 
		elser (25) >> node_033 
		elser (0) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (35) >> node_032 
		elser (50) >> node_041 
		elser (0) >> node_037 
		elser (15) >> node_033 
		elser (0) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (40) >> node_032 
		elser (0) >> node_037 
		elser (0) >> node_033 
		elser (60) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(2000) 
		random (50) >> node_037 
		elser (50) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		>> node_036 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_038 
	else 
	endif 
	return 
endf 

def node_032
	if self.angle_2d_cw_between(0,90) 
		-> brute_tigrex.check_attack_l() 
	elif self.angle_2d_cw_between(270,0) 
		-> brute_tigrex.check_attack_r() 
	elif self.angle_2d_cw_between(90,180) 
		-> brute_tigrex.back_tail_attack() 
	else 
		-> brute_tigrex.back_tail_attack_r() 
	endif 
	return 
endf 

def node_033
	-> brute_tigrex.rotate_attack_r() 
	return 
endf 

def node_034
	if self.distance_2d_to_target().leq(600) 
		-> brute_tigrex.move_back() 
	else 
	endif 
	-> brute_tigrex.bite_max() 
	return 
endf 

def node_035
	-> brute_tigrex.bite_max() 
	return 
endf 

def node_036
	if self.angle_2d_cw_between(180,0) 
		-> brute_tigrex.rock_launcher_r() 
	else 
		-> brute_tigrex.rock_launcher_l() 
	endif 
	return 
endf 

def node_037
	if self.distance_2d_to_target().leq(1000) 
		-> brute_tigrex.move_back() 
	else 
	endif 
	>> node_036 
	return 
endf 

def node_038
	if self.distance_2d_to_target().leq(1700) 
		-> brute_tigrex.move_back() 
	else 
	endif 
	if self.vertical_distance_to_target().leq(600) 
		-> brute_tigrex.jump_attack() 
	else 
		-> brute_tigrex.jump_attack_wall() 
	endif 
	return 
endf 

def node_039
	if self.distance_2d_to_target().leq(1500) 
		>> node_063 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_038 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_040
	if self.distance_2d_to_target().leq(550) 
		random (50) >> node_054 
		elser (35) -> brute_tigrex.check_bite() 
		elser (15) >> node_033 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (35) >> node_054 
		elser (25) -> brute_tigrex.check_bite() 
		elser (40) >> node_023 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (30) >> node_054 
		elser (35) >> node_035 
		elser (35) >> node_036 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		>> node_036 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_038 
	endif 
	return 
endf 

def node_041
	if self.distance_2d_to_target().leq(550) 
		random (60) >> node_051 
		elser (30) -> brute_tigrex.check_bite() 
		elser (10) >> node_074 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (45) >> node_051 
		elser (30) >> node_023 
		elser (15) -> brute_tigrex.bite_min() 
		elser (10) >> node_074 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (45) >> node_051 
		elser (15) >> node_035 
		elser (15) >> node_036 
		elser (25) >> node_074 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (0) >> node_051 
		elser (0) >> node_023 
		elser (30) >> node_035 
		elser (35) >> node_036 
		elser (35) >> node_074 
		endr 
	else 
		random (30) >> node_052 
		elser (20) >> node_036 
		elser (50) >> node_076 
		endr 
	endif 
	>> node_058 
	reset 
endf 

def node_042
	if self.distance_2d_to_target().leq(550) 
		random (75) >> node_051 
		elser (0) -> brute_tigrex.check_bite() 
		elser (15) >> node_074 
		elser (10) >> node_075 
		endr 
	elif self.distance_2d_to_target().leq(850) 
		random (55) >> node_051 
		elser (0) -> brute_tigrex.bite_min() 
		elser (30) >> node_023 
		elser (10) >> node_074 
		elser (5) >> node_075 
		endr 
	elif self.distance_2d_to_target().leq(1200) 
		random (55) >> node_051 
		elser (10) >> node_035 
		elser (10) >> node_036 
		elser (15) >> node_074 
		elser (10) >> node_075 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (0) >> node_051 
		elser (15) >> node_056 
		elser (20) >> node_035 
		elser (30) >> node_036 
		elser (20) >> node_074 
		elser (15) >> node_075 
		endr 
	else 
		random (30) >> node_052 
		elser (20) >> node_037 
		elser (25) >> node_076 
		elser (25) >> node_077 
		endr 
	endif 
	>> node_058 
	reset 
endf 

def node_043
	>> node_047 
	if self.target.helpless_0() 
	else 
		if self.enraged() 
			random (25) >> node_047 
			elser (25) >> node_048 
			elser (20) >> node_046 
			elser (30) 
			endr 
		else 
			random (20) >> node_047 
			elser (15) >> node_048 
			elser (15) >> node_046 
			elser (50) 
			endr 
		endif 
	endif 
	return 
endf 

def node_044
	>> node_048 
	if self.target.helpless_0() 
	else 
		if self.enraged() 
			random (35) >> node_048 
			elser (0) >> node_047 
			elser (35) >> node_046 
			elser (30) 
			endr 
		else 
			random (25) >> node_048 
			elser (0) >> node_047 
			elser (25) >> node_046 
			elser (50) 
			endr 
		endif 
	endif 
	return 
endf 

def node_045
	>> node_046 
	if self.target.helpless_0() 
	else 
		random (50) >> node_047 
		elser (50) >> node_048 
		elser (0) 
		endr 
	endif 
	return 
endf 

def node_046
	if self.distance_2d_to_target().leq(500) 
		-> brute_tigrex.move_back() @ comboSetting:1 
		-> brute_tigrex.min_roar_single() 
	elif self.distance_2d_to_target().leq(850) 
		if self.angle_2d_cw_between(135,225) 
			-> brute_tigrex.quick_turn() 
		else 
		endif 
		-> brute_tigrex.min_roar_single() 
	else 
		>> node_065 
		-> brute_tigrex.min_roar_single() 
	endif 
	return 
endf 

def node_047
	if self.distance_2d_to_target().leq(850) 
	else 
		>> node_065 
	endif 
	>> node_050 
	return 
endf 

def node_048
	if self.distance_2d_to_target().leq(500) 
		if self.angle_2d_cw_between(0,180) 
			-> brute_tigrex.move_back() @ comboSetting:1 
			-> brute_tigrex.min_roar_around_l() 
		else 
			-> brute_tigrex.move_back() @ comboSetting:1 
			-> brute_tigrex.min_roar_around_r() 
		endif 
	elif self.distance_2d_to_target().leq(850) 
		if self.angle_2d_cw_between(135,225) 
			-> brute_tigrex.quick_turn() 
		else 
		endif 
		>> node_049 
	else 
		>> node_065 
		>> node_049 
	endif 
	return 
endf 

def node_049
	-> brute_tigrex.min_roar_around_auto() 
	return 
endf 

def node_050
	-> brute_tigrex.around_min_roar_auto() 
	return 
endf 

def node_051
	if self.distance_2d_to_target().leq(1200) 
	else 
		>> node_065 
	endif 
	if self.distance_3d_to_target().leq(500) 
		-> brute_tigrex.max_roar_single_back() 
	else 
		-> brute_tigrex.max_roar_single() 
	endif 
	return 
endf 

def node_052
	if self.vertical_distance_to_target().leq(600) 
		-> brute_tigrex.jump_attack() 
	else 
		-> brute_tigrex.jump_attack_wall() 
	endif 
	return 
endf 

def node_053
	[RegisterVar2 |-] 
	if self.enraged() 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.afterrush_drift_for_attack() 
		-> brute_tigrex.super_roar_r() 
	else 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.afterrush_drift_for_attack() 
		-> brute_tigrex.super_roar_l() 
	endif 
	return 
endf 

def node_054
	if self.distance_2d_to_target().leq(1200) 
		if self.angle_2d_cw_between(315,45) 
		else 
			-> brute_tigrex.quick_turn() 
		endif 
	else 
		>> node_065 
	endif 
	if self.distance_3d_to_target().leq(500) 
		-> brute_tigrex.max_roar_single_back() 
	else 
		-> brute_tigrex.max_roar_single() 
	endif 
	return 
endf 

def node_055
	if self.distance_2d_to_target().leq(850) 
		if self.angle_2d_cw_between(315,45) 
		else 
			-> brute_tigrex.quick_turn() 
		endif 
	else 
		>> node_065 
	endif 
	-> brute_tigrex.max_roar_double_first() 
	return 
endf 

def node_056
	-> brute_tigrex.straight_rush() @ comboSetting:1 
	-> brute_tigrex.afterrush_max_roar() 
	return 
endf 

def node_057
	if self.distance_3d_to_target().leq(550) 
		-> brute_tigrex.max_roar_single_back() 
	else 
		-> brute_tigrex.max_roar_single() 
	endif 
	return 
endf 

def node_058
	if self.fatigued() 
		[RegisterVar2 |-] 
	else 
		[RegisterVar2 ++] 
		if [RegisterVar2 <= 13] 
			[RegisterVar2 |-] 
			>> node_060 
		else 
			if self.distance_2d_to_target().leq(700) 
			elif self.distance_2d_to_target().leq(2000) 
				if self.vertical_distance_to_target().leq(500) 
					if self.enraged() 
						if self.angle_2d_cw_between(270,0) 
							random (5) 
										[RegisterVar2 |-] 
										>> node_060 
							elser (95) 
							endr 
						elif self.angle_2d_cw_between(0,90) 
							random (10) 
										[RegisterVar2 |-] 
										>> node_060 
							elser (90) 
							endr 
						else 
						endif 
					else 
						if self.angle_2d_cw_between(270,0) 
							random (10) 
										[RegisterVar2 |-] 
										>> node_060 
							elser (90) 
							endr 
						elif self.angle_2d_cw_between(0,90) 
							random (5) 
										[RegisterVar2 |-] 
										>> node_060 
							elser (95) 
							endr 
						else 
						endif 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	endif 
	return 
endf 

def node_059
	if self.distance_2d_to_target().leq(700) 
	elif self.distance_2d_to_target().leq(2000) 
		if self.vertical_distance_to_target().leq(500) 
			if self.enraged() 
				if self.angle_2d_cw_between(270,0) 
					random (5) 
								[RegisterVar2 |-] 
								>> node_060 
					elser (95) 
					endr 
				elif self.angle_2d_cw_between(0,90) 
					random (10) 
								[RegisterVar2 |-] 
								>> node_060 
					elser (90) 
					endr 
				else 
				endif 
			else 
				if self.angle_2d_cw_between(270,0) 
					random (10) 
								[RegisterVar2 |-] 
								>> node_060 
					elser (90) 
					endr 
				elif self.angle_2d_cw_between(0,90) 
					random (5) 
								[RegisterVar2 |-] 
								>> node_060 
					elser (95) 
					endr 
				else 
				endif 
			endif 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_060
	if self.distance_2d_to_target().leq(700) 
		if self.enraged() 
			-> brute_tigrex.move_back() 
			-> brute_tigrex.super_roar_r() 
		else 
			-> brute_tigrex.move_back() 
			-> brute_tigrex.super_roar_l() 
		endif 
	elif self.distance_2d_to_target().leq(2000) 
		if self.angle_2d_cw_between(270,90) 
		else 
			-> brute_tigrex.quick_turn() 
		endif 
		if self.enraged() 
			-> brute_tigrex.super_roar_r() 
		else 
			-> brute_tigrex.super_roar_l() 
		endif 
	else 
		>> node_065 
		if self.enraged() 
			-> brute_tigrex.super_roar_r() 
		else 
			-> brute_tigrex.super_roar_l() 
		endif 
	endif 
	reset 
endf 

def node_061
	if self.fatigued() 
		[RegisterVar2 |-] 
	else 
		if self.distance_2d_to_target().leq(700) 
		elif self.distance_2d_to_target().leq(2000) 
			if self.vertical_distance_to_target().leq(500) 
				if self.enraged() 
					if self.angle_2d_cw_between(270,0) 
						random (5) 
									[RegisterVar2 |-] 
									>> node_062 
						elser (95) 
						endr 
					elif self.angle_2d_cw_between(0,90) 
						random (10) 
									[RegisterVar2 |-] 
									>> node_062 
						elser (90) 
						endr 
					else 
					endif 
				else 
					if self.angle_2d_cw_between(270,0) 
						random (10) 
									[RegisterVar2 |-] 
									>> node_062 
						elser (90) 
						endr 
					elif self.angle_2d_cw_between(0,90) 
						random (5) 
									[RegisterVar2 |-] 
									>> node_062 
						elser (95) 
						endr 
					else 
					endif 
				endif 
			else 
			endif 
		else 
		endif 
	endif 
	return 
endf 

def node_062
	if self.enraged() 
		-> brute_tigrex.super_roar_r() 
	else 
		-> brute_tigrex.super_roar_l() 
	endif 
	reset 
endf 

def node_063
	if self.distance_2d_to_target().leq(850) 
	else 
		-> brute_tigrex.dash_combat(6,2,0,750,2000) 
	endif 
	return 
endf 

def node_064
	>> node_063 
	>> node_063 
	return 
endf 

def node_065
	>> node_063 
	>> node_063 
	>> node_063 
	return 
endf 

def node_066
	if self.distance_2d_to_target().leq(3000) 
		random (40) >> node_068 
		elser (60) 
		endr 
	else 
	endif 
	return 
endf 

def node_067
	if self.distance_2d_to_target().leq(1000) 
		-> brute_tigrex.straight_rush() @ comboSetting:1 
		-> brute_tigrex.afterrush_roar() 
	else 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.afterrush_roar() 
	endif 
	return 
endf 

def node_068
	if self.distance_2d_to_target().leq(1000) 
		-> brute_tigrex.straight_rush() @ comboSetting:1 
		-> brute_tigrex.afterrush_back_step() 
	else 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.afterrush_back_step() 
	endif 
	return 
endf 

def node_069
	if self.distance_2d_to_target().leq(1200) 
		-> brute_tigrex.straight_rush() @ comboSetting:1 
		-> brute_tigrex.afterrush_back_step() 
	else 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.afterrush_back_step() 
	endif 
	>> node_061 
	if self.enraged() 
		>> node_073 
	else 
		>> node_072 
	endif 
	return 
endf 

def node_070
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_088 
		elser (75) 
		endr 
	else 
		random (50) >> node_088 
		elser (50) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.fatigued() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
		>> node_072 
	endif 
	return 
endf 

def node_071
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_088 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_088 
		elser (75) 
		endr 
	else 
		random (50) >> node_088 
		elser (50) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_072
	if self.distance_2d_to_target().leq(1000) 
		random (30) >> node_033 
		elser (0) >> node_037 
		elser (0) >> node_034 
		elser (70) >> node_057 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (0) >> node_033 
		elser (50) >> node_037 
		elser (50) >> node_034 
		elser (0) >> node_057 
		endr 
	elif self.distance_2d_to_target().leq(2000) 
		random (60) >> node_036 
		elser (40) >> node_038 
		endr 
	elif self.distance_2d_to_target().leq(3000) 
		random (60) >> node_036 
		elser (40) >> node_038 
		endr 
	elif self.distance_2d_to_target().leq(4000) 
		random (40) >> node_036 
		elser (60) >> node_038 
		endr 
	else 
		>> node_036 
	endif 
	return 
endf 

def node_073
	if self.distance_2d_to_target().leq(1000) 
		random (30) >> node_033 
		elser (0) >> node_037 
		elser (0) >> node_034 
		elser (70) >> node_057 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (0) >> node_033 
		elser (50) >> node_037 
		elser (50) >> node_034 
		elser (0) >> node_057 
		endr 
	elif self.distance_2d_to_target().leq(2000) 
		random (60) >> node_036 
		elser (40) >> node_038 
		endr 
	elif self.distance_2d_to_target().leq(3000) 
		random (60) >> node_036 
		elser (40) >> node_038 
		endr 
	elif self.distance_2d_to_target().leq(4000) 
		random (40) >> node_036 
		elser (60) >> node_038 
		endr 
	else 
		>> node_036 
	endif 
	return 
endf 

def node_074
	if self.distance_2d_to_target().leq(1200) 
		-> brute_tigrex.straight_rush() @ comboSetting:1 
		-> brute_tigrex.afterrush_drift_for_attack() 
	else 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.afterrush_drift_for_attack() 
	endif 
	>> node_061 
	>> node_081 
	return 
endf 

def node_075
	if self.distance_2d_to_target().leq(1200) 
		-> brute_tigrex.straight_rush() @ comboSetting:1 
		-> brute_tigrex.angry_rerush_drift() @ comboSetting:1 
		-> brute_tigrex.afterrush_drift_for_attack() 
	else 
		-> brute_tigrex.straight_rush() 
		-> brute_tigrex.angry_rerush_drift() @ comboSetting:1 
		-> brute_tigrex.afterrush_drift_for_attack() 
	endif 
	>> node_061 
	>> node_082 
	return 
endf 

def node_076
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_099 
	>> node_061 
	>> node_087 
	return 
endf 

def node_077
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (50) >> node_097 
		elser (50) 
		endr 
	else 
		random (100) >> node_097 
		elser (0) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.fatigued() 
		-> brute_tigrex.afterrush_stop() 
		return 
	endif 
	>> node_099 
	>> node_061 
	>> node_087 
	return 
endf 

def node_078
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (50) >> node_097 
		elser (50) 
		endr 
	else 
		random (100) >> node_097 
		elser (0) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.fatigued() 
		-> brute_tigrex.afterrush_stop() 
		return 
	endif 
	>> node_099 
	>> node_061 
	>> node_087 
	return 
endf 

def node_079
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_097 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_097 
		elser (75) 
		endr 
	else 
		random (65) >> node_097 
		elser (35) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_099 
	>> node_061 
	>> node_087 
	return 
endf 

def node_080
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (50) >> node_097 
		elser (50) 
		endr 
	else 
		random (100) >> node_097 
		elser (0) 
		endr 
	endif 
	-> brute_tigrex.afterrush_stop() 
	return 
endf 

def node_081
	if self.distance_2d_to_target().leq(550) 
		random (100) -> brute_tigrex.afterrush_max_roar_back() 
		elser (0) -> brute_tigrex.afterrush_stop() 
		endr 
	elif self.distance_2d_to_target().leq(1400) 
		random (100) -> brute_tigrex.afterrush_max_roar() 
		elser (0) -> brute_tigrex.afterrush_bite() 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		-> brute_tigrex.afterrush_rotate_attack() 
	elif self.distance_2d_to_target().leq(4000) 
		if self.vertical_distance_to_target().leq(700) 
			-> brute_tigrex.afterrush_jump_attack() 
		else 
			-> brute_tigrex.afterrush_jump_attack_wall() 
		endif 
	else 
		-> brute_tigrex.afterrush_rock_launcher() 
	endif 
	return 
endf 

def node_082
	if self.distance_2d_to_target().leq(550) 
		random (100) -> brute_tigrex.afterrush_max_roar_back() 
		elser (0) -> brute_tigrex.afterrush_stop() 
		endr 
	elif self.distance_2d_to_target().leq(1400) 
		random (100) -> brute_tigrex.afterrush_max_roar() 
		elser (0) -> brute_tigrex.afterrush_bite() 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		-> brute_tigrex.afterrush_rotate_attack() 
	elif self.distance_2d_to_target().leq(4000) 
		if self.vertical_distance_to_target().leq(700) 
			-> brute_tigrex.afterrush_jump_attack() 
		else 
			-> brute_tigrex.afterrush_jump_attack_wall() 
		endif 
	else 
		-> brute_tigrex.afterrush_rock_launcher() 
	endif 
	return 
endf 

def node_083
	if self.distance_3d_to_target().leq(5000) 
		if self.enraged() 
			if self.target.helpless_0() 
				random (15) >> node_085 
				elser (85) 
				endr 
			elif self.target.helpless_1() 
				random (15) >> node_085 
				elser (85) 
				endr 
			else 
			endif 
		else 
			if self.target.helpless_0() 
				random (15) >> node_084 
				elser (85) 
				endr 
			elif self.target.helpless_1() 
				random (15) >> node_084 
				elser (85) 
				endr 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_084
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
	else 
		>> node_097 
	endif 
	-> brute_tigrex.afterrush_stop() 
	return 
endf 

def node_085
	-> brute_tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_097 
	if self.target.helpless_0() 
		-> brute_tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_097 
		elser (75) 
		endr 
	else 
		random (65) >> node_097 
		elser (35) 
		endr 
	endif 
	-> brute_tigrex.afterrush_stop() 
	return 
endf 

def node_086
	-> brute_tigrex.straight_rush(6,0,0,1200) 
	>> node_061 
	>> node_087 
	return 
endf 

def node_087
	if self.distance_2d_to_target().leq(650) 
		random (100) -> brute_tigrex.afterrush_max_roar_back() 
		elser (0) -> brute_tigrex.afterrush_stop() 
		endr 
	elif self.distance_2d_to_target().leq(1300) 
		random (100) -> brute_tigrex.afterrush_max_roar() 
		elser (0) -> brute_tigrex.afterrush_bite() 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		-> brute_tigrex.afterrush_rotate_attack() 
	elif self.distance_2d_to_target().leq(4000) 
		if self.vertical_distance_to_target().leq(700) 
			-> brute_tigrex.afterrush_jump_attack() 
		else 
			-> brute_tigrex.afterrush_jump_attack_wall() 
		endif 
	else 
		-> brute_tigrex.afterrush_rock_launcher() 
	endif 
	return 
endf 

def node_088
	if function#102() 
		reset 
	elif self.fatigued() 
		>> node_098 
	else 
		if self.angle_2d_ccw_between(20,0) 
			return 
		else 
			-> brute_tigrex.rerush_drift() 
		endif 
	endif 
	return 
endf 

def node_089
	-> brute_tigrex.afterrush_drift_for_attack() 
	return 
endf 

def node_090
	if function#102() 
		reset 
	else 
		-> brute_tigrex.afterrush_rotate_attack() 
	endif 
	reset 
endf 

def node_091
	if function#102() 
		reset 
	else 
		-> brute_tigrex.afterrush_bite() 
	endif 
	reset 
endf 

def node_092
	if function#102() 
		reset 
	else 
		-> brute_tigrex.afterrush_back_step() 
	endif 
	reset 
endf 

def node_093
	[RegisterVar0 |-] 
	if function#102() 
		reset 
	else 
		-> brute_tigrex.afterrush_stop() 
	endif 
	>> node_102 
	reset 
endf 

def node_094
	-> brute_tigrex.afterdrift_bite_min() 
	reset 
endf 

def node_095
	-> brute_tigrex.afterdrift_bite_max() 
	reset 
endf 

def node_096
	-> brute_tigrex.afterdrift_rotate_attack() 
	reset 
endf 

def node_097
	if function#102() 
		[RegisterVar1 |-] 
		reset 
	elif self.angle_2d_ccw_between(20,0) 
		return 
	else 
		>> node_088 
	endif 
	return 
endf 

def node_098
	if [RegisterVar1 <= 1] 
		[RegisterVar1 |-] 
		-> brute_tigrex.tired_rerush_drift() 
		reset 
	else 
		[RegisterVar1 ++] 
		-> brute_tigrex.rerush_drift() 
	endif 
	return 
endf 

def node_099
	if self.angle_2d_ccw_between(20,0) 
		return 
	else 
		if [RegisterVar1 <= 3] 
			[RegisterVar1 |-] 
			-> brute_tigrex.tired_rerush_drift() 
			reset 
		else 
			-> brute_tigrex.afterrush_drift_for_attack() 
		endif 
	endif 
	return 
endf 

def node_100
	if self.target(10) 
		-> brute_tigrex.navi_rush(2,1,0,10000,800) 
		>> node_102 
	else 
		[RegisterVar0 ++] 
		-> brute_tigrex.navi_rush(2,1,0,2000,800) 
	endif 
	if self.distance_2d_to_target().leq(800) 
		[RegisterVar0 |-] 
		-> brute_tigrex.afterrush_stop() 
	else 
		>> node_101 
	endif 
	return 
endf 

def node_101
	if self.target(10) 
		-> brute_tigrex.navi_rush(2,1,0,10000,1500) @ unkn6:65536 
		>> node_102 
	else 
		-> brute_tigrex.navi_rush(2,1,0,2000,800) @ unkn6:65536 
	endif 
	if self.distance_3d_to_target().leq(800) 
		[RegisterVar0 |-] 
		-> brute_tigrex.afterrush_stop() 
	elif [RegisterVar0 <= 3] 
		[RegisterVar0 |-] 
		-> brute_tigrex.afterrush_stop() 
	else 
		[RegisterVar0 ++] 
		repeat 
	endif 
	return 
endf 

def node_102
	if function#102() 
		reset 
	else 
		if self.fatigued() 
			-> brute_tigrex.afterrush_stop() 
		else 
			-> brute_tigrex.afterrush_roar() 
			-> brute_tigrex.roar() 
		endif 
	endif 
	reset 
endf 

def node_103
	[RegisterVar4 |-] 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#5D() 
		function#5E() 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> node_109 
		self.targetArea(4) 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	if self.in_map(st.Ancient_Forest).in_area(5) 
		if self.vertical_distance_to_target().gt(350) 
			[RegisterVar4 ++] 
		elif self.target(52) 
			[RegisterVar4 ++] 
		else 
			[RegisterVar4 |-] 
		endif 
	elif self.in_map(st.Ancient_Forest).in_area(2) 
		if self.vertical_distance_to_target().gt(340) 
			[RegisterVar4 ++] 
		elif self.target(52) 
			[RegisterVar4 ++] 
		else 
			[RegisterVar4 |-] 
		endif 
	else 
		if self.vertical_distance_to_target().gt(400) 
			[RegisterVar4 ++] 
		elif self.target(52) 
			[RegisterVar4 ++] 
		else 
			[RegisterVar4 |-] 
		endif 
	endif 
	return 
endf 

def node_104
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1000) 
		>> Global.node_012 
		repeat 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> Global.node_010 
		random (15) -> brute_tigrex.wait() 
		elser (25) -> brute_tigrex.search() 
		elser (37) -> brute_tigrex.sniff_s() 
		elser (23) -> brute_tigrex.sniff_l() 
		endr 
	endif 
	return 
endf 

def node_105
	if self.vertical_distance_to_target().leq(700) 
		if self.distance_3d_to_target().gt(2500) 
			>> node_106 
		elif self.distance_2d_to_target().leq(3000) 
			random (53) >> node_100 
			elser (47) >> node_038 
			endr 
		else 
			>> node_100 
		endif 
	else 
		>> node_100 
	endif 
	return 
endf 

def node_106
	if self.fatigued() 
		-> brute_tigrex.dash_tired(1,2,0,850,3000) 
	else 
		-> brute_tigrex.dash_combat(1,2,0,850,3000) 
		*&
	endif 
	return 
endf 

def node_107
	if self.above_target() 
		if function#11(1000) 
			>> node_054 
		else 
			if self.distance_2d_to_target().gt(1500) 
				>> node_065 
			elif self.distance_2d_to_target().leq(500) 
				-> brute_tigrex.move_back() 
			endif 
			-> brute_tigrex.jump_attack_wall_up() 
		endif 
	else 
		if self.target(0) @ parameter2:1 
			if self.distance_2d_to_target().gt(1500) 
				>> node_065 
			else 
			endif 
			-> brute_tigrex.jump_attack_wall_down() 
		else 
			self.targetArea(77) 
			-> brute_tigrex.dash_combat(2,0,0,1000) 
		endif 
	endif 
	return 
endf 

def node_108
	if self.distance_2d_to_target().gt(500) 
		>> node_065 
	else 
		-> brute_tigrex.move_back() 
	endif 
	-> brute_tigrex.jump_attack_wall_up() 
	return 
endf 

def node_109
	if self.angle_2d_cw_between(90,270) 
		-> brute_tigrex.lost_search_front() 
	elif self.distance_3d_to_target().gt(3000) 
		-> brute_tigrex.lost_search_front() 
	else 
		-> brute_tigrex.lost_search_back() 
	endif 
	return 
endf 

def node_110
	>> node_100 
	return 
endf 

def node_111
	>> node_029 
	>> node_112 
	return 
endf 

def node_112
	if self.distance_2d_to_target().leq(800) 
		random (40) >> node_032 
		elser (20) >> node_037 
		elser (15) >> node_033 
		elser (25) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (40) >> node_032 
		elser (20) >> node_037 
		elser (15) >> node_033 
		elser (25) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (50) >> node_037 
		elser (50) >> node_034 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		>> node_036 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_038 
	else 
	endif 
	return 
endf 

def node_113
	if self.distance_2d_to_target().leq(1000) 
		random (85) >> node_029 
		elser (15) >> node_033 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (65) >> node_035 
		elser (35) >> node_036 
		endr 
	else 
		>> node_036 
	endif 
	return 
endf 

def node_114
	-> brute_tigrex.straight_rush(6,0,0,1200) 
	>> node_115 
	return 
endf 

def node_115
	if self.fatigued() 
		-> brute_tigrex.afterrush_stop() 
	elif self.distance_2d_to_target().leq(650) 
		-> brute_tigrex.afterrush_stop() 
	elif self.distance_2d_to_target().leq(1300) 
		-> brute_tigrex.afterrush_bite() 
	elif self.distance_2d_to_target().leq(2000) 
		-> brute_tigrex.afterrush_rotate_attack() 
	else 
		-> brute_tigrex.afterrush_stop() 
	endif 
	return 
endf 

