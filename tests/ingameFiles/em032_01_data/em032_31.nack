importactions Brute_Tigrex as brute_tigrex
importlibrary Global as Global

def node_000
	>> Global.node_020 
	>> Global.node_030 
	self.targetEnemy(target_em.closest_entity) 
	>> node_003 
	>> node_001 
	reset 
endf 

def node_001
	>> Global.node_023 
	if self.distance_3d_to_target().leq(1200) 
		>> node_002 
	elif self.distance_3d_to_target().leq(3000) 
		>> node_006 
	else 
		random (20) >> node_005 
		elser (80) 
		endr 
		>> node_006 
	endif 
	return 
endf 

def node_002
	>> Global.node_023 
	self.targetEnemy(target_em.closest_entity) 
	if self.target(11) 
		>> node_004 
		repeat 
	elif self.distance_3d_to_target().leq(600) 
		-> brute_tigrex.move_back() 
	elif self.distance_3d_to_target().leq(1000) 
		-> brute_tigrex.quick_turn() 
	else 
		>> node_006 
		repeat 
	endif 
	-> brute_tigrex.max_roar_single() 
	return 
endf 

def node_003
	if self.target_is(em.Aptonoth) 
	elif self.target_is(em.Apceros) 
	elif self.target_is(em.Raphinos) 
	elif self.target_is(em.Gastodon) 
	elif self.target_is(em.Popo) 
	else 
		conclude 
	endif 
	if self.target(13) 
		conclude 
	else 
	endif 
	if self.target(11) 
		conclude 
	else 
	endif 
	return 
endf 

def node_004
	if self.angle_2d_cw_between(40,320) 
		-> brute_tigrex.quick_turn() 
	else 
	endif 
	return 
endf 

def node_005
	>> node_004 
	-> brute_tigrex.predator_walk() 
	return 
endf 

def node_006
	-> brute_tigrex.dash_tired(2,1,0,1500,700) 
	return 
endf 

