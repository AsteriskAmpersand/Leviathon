importactions Tigrex as tigrex
importlibrary Global as Global

def node_000
	>> Global.node_020 
	>> Global.node_001 
	>> node_060 
	if self.target(4) 
		>> node_061 => reset 
	elif self.target(3) 
		>> node_061 => reset 
	elif self.target(55) 
		>> node_001 => reset 
	elif function#41() 
		>> Global.node_026 => reset 
	elif self.target(12) 
		>> node_068 => reset 
	elif self.target(14) 
		>> node_065 => reset 
	elif self.target(11) 
		>> node_063 => reset 
	elif self.target(0) 
		>> node_064 => reset 
	elif [RegisterVar3 == 1] 
		>> node_062 => reset 
	else 
		>> node_001 
	endif 
	reset 
endf 

def node_001
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() >> node_007 
		elif self.fatigued() >> node_012 
		else >> node_002 
		endif 
	elif self.distance_2d_to_target().leq(1000) 
		if self.enraged() >> node_008 
		elif self.fatigued() >> node_013 
		else >> node_003 
		endif 
	elif self.distance_2d_to_target().leq(1600) 
		if self.enraged() >> node_009 
		elif self.fatigued() >> node_014 
		else >> node_004 
		endif 
	elif self.distance_2d_to_target().leq(3500) 
		if self.enraged() >> node_010 
		elif self.fatigued() >> node_015 
		else >> node_005 
		endif 
	else 
		if self.enraged() >> node_011 
		elif self.fatigued() >> node_016 
		else >> node_006 
		endif 
	endif 
	>> node_040 
	return 
endf 

def node_002
	random (40) >> node_017 
	elser (15) >> node_021 
	elser (10) >> node_023 
	elser (5) >> node_025 
	elser (20) >> node_036 
	elser (10) >> node_033 
	endr 
	return 
endf 

def node_003
	random (35) >> node_017 
	elser (5) >> node_021 
	elser (20) >> node_023 
	elser (10) >> node_025 
	elser (20) >> node_036 
	elser (10) >> node_033 
	endr 
	return 
endf 

def node_004
	random (30) >> node_030 
				>> node_017 
	elser (20) >> node_023 
	elser (20) >> node_025 
	elser (20) >> node_036 
	elser (10) >> node_033 
	endr 
	return 
endf 

def node_005
	random (15) >> node_031 
				>> node_028 
	elser (30) >> node_027 
				>> node_028 
	elser (25) >> node_025 
	elser (30) >> node_036 
	elser (0) >> node_043 
	endr 
	return 
endf 

def node_006
	random (25) >> node_032 
				>> node_028 
	elser (25) >> node_027 
				>> node_028 
	elser (0) >> node_025 
	elser (0) >> node_036 
	elser (50) >> node_043 
	endr 
	return 
endf 

def node_007
	random (35) >> node_017 
	elser (20) >> node_021 
	elser (15) >> node_023 
	elser (0) >> node_025 
	elser (20) >> node_037 
	elser (10) >> node_034 
	endr 
	return 
endf 

def node_008
	random (35) >> node_017 
	elser (10) >> node_021 
	elser (15) >> node_023 
	elser (10) >> node_025 
	elser (20) >> node_037 
	elser (10) >> node_034 
	endr 
	return 
endf 

def node_009
	random (30) >> node_030 
				>> node_017 
	elser (20) >> node_023 
	elser (20) >> node_025 
	elser (20) >> node_037 
	elser (10) >> node_034 
	endr 
	return 
endf 

def node_010
	random (15) >> node_031 
				>> node_028 
	elser (30) >> node_027 
				>> node_028 
	elser (25) >> node_025 
	elser (30) >> node_037 
	elser (0) >> node_043 
	endr 
	return 
endf 

def node_011
	random (25) >> node_032 
				>> node_028 
	elser (25) >> node_027 
				>> node_028 
	elser (0) >> node_025 
	elser (0) >> node_037 
	elser (50) >> node_043 
	endr 
	return 
endf 

def node_012
	random (45) >> node_018 
	elser (5) >> node_021 
	elser (10) >> node_023 
	elser (10) >> node_025 
	elser (30) >> node_038 
	endr 
	return 
endf 

def node_013
	random (40) >> node_018 
	elser (5) >> node_021 
	elser (15) >> node_023 
	elser (10) >> node_025 
	elser (30) >> node_038 
	endr 
	return 
endf 

def node_014
	random (30) >> node_030 
				>> node_018 
	elser (15) >> node_023 
	elser (15) >> node_025 
	elser (40) >> node_038 
	endr 
	return 
endf 

def node_015
	random (10) >> node_031 
				>> node_029 
	elser (25) >> node_027 
				>> node_029 
	elser (20) >> node_025 
	elser (45) >> node_038 
	elser (0) >> node_043 
	endr 
	return 
endf 

def node_016
	random (25) >> node_032 
				>> node_029 
	elser (25) >> node_027 
				>> node_029 
	elser (0) >> node_025 
	elser (50) >> node_038 
	elser (0) >> node_043 
	endr 
	return 
endf 

def node_017
	>> node_018 
	>> node_019 
	return 
endf 

def node_018
	if self.distance_2d_to_target().leq(750) 
		-> tigrex.check_bite() 
	else 
		-> tigrex.bite_min() 
	endif 
	return 
endf 

def node_019
	if self.distance_2d_to_target().leq(800) 
		random (65) >> node_020 
		elser (10) >> node_025 
		elser (5) >> node_021 
		elser (20) >> node_023 
		endr 
	elif self.distance_2d_to_target().leq(1000) 
		random (40) >> node_020 
		elser (25) >> node_025 
		elser (5) >> node_021 
		elser (30) >> node_023 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (50) >> node_025 
		elser (50) >> node_023 
		endr 
	elif self.distance_2d_to_target().leq(2500) 
		>> node_024 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_026 
	else 
	endif 
	return 
endf 

def node_020
	if self.angle_2d_cw_between(0,90) 
		-> tigrex.check_attack_l() 
	elif self.angle_2d_cw_between(270,0) 
		-> tigrex.check_attack_r() 
	elif self.angle_2d_cw_between(90,180) 
		-> tigrex.back_tail_attack() 
	else 
		-> tigrex.back_tail_attack_r() 
	endif 
	return 
endf 

def node_021
	-> tigrex.rotate_attack_r() 
	return 
endf 

def node_022
	-> tigrex.bite_max() 
	return 
endf 

def node_023
	if self.distance_2d_to_target().leq(600) 
		-> tigrex.move_back() 
	else 
	endif 
	-> tigrex.bite_max() 
	return 
endf 

def node_024
	if self.angle_2d_cw_between(180,0) 
		-> tigrex.rock_launcher_r() 
	else 
		-> tigrex.rock_launcher_l() 
	endif 
	return 
endf 

def node_025
	if self.distance_2d_to_target().leq(1000) 
		-> tigrex.move_back() 
	else 
	endif 
	>> node_024 
	return 
endf 

def node_026
	if self.distance_2d_to_target().leq(1700) 
		-> tigrex.move_back() 
	else 
	endif 
	if self.vertical_distance_to_target().leq(600) 
		-> tigrex.jump_attack() 
	else 
		-> tigrex.jump_attack_wall() 
	endif 
	return 
endf 

def node_027
	if self.distance_2d_to_target().leq(1500) 
		>> node_030 
	elif self.distance_2d_to_target().leq(4000) 
		>> node_026 
	else 
		>> node_032 
	endif 
	return 
endf 

def node_028
	if self.distance_2d_to_target().leq(1000) 
		random (75) >> node_017 
		elser (25) >> node_021 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (65) >> node_022 
		elser (35) >> node_024 
		endr 
	else 
		>> node_024 
	endif 
	return 
endf 

def node_029
	if self.distance_2d_to_target().leq(1000) 
		random (85) >> node_018 
		elser (15) >> node_021 
		endr 
	elif self.distance_2d_to_target().leq(1600) 
		random (65) >> node_022 
		elser (35) >> node_024 
		endr 
	else 
		>> node_024 
	endif 
	return 
endf 

def node_030
	if self.distance_2d_to_target().leq(950) 
	else 
		-> tigrex.dash_combat(6,2,0,850,2000) 
	endif 
	return 
endf 

def node_031
	>> node_030 
	>> node_030 
	return 
endf 

def node_032
	>> node_030 
	>> node_030 
	>> node_030 
	return 
endf 

def node_033
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (50) >> node_045 
		elser (50) 
		endr 
	else 
		random (100) >> node_045 
		elser (0) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.fatigued() 
		-> tigrex.afterrush_stop() 
		return 
	else 
		-> tigrex.afterrush_back_step() 
	endif 
	>> node_035 
	return 
endf 

def node_034
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_045 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_045 
		elser (75) 
		endr 
	else 
		random (65) >> node_045 
		elser (35) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	else 
		-> tigrex.afterrush_back_step() 
	endif 
	>> node_035 
	return 
endf 

def node_035
	if self.distance_2d_to_target().leq(1000) 
		random (50) >> node_021 
		elser (20) >> node_025 
		elser (30) >> node_023 
		endr 
	elif self.distance_2d_to_target().leq(1500) 
		random (0) >> node_021 
		elser (50) >> node_025 
		elser (50) >> node_023 
		endr 
	elif self.distance_2d_to_target().leq(2000) 
		random (60) >> node_024 
		elser (40) >> node_026 
		endr 
	elif self.distance_2d_to_target().leq(3000) 
		random (60) >> node_024 
		elser (40) >> node_026 
		endr 
	elif self.distance_2d_to_target().leq(4000) 
		random (40) >> node_024 
		elser (60) >> node_026 
		endr 
	else 
		>> node_024 
	endif 
	return 
endf 

def node_036
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (50) >> node_054 
		elser (50) 
		endr 
	else 
		random (100) >> node_054 
		elser (0) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.fatigued() 
		-> tigrex.afterrush_stop() 
		return 
	endif 
	>> node_056 
	>> node_039 
	return 
endf 

def node_037
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_054 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_054 
		elser (75) 
		endr 
	else 
		random (65) >> node_054 
		elser (35) 
		endr 
	endif 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_056 
	>> node_039 
	return 
endf 

def node_038
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (50) >> node_054 
		elser (50) 
		endr 
	else 
		random (100) >> node_054 
		elser (0) 
		endr 
	endif 
	-> tigrex.afterrush_stop() 
	return 
endf 

def node_039
	if self.quest_id(66855) 
		if self.distance_2d_to_target().leq(975) 
			-> tigrex.afterrush_stop() 
		elif self.distance_2d_to_target().leq(1950) 
			-> tigrex.afterrush_bite() 
		elif self.distance_2d_to_target().leq(3750) 
			-> tigrex.afterrush_rotate_attack() 
		elif self.distance_2d_to_target().leq(6000) 
			if self.vertical_distance_to_target().leq(700) 
				-> tigrex.afterrush_jump_attack() 
			else 
				-> tigrex.afterrush_jump_attack_wall() 
			endif 
		else 
			-> tigrex.afterrush_rock_launcher() 
		endif 
	else 
		if self.distance_2d_to_target().leq(650) 
			-> tigrex.afterrush_stop() 
		elif self.distance_2d_to_target().leq(1300) 
			-> tigrex.afterrush_bite() 
		elif self.distance_2d_to_target().leq(2500) 
			-> tigrex.afterrush_rotate_attack() 
		elif self.distance_2d_to_target().leq(4000) 
			if self.vertical_distance_to_target().leq(700) 
				-> tigrex.afterrush_jump_attack() 
			else 
				-> tigrex.afterrush_jump_attack_wall() 
			endif 
		else 
			-> tigrex.afterrush_rock_launcher() 
		endif 
	endif 
	return 
endf 

def node_040
	if self.distance_3d_to_target().leq(5000) 
		if self.enraged() 
			if self.target.helpless_0() 
				random (15) >> node_042 
				elser (85) 
				endr 
			elif self.target.helpless_1() 
				random (15) >> node_042 
				elser (85) 
				endr 
			else 
			endif 
		else 
			if self.target.helpless_0() 
				random (15) >> node_041 
				elser (85) 
				endr 
			elif self.target.helpless_1() 
				random (15) >> node_041 
				elser (85) 
				endr 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_041
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
	else 
		>> node_054 
	endif 
	-> tigrex.afterrush_stop() 
	return 
endf 

def node_042
	-> tigrex.straight_rush() 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	else 
	endif 
	>> node_054 
	if self.target.helpless_0() 
		-> tigrex.afterrush_stop() 
		return 
	elif self.distance_2d_to_target().leq(1250) 
		random (25) >> node_054 
		elser (75) 
		endr 
	else 
		random (65) >> node_054 
		elser (35) 
		endr 
	endif 
	-> tigrex.afterrush_stop() 
	return 
endf 

def node_043
	-> tigrex.straight_rush(6,0,0,1200) 
	>> node_044 
	return 
endf 

def node_044
	if self.quest_id(66853) 
		if self.fatigued() 
			-> tigrex.afterrush_stop() 
		elif self.distance_2d_to_target().leq(975) 
			-> tigrex.afterrush_stop() 
		elif self.distance_2d_to_target().leq(1950) 
			-> tigrex.afterrush_bite() 
		elif self.distance_2d_to_target().leq(3750) 
			-> tigrex.afterrush_rotate_attack() 
		else 
			-> tigrex.afterrush_stop() 
		endif 
	else 
		if self.fatigued() 
			-> tigrex.afterrush_stop() 
		elif self.distance_2d_to_target().leq(650) 
			-> tigrex.afterrush_stop() 
		elif self.distance_2d_to_target().leq(1300) 
			-> tigrex.afterrush_bite() 
		elif self.distance_2d_to_target().leq(2500) 
			-> tigrex.afterrush_rotate_attack() 
		else 
			-> tigrex.afterrush_stop() 
		endif 
	endif 
	return 
endf 

def node_045
	if function#102() 
		reset 
	elif self.fatigued() 
		>> node_055 
	else 
		if self.angle_2d_ccw_between(20,0) 
			return 
		else 
			-> tigrex.rerush_drift() 
		endif 
	endif 
	return 
endf 

def node_046
	-> tigrex.afterrush_drift_for_attack() 
	return 
endf 

def node_047
	if function#102() 
		reset 
	else 
		-> tigrex.afterrush_rotate_attack() 
	endif 
	reset 
endf 

def node_048
	if function#102() 
		reset 
	else 
		-> tigrex.afterrush_bite() 
	endif 
	reset 
endf 

def node_049
	if function#102() 
		reset 
	else 
		-> tigrex.afterrush_back_step() 
	endif 
	reset 
endf 

def node_050
	[RegisterVar0 |-] 
	if function#102() 
		reset 
	else 
		-> tigrex.afterrush_stop() 
	endif 
	>> node_059 
	reset 
endf 

def node_051
	-> tigrex.afterdrift_bite_min() 
	reset 
endf 

def node_052
	-> tigrex.afterdrift_bite_max() 
	reset 
endf 

def node_053
	-> tigrex.afterdrift_rotate_attack() 
	reset 
endf 

def node_054
	if function#102() 
		[RegisterVar1 |-] 
		reset 
	elif self.angle_2d_ccw_between(20,0) 
		return 
	else 
		>> node_045 
	endif 
	return 
endf 

def node_055
	if [RegisterVar1 <= 1] 
		[RegisterVar1 |-] 
		-> tigrex.tired_rerush_drift() 
		reset 
	else 
		[RegisterVar1 ++] 
		-> tigrex.rerush_drift() 
	endif 
	return 
endf 

def node_056
	if self.angle_2d_ccw_between(20,0) 
		return 
	else 
		if [RegisterVar1 <= 3] 
			[RegisterVar1 |-] 
			-> tigrex.tired_rerush_drift() 
		else 
			-> tigrex.afterrush_drift_for_attack() 
		endif 
		return 
	endif 
	return 
endf 

def node_057
	if self.target(10) 
		-> tigrex.navi_rush(2,1,0,10000,800) 
		>> node_059 
	else 
		[RegisterVar0 ++] 
		-> tigrex.navi_rush(2,1,0,2000,800) 
	endif 
	if self.distance_3d_to_target().leq(800) 
		[RegisterVar0 |-] 
		-> tigrex.afterrush_stop() 
	else 
		>> node_058 
	endif 
	return 
endf 

def node_058
	if self.target(10) 
		-> tigrex.navi_rush(2,1,0,10000,1500) @ unkn6:65536 
		>> node_059 
	else 
		-> tigrex.navi_rush(2,1,0,2000,800) @ unkn6:65536 
	endif 
	if self.distance_3d_to_target().leq(800) 
		[RegisterVar0 |-] 
		-> tigrex.afterrush_stop() 
	elif [RegisterVar0 <= 3] 
		[RegisterVar0 |-] 
		-> tigrex.afterrush_stop() 
	else 
		[RegisterVar0 ++] 
		repeat 
	endif 
	return 
endf 

def node_059
	if function#102() 
		reset 
	else 
		if self.fatigued() 
			-> tigrex.afterrush_stop() 
		else 
			-> tigrex.afterrush_roar() 
			-> tigrex.roar() 
		endif 
	endif 
	reset 
endf 

def node_060
	[RegisterVar3 |-] 
	self.targetEnemy(target_em.random_player_or_cat) 
	if function#5D() 
		function#5E() 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> node_067 
		self.targetArea(4) 
	elif self.target.mudded() 
		>> node_066 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
	endif 
	if self.in_map(st.Ancient_Forest).in_area(5) 
		if self.vertical_distance_to_target().gt(350) 
			[RegisterVar3 ++] 
		elif self.target(52) 
			[RegisterVar3 ++] 
		else 
			[RegisterVar3 |-] 
		endif 
	elif self.in_map(st.Ancient_Forest).in_area(2) 
		if self.vertical_distance_to_target().gt(340) 
			[RegisterVar3 ++] 
		elif self.target(52) 
			[RegisterVar3 ++] 
		else 
			[RegisterVar3 |-] 
		endif 
	else 
		if self.vertical_distance_to_target().gt(400) 
			[RegisterVar3 ++] 
		elif self.target(52) 
			[RegisterVar3 ++] 
		else 
			[RegisterVar3 |-] 
		endif 
	endif 
	return 
endf 

def node_061
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(1000) 
		>> Global.node_012 
		repeat 
	else 
		self.targetEnemy(target_em.random_player_or_cat) 
		>> Global.node_010 
		random (15) -> tigrex.wait() 
		elser (25) -> tigrex.search() 
		elser (37) -> tigrex.sniff_s() 
		elser (23) -> tigrex.sniff_l() 
		endr 
	endif 
	return 
endf 

def node_062
	if self.vertical_distance_to_target().leq(700) 
		if self.distance_2d_to_target().leq(2500) 
			>> node_063 
		elif self.distance_2d_to_target().leq(3000) 
			random (53) >> node_057 
			elser (47) >> node_026 
			endr 
		else 
			>> node_057 
		endif 
	else 
		>> node_057 
	endif 
	return 
endf 

def node_063
	if self.fatigued() 
		-> tigrex.dash_tired(1,2,0,850,3000) 
	else 
		-> tigrex.dash_combat(1,2,0,850,3000) 
		*&
	endif 
	return 
endf 

def node_064
	if self.above_target() 
		if self.distance_2d_to_target().gt(1500) 
			>> node_032 
		elif self.distance_2d_to_target().leq(500) 
			-> tigrex.move_back() 
		endif 
		-> tigrex.jump_attack_wall_up() 
	else 
		if self.target(0) @ parameter2:1 
			if self.distance_2d_to_target().gt(1500) 
				>> node_032 
			else 
			endif 
			-> tigrex.jump_attack_wall_down() 
		else 
			self.targetArea(77) 
			-> tigrex.dash_combat(2,0,0,1000) 
		endif 
	endif 
	return 
endf 

def node_065
	if self.distance_2d_to_target().gt(500) 
		>> node_032 
	else 
		-> tigrex.move_back() 
	endif 
	-> tigrex.jump_attack_wall_up() 
	return 
endf 

def node_066
	>> node_032 
	>> node_023 
	return 
endf 

def node_067
	if self.angle_2d_cw_between(90,270) 
		-> tigrex.lost_search_front() 
	elif self.distance_3d_to_target().gt(3000) 
		-> tigrex.lost_search_front() 
	else 
		-> tigrex.lost_search_back() 
	endif 
	return 
endf 

def node_068
	>> node_057 
	return 
endf 

