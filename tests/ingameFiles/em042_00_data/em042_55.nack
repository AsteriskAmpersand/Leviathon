importactions Barioth as barioth

def node_000 : 455
	self.targetEnemy(50) 
	>> node_075 
	>> node_003 
	conclude 
endf 

def node_001 : 250
	if function#101() 
		-> barioth.idle_wall_no_interrupt_s() 
	elif self.flying() 
		-> barioth.idle_fly_no_interrupt_s() 
	elif self.fatigued() 
		-> barioth.idle_tired() 
	else 
		-> barioth.idle_no_interrupt_s() 
	endif 
	return 
endf 

def node_002 : 263
	if function#101() 
		-> barioth.idle_wall_no_interrupt_l() 
	elif self.flying() 
		-> barioth.idle_fly_no_interrupt_l() 
	elif self.fatigued() 
		-> barioth.idle_tired() 
	else 
		-> barioth.idle_no_interrupt_l() 
	endif 
	return 
endf 

def node_003 : 231
	if function#101() 
		>> node_103 
	elif self.flying() 
		if function#AF(5000) 
			-> barioth.landing() 
		else 
			>> node_023 
		endif 
	else 
	endif 
	return 
endf 

def node_004 : 232
	if function#101() 
		>> node_103 
	else 
	endif 
	if self.flying() 
	else 
		-> barioth.take_off() 
	endif 
	return 
endf 

def node_005 : 225
	if self.flying() 
	elif self.in_combat() 
	else 
		-> barioth.trans_combat() 
	endif 
	return 
endf 

def node_006 : 226
	if self.flying() 
	elif self.in_combat() 
		-> barioth.trans_normal() 
	else 
	endif 
	return 
endf 

def node_007 : 219
	if self.flying() 
		if self.in_combat() 
			-> barioth.turn_fly_quick() 
		else 
			-> barioth.turn_fly() 
		endif 
	else 
		if self.in_combat() 
			-> barioth.turn_quick() 
		else 
			-> barioth.turn() 
		endif 
	endif 
	return 
endf 

def node_008 : 220
	if self.angle_2d_cw_between(30,330) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_009 : 221
	if self.angle_2d_cw_between(60,300) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_010 : 223
	if self.angle_2d_cw_between(90,270) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_011 : 224
	if self.angle_2d_cw_between(120,240) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_012 : 227
	>> node_003 
	if self.distance_2d_to_target().gt(500) 
		if self.in_combat() 
			-> barioth.dash_combat(6,0,0,500) 
		else 
			-> barioth.dash(6,0,0,500) 
		endif 
	else 
	endif 
	return 
endf 

def node_013 : 233
	>> node_003 
	if self.distance_2d_to_target().gt(1000) 
		if self.in_combat() 
			-> barioth.dash_combat(6,0,0,1000) 
		else 
			-> barioth.dash(6,0,0,1000) 
		endif 
	else 
	endif 
	return 
endf 

def node_014 : 234
	>> node_003 
	if self.distance_2d_to_target().gt(1500) 
		if self.in_combat() 
			-> barioth.dash_combat(6,0,0,1500) 
		else 
			-> barioth.dash(6,0,0,1500) 
		endif 
	else 
	endif 
	return 
endf 

def node_015 : 228
	>> node_003 
	if self.in_combat() 
		-> barioth.dash_combat(1,2,0,800,1500) 
	else 
		-> barioth.dash(1,2,0,800,1500) 
	endif 
	return 
endf 

def node_016 : 235
	>> node_003 
	if self.in_combat() 
		-> barioth.dash_combat(1,2,0,800,3000) 
	else 
		-> barioth.dash(1,2,0,800,3000) 
	endif 
	return 
endf 

def node_017 : 27
	>> node_003 
	if self.distance_2d_to_target().leq(500) 
	else 
		if self.in_combat() 
			-> barioth.dash_combat(6,2,0,500,1000) 
		else 
			-> barioth.dash(6,2,0,500,1000) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_018 : 236
	>> node_003 
	if self.distance_2d_to_target().leq(800) 
	else 
		if self.in_combat() 
			-> barioth.dash_combat(6,2,0,800,1500) 
		else 
			-> barioth.dash(6,2,0,800,1500) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_019 : 361
	>> node_003 
	if self.fatigued() 
		-> barioth.walk_tired(1,2,5,800,1500) 
	elif self.in_combat() 
		-> barioth.walk_combat(1,2,5,800,1500) 
	else 
		-> barioth.walk(1,2,5,800,1500) 
	endif 
	return 
endf 

def node_020 : 328
	>> node_003 
	if self.distance_2d_to_target().leq(500) 
	else 
		if self.fatigued() 
			-> barioth.walk_tired(6,2,0,500,1000) 
		elif self.in_combat() 
			-> barioth.walk_combat(6,2,0,500,1000) 
		else 
			-> barioth.walk(6,2,0,500,1000) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_021 : 452
	>> node_003 
	if self.fatigued() 
		-> barioth.walk_tired(6,0,0,500) 
	elif self.in_combat() 
		-> barioth.walk_combat(6,0,0,500) 
	else 
		-> barioth.walk(6,0,0,500) 
	endif 
	return 
endf 

def node_022 : 456
	>> node_003 
	if self.distance_2d_to_target().gt(2000) 
		if self.in_combat() 
			-> barioth.dash_combat(6,2,0,2000,3000) 
		else 
			-> barioth.dash(6,2,0,2000,3000) 
		endif 
		repeat 
	elif self.distance_2d_to_target().gt(500) 
		if self.fatigued() 
			-> barioth.walk_tired(6,2,0,500,1000) 
		elif self.in_combat() 
			-> barioth.walk_combat(6,2,0,500,1000) 
		else 
			-> barioth.walk(6,2,0,500,1000) 
		endif 
		repeat 
	elif self.distance_2d_to_target().leq(200) 
		-> barioth.turn_back_step() 
	else 
	endif 
	return 
endf 

def node_023 : 230
	self.targetArea(target_area.area_aerial_center) 
	>> node_210 
	self.targetArea(target_area.area_center) 
	-> barioth.landing() 
	return 
endf 

def node_024 : 229
	if self.distance_2d_to_target().leq(600) 
	else 
		-> barioth.glide_combat(6,2,0,500,3000) 
		repeat 
	endif 
	return 
endf 

def node_025 : 238
	>> node_003 
	[RegisterVar2 |-] 
	-> barioth.threat() 
	return 
endf 

def node_026 : 239
	>> node_003 
	[RegisterVar2 |-] 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.short_threat() 
	else 
		-> barioth.short_threat_r() 
	endif 
	return 
endf 

def node_027 : 240
	>> node_003 
	>> node_005 
	if self.fatigued() 
		-> barioth.idle_tired() 
	else 
		-> barioth.intimidation() 
	endif 
	return 
endf 

def node_028 : 319
	random (50) >> node_027 
	elser (50) 
	elser (0) 
	endr 
	return 
endf 

def node_029 : 342
	if self.enraged() 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_030 : 320
	if self.part(1).is_broken(0) 
		if self.part(2).is_broken(0) 
			>> node_027 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_031 : 241
	>> node_003 
	-> barioth.refresh() 
	return 
endf 

def node_032 : 314
	>> node_003 
	>> node_005 
	-> barioth.turn_back_step() 
	return 
endf 

def node_033 : 247
	>> node_003 
	if self.distance_2d_to_target().leq(600) 
		>> node_005 
		-> barioth.turn_back_step() 
	else 
	endif 
	return 
endf 

def node_034 : 248
	>> node_003 
	if self.distance_2d_to_target().leq(1000) 
		>> node_005 
		-> barioth.turn_back_step() 
	else 
	endif 
	return 
endf 

def node_035 : 407
	>> node_032 
	>> node_152 
	return 
endf 

def node_036 : 275
	>> node_032 
	>> node_127 
	return 
endf 

def node_037 : 336
	>> node_003 
	>> node_005 
	>> node_010 
	-> barioth.battle_walk() 
	return 
endf 

def node_038 : 408
	>> node_037 
	>> node_152 
	return 
endf 

def node_039 : 337
	>> node_037 
	>> node_139 
	return 
endf 

def node_040 : 242
	>> node_003 
	>> node_005 
	>> node_010 
	-> barioth.bite() 
	return 
endf 

def node_041 : 409
	>> node_040 
	>> node_152 
	return 
endf 

def node_042 : 348
	>> node_040 
	>> node_127 
	return 
endf 

def node_043 : 323
	>> node_003 
	>> node_005 
	-> barioth.bite_slammed() 
	return 
endf 

def node_044 : 243
	>> node_003 
	>> node_005 
	-> barioth.tackle() 
	return 
endf 

def node_045 : 244
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.tail_attack_clockwise() 
	else 
		-> barioth.tail_attack_counter_clockwise() 
	endif 
	return 
endf 

def node_046 : 406
	>> node_003 
	>> node_005 
	>> node_008 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.advance_and_jab_l() 
	else 
		-> barioth.advance_and_jab_r() 
	endif 
	return 
endf 

def node_047 : 410
	>> node_003 
	>> node_005 
	self.targetEnemy(67) @ parameter2:1 
	>> node_008 
	if self.distance_2d_to_target().leq(2000) 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			-> barioth.advance_and_jab_l() 
		else 
			-> barioth.advance_and_jab_r() 
		endif 
		>> node_152 
	else 
		function#103() 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			if self.part(1).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		else 
			if self.part(2).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		endif 
	endif 
	return 
endf 

def node_048 : 322
	>> node_003 
	>> node_005 
	self.targetEnemy(67) @ parameter2:1 
	>> node_008 
	if self.distance_2d_to_target().leq(2000) 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			-> barioth.advance_and_jab_l() 
		else 
			-> barioth.advance_and_jab_r() 
		endif 
		>> node_127 
	else 
		function#103() 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			if self.part(1).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		else 
			if self.part(2).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		endif 
	endif 
	return 
endf 

def node_049 : 246
	if [RegisterVar3 == 0] 
		[RegisterVar3 ++] 
		[RegisterVar4 |-] 
		>> node_050 
	elif [RegisterVar4 <= 2] 
		[RegisterVar3 ++] 
		[RegisterVar4 |-] 
		>> node_050 
	else 
		[RegisterVar3 |-] 
		>> node_052 
	endif 
	return 
endf 

def node_050 : 451
	>> node_003 
	>> node_005 
	if self.target.helpless_0() 
		>> node_007 
		self.targetEnemy(9) @ parameter2:1000 
	else 
	endif 
	-> barioth.breath_normal() 
	if self.fatigued() 
	else 
		[RegisterVar3 ++] 
	endif 
	return 
endf 

def node_051 : 264
	>> node_003 
	>> node_005 
	if function#104() 
		>> node_040 
	else 
		-> barioth.rush() 
	endif 
	if function#104() 
		>> node_152 
	else 
	endif 
	return 
endf 

def node_052 : 249
	>> node_003 
	>> node_005 
	-> barioth.jump_turn_attack() 
	return 
endf 

def node_053 : 326
	>> node_003 
	>> node_005 
	self.targetEnemy(67) @ parameter2:1 
	function#103() 
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.angle_2d_cw_between(0,180) 
		if self.part(1).is_broken(0) 
			-> barioth.jump_turn_attack() 
		else 
			-> barioth.jump_turn_attack_drift() @ comboSetting:1 
			-> barioth.jump_turn_attack() 
		endif 
	else 
		if self.part(2).is_broken(0) 
			-> barioth.jump_turn_attack() 
		else 
			-> barioth.jump_turn_attack_drift() @ comboSetting:1 
			-> barioth.jump_turn_attack() 
		endif 
	endif 
	return 
endf 

def node_054 : 411
	>> node_056 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_055 : 405
	>> node_056 
	if function#101() 
	else 
		>> node_139 
	endif 
	return 
endf 

def node_056 : 257
	>> node_003 
	>> node_005 
	-> barioth.wrap() 
	return 
endf 

def node_057 : 412
	if self.angle_2d_cw_between(0,90) 
		>> node_058 
	elif self.angle_2d_cw_between(270,360) 
		>> node_059 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_058 : 309
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_059 : 310
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_060 : 440
	>> node_061 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_061 : 349
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_r() 
	else 
		-> barioth.wrap_l() 
	endif 
	return 
endf 

def node_062 : 344
	if self.angle_2d_cw_between(0,90) 
		>> node_063 
	elif self.angle_2d_cw_between(270,360) 
		>> node_064 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_063 : 442
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_064 : 443
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_065 : 271
	>> node_061 
	if function#101() 
	else 
		>> node_139 
	endif 
	return 
endf 

def node_066 : 413
	if self.angle_2d_cw_between(0,90) 
		>> node_067 
	elif self.angle_2d_cw_between(270,360) 
		>> node_068 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_067 : 366
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_068 : 368
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_069 : 441
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_r() @ comboSetting:1 
		-> barioth.bite() 
	else 
		-> barioth.wrap_l() @ comboSetting:1 
		-> barioth.bite() 
	endif 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_070 : 365
	if self.angle_2d_cw_between(0,90) 
		>> node_071 
	elif self.angle_2d_cw_between(270,360) 
		>> node_072 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_071 : 444
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_072 : 445
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_073 : 367
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_r() @ comboSetting:1 
		-> barioth.bite() 
	else 
		-> barioth.wrap_l() @ comboSetting:1 
		-> barioth.bite() 
	endif 
	if function#101() 
	else 
		>> node_127 
	endif 
	return 
endf 

def node_074 : 283
	>> node_061 
	if function#101() 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_075 : 262
	>> node_003 
	>> node_005 
	-> barioth.back_jump_take_off() 
	return 
endf 

def node_076 : 260
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_takeoff_r() 
	else 
		-> barioth.wrap_takeoff_l() 
	endif 
	return 
endf 

def node_077 : 259
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_takeoff_l() 
	else 
		-> barioth.wrap_takeoff_r() 
	endif 
	return 
endf 

def node_078 : 317
	>> node_003 
	>> node_005 
	-> barioth.take_off_switch_pattern_adjust_combat() 
	return 
endf 

def node_079 : 324
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.tail_cleave_r_to_fly() 
	else 
		-> barioth.tail_cleave_l_to_fly() 
	endif 
	return 
endf 

def node_080 : 374
	>> node_079 
	>> node_088 
	return 
endf 

def node_081 : 261
	>> node_003 
	>> node_005 
	-> barioth.back_jump() 
	return 
endf 

def node_082 : 284
	>> node_081 
	if function#101() 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_083 : 414
	>> node_003 
	>> node_005 
	if function#102(2) 
		-> barioth.back_jump_wall_priority_grd_fast() 
		>> node_104 
	else 
		>> node_009 
		>> node_084 
	endif 
	return 
endf 

def node_084 : 280
	>> node_081 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_085 : 308
	>> node_003 
	>> node_005 
	if function#102(2) 
		-> barioth.back_jump_wall_priority_grd_fast() 
		>> node_104 
	else 
		>> node_009 
		>> node_086 
	endif 
	return 
endf 

def node_086 : 446
	>> node_081 
	if function#101() 
	else 
		>> node_127 
	endif 
	return 
endf 

def node_087 : 279
	if function#101() 
		-> barioth.flying_triangle() 
	elif self.flying() 
		if function#AF(5000) 
			-> barioth.landing() 
		else 
			>> node_023 
		endif 
	else 
		-> barioth.idle_no_interrupt_s() 
	endif 
	return 
endf 

def node_088 : 256
	>> node_004 
	-> barioth.breath_fly() 
	return 
endf 

def node_089 : 287
	>> node_088 
	>> node_098 
	return 
endf 

def node_090 : 345
	>> node_088 
	>> node_098 
	if self.flying() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_091 : 296
	>> node_088 
	>> node_093 
	return 
endf 

def node_092 : 447
	>> node_004 
	-> barioth.rush_fly() 
	return 
endf 

def node_093 : 253
	>> node_092 
	>> node_094 
	return 
endf 

def node_094 : 448
	if function#B9() 
		if self.enraged() 
			if [RegisterVar2 <= 2] 
				[RegisterVar2 |-] 
				>> node_027 
			else 
				[RegisterVar2 ++] 
			endif 
		else 
			if [RegisterVar2 <= 1] 
				[RegisterVar2 |-] 
				>> node_027 
			else 
				[RegisterVar2 ++] 
			endif 
		endif 
	else 
		if self.enraged() 
			if [RegisterVar2 <= 1] 
				[RegisterVar2 |-] 
				>> node_027 
			else 
				[RegisterVar2 ++] 
			endif 
		else 
			[RegisterVar2 |-] 
			>> node_027 
		endif 
	endif 
	return 
endf 

def node_095 : 254
	>> node_004 
	-> barioth.turn_attack_fly() 
	return 
endf 

def node_096 : 356
	>> node_004 
	if self.angle_2d_cw_between(0,180) 
		if self.part(1).is_broken(0) 
			-> barioth.turn_attack_fly() 
			>> node_094 
		else 
			-> barioth.turn_attack_fly_to_fly() 
			>> node_180 
		endif 
	else 
		if self.part(2).is_broken(0) 
			-> barioth.turn_attack_fly() 
			>> node_094 
		else 
			-> barioth.turn_attack_fly_to_fly() 
			>> node_180 
		endif 
	endif 
	return 
endf 

def node_097 : 331
	>> node_004 
	self.targetEnemy(67) @ parameter2:1 
	function#103() 
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.angle_2d_cw_between(0,180) 
		if self.part(1).is_broken(0) 
			-> barioth.turn_attack_fly() 
		else 
			-> barioth.turn_attack_fly_drift() 
			>> node_151 
		endif 
	else 
		if self.part(2).is_broken(0) 
			-> barioth.turn_attack_fly() 
		else 
			-> barioth.turn_attack_fly_drift() 
			>> node_151 
		endif 
	endif 
	return 
endf 

def node_098 : 325
	>> node_004 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_landing_r() 
	else 
		-> barioth.wrap_landing_l() 
	endif 
	return 
endf 

def node_099 : 335
	>> node_098 
	if self.flying() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_100 : 252
	if function#101() 
		-> barioth.breath_wall() 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_101 : 304
	>> node_100 
	>> node_104 
	return 
endf 

def node_102 : 305
	>> node_100 
	>> node_105 
	return 
endf 

def node_103 : 251
	if function#101() 
		-> barioth.flying_triangle() 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_104 : 277
	>> node_103 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_105 : 255
	if function#101() 
		-> barioth.turn_attack_wall() 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_106 : 359
	if function#101() 
		if self.angle_2d_cw_between(0,180) 
			if self.part(1).is_broken(0) 
				-> barioth.turn_attack_wall() 
			else 
				-> barioth.turn_attack_wall_to_fly() 
				>> node_180 
			endif 
		else 
			if self.part(2).is_broken(0) 
				-> barioth.turn_attack_wall() 
			else 
				-> barioth.turn_attack_wall_to_fly() 
				>> node_180 
			endif 
		endif 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_107 : 360
	if function#101() 
		-> barioth.turn_attack_wall() 
	elif self.flying() 
		-> barioth.turn_attack_fly() 
	else 
		>> node_005 
		-> barioth.jump_turn_attack() 
	endif 
	return 
endf 

def node_108 : 212
	>> node_003 
	self.targetArea(14) 
	if self.distance_3d_to_target().gt(800) 
		>> node_015 
		repeat 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_109 : 213
	>> node_003 
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(800) 
		>> node_015 
		repeat 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_110 : 364
	if self.distance_2d_to_target().leq(500) 
		self.enraged() >> node_121 => reset 
		self.fatigued() >> node_116 => reset 
		>> node_111 => reset 
	elif self.distance_2d_to_target().leq(1000) 
		self.enraged() >> node_122 => reset 
		self.fatigued() >> node_117 => reset 
		>> node_112 => reset 
	elif self.distance_2d_to_target().leq(1800) 
		self.enraged() >> node_123 => reset 
		self.fatigued() >> node_118 => reset 
		>> node_113 => reset 
	elif self.distance_2d_to_target().leq(2500) 
		self.enraged() >> node_124 => reset 
		self.fatigued() >> node_119 => reset 
		>> node_114 => reset 
	else 
		self.enraged() >> node_125 => reset 
		self.fatigued() >> node_120 => reset 
		>> node_115 => reset 
	endif 
	return 
endf 

def node_111 : 274
	random (0) 
	elser (0) >> node_027 
	elser (25) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (20) >> node_044 
	elser (0) >> node_045 
	elser (20) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (15) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (10) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_112 : 292
	random (0) 
	elser (0) >> node_027 
	elser (10) >> node_036 
	elser (10) >> node_039 
	elser (0) >> node_040 
	elser (10) >> node_042 
	elser (0) >> node_043 
	elser (20) >> node_044 
	elser (0) >> node_045 
	elser (15) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (10) >> node_055 
	elser (15) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_113 : 293
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (10) >> node_039 
	elser (0) >> node_040 
	elser (20) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (10) >> node_049 
	elser (15) >> node_051 
	elser (10) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (25) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (10) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_114 : 294
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (15) >> node_049 
	elser (30) >> node_051 
	elser (15) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (25) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (15) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_115 : 295
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (20) >> node_049 
	elser (35) >> node_051 
	elser (25) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (20) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_116 : 375
	random (0) 
	elser (0) >> node_027 
	elser (20) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (30) >> node_044 
	elser (10) >> node_045 
	elser (0) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (25) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (15) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_117 : 377
	random (0) 
	elser (0) >> node_027 
	elser (20) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (15) >> node_042 
	elser (0) >> node_043 
	elser (20) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (25) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (5) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_118 : 379
	random (0) 
	elser (0) >> node_027 
	elser (5) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (20) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_048 
	elser (20) >> node_049 
	elser (15) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (25) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_119 : 381
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (10) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (30) >> node_049 
	elser (30) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (30) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_120 : 383
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (35) >> node_049 
	elser (35) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (30) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_121 : 376
	random (0) 
	elser (0) >> node_027 
	elser (15) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (25) >> node_044 
	elser (0) >> node_045 
	elser (25) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (15) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (15) >> node_080 
	elser (5) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_122 : 378
	random (0) 
	elser (0) >> node_027 
	elser (12) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (10) >> node_042 
	elser (0) >> node_043 
	elser (15) >> node_044 
	elser (0) >> node_045 
	elser (18) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (10) >> node_055 
	elser (0) >> node_062 
	elser (20) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (15) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_123 : 380
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (25) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (10) >> node_049 
	elser (20) >> node_051 
	elser (0) >> node_052 
	elser (10) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (25) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (10) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_124 : 382
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (15) >> node_049 
	elser (25) >> node_051 
	elser (0) >> node_052 
	elser (15) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (25) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (20) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_125 : 384
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (15) >> node_049 
	elser (30) >> node_051 
	elser (0) >> node_052 
	elser (30) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (25) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_126 : 417
	[RegisterVar0 |-] 
	if self.part(0).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	if self.part(1).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	if self.part(2).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	if self.part(3).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	return 
endf 

def node_127 : 415
	if self.fatigued() 
		>> node_152 
	else 
		>> node_126 
		if [RegisterVar0 == 0] 
			random (60) >> node_128 
			elser (40) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 1] 
			random (40) >> node_128 
			elser (60) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 2] 
			random (20) >> node_128 
			elser (80) >> node_152 
			elser (0) 
			endr 
		else 
			>> node_152 
		endif 
	endif 
	return 
endf 

def node_128 : 416
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() 
			>> node_134 
		else 
			>> node_129 
		endif 
	elif self.distance_2d_to_target().leq(1300) 
		if self.enraged() 
			>> node_135 
		else 
			>> node_130 
		endif 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			>> node_136 
		else 
			>> node_131 
		endif 
	elif self.distance_2d_to_target().leq(3000) 
		if self.enraged() 
			>> node_137 
		else 
			>> node_132 
		endif 
	else 
		if self.enraged() 
			>> node_138 
		else 
			>> node_133 
		endif 
	endif 
	return 
endf 

def node_129 : 418
	random (0) 
	elser (0) >> node_038 
	elser (30) >> node_054 
	elser (45) >> node_057 
	elser (0) >> node_066 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_130 : 419
	random (0) 
	elser (10) >> node_038 
	elser (20) >> node_054 
	elser (45) >> node_057 
	elser (0) >> node_066 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_131 : 420
	random (0) 
	elser (10) >> node_038 
	elser (20) >> node_054 
	elser (45) >> node_057 
	elser (0) >> node_066 
	elser (0) >> node_075 
	elser (25) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_132 : 421
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (70) >> node_057 
	elser (0) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_133 : 422
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (70) >> node_057 
	elser (0) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_134 : 423
	random (0) 
	elser (0) >> node_038 
	elser (35) >> node_054 
	elser (0) >> node_057 
	elser (35) >> node_066 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_135 : 424
	random (0) 
	elser (0) >> node_038 
	elser (20) >> node_054 
	elser (0) >> node_057 
	elser (50) >> node_066 
	elser (0) >> node_075 
	elser (10) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_136 : 425
	random (0) 
	elser (0) >> node_038 
	elser (20) >> node_054 
	elser (0) >> node_057 
	elser (50) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_137 : 426
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (0) >> node_057 
	elser (60) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (10) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_138 : 427
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (0) >> node_057 
	elser (70) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_139 : 439
	if self.fatigued() 
		>> node_152 
	else 
		>> node_126 
		if [RegisterVar0 == 0] 
			random (60) >> node_140 
			elser (40) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 1] 
			random (40) >> node_140 
			elser (60) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 2] 
			random (20) >> node_140 
			elser (80) >> node_152 
			elser (0) 
			endr 
		else 
			>> node_152 
		endif 
	endif 
	return 
endf 

def node_140 : 438
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() 
			>> node_146 
		else 
			>> node_141 
		endif 
	elif self.distance_2d_to_target().leq(1300) 
		if self.enraged() 
			>> node_147 
		else 
			>> node_142 
		endif 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			>> node_148 
		else 
			>> node_143 
		endif 
	elif self.distance_2d_to_target().leq(3000) 
		if self.enraged() 
			>> node_149 
		else 
			>> node_144 
		endif 
	else 
		if self.enraged() 
			>> node_150 
		else 
			>> node_145 
		endif 
	endif 
	return 
endf 

def node_141 : 428
	random (0) 
	elser (0) >> node_027 
	elser (50) >> node_035 
	elser (15) >> node_041 
	elser (0) >> node_047 
	elser (0) >> node_051 
	elser (10) >> node_083 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_142 : 429
	random (0) 
	elser (0) >> node_027 
	elser (10) >> node_035 
	elser (30) >> node_041 
	elser (35) >> node_047 
	elser (0) >> node_051 
	elser (0) >> node_083 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_143 : 430
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (60) >> node_041 
	elser (0) >> node_047 
	elser (15) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (25) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_144 : 431
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (70) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_145 : 432
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (70) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_146 : 433
	random (0) 
	elser (0) >> node_027 
	elser (40) >> node_035 
	elser (20) >> node_041 
	elser (0) >> node_047 
	elser (0) >> node_051 
	elser (10) >> node_083 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_147 : 434
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (30) >> node_041 
	elser (40) >> node_047 
	elser (0) >> node_051 
	elser (0) >> node_083 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_148 : 435
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (50) >> node_041 
	elser (0) >> node_047 
	elser (20) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_149 : 436
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (60) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (10) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_150 : 437
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (70) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_151 : 265
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_152 
	return 
endf 

def node_152 : 329
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() 
			>> node_163 
		elif self.fatigued() 
			>> node_158 
		else 
			>> node_153 
		endif 
	elif self.distance_2d_to_target().leq(1300) 
		if self.enraged() 
			>> node_164 
		elif self.fatigued() 
			>> node_159 
		else 
			>> node_154 
		endif 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			>> node_165 
		elif self.fatigued() 
			>> node_160 
		else 
			>> node_155 
		endif 
	elif self.distance_2d_to_target().leq(3000) 
		if self.enraged() 
			>> node_166 
		elif self.fatigued() 
			>> node_161 
		else 
			>> node_156 
		endif 
	else 
		if self.enraged() 
			>> node_167 
		elif self.fatigued() 
			>> node_162 
		else 
			>> node_157 
		endif 
	endif 
	return 
endf 

def node_153 : 266
	random (0) 
	elser (0) >> node_001 
	elser (25) >> node_043 
	elser (60) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_154 : 267
	random (0) 
	elser (0) >> node_001 
	elser (20) >> node_043 
	elser (35) >> node_044 
	elser (45) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_155 : 268
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (50) >> node_045 
	elser (30) >> node_049 
	elser (0) >> node_051 
	elser (20) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_156 : 269
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (0) >> node_051 
	elser (50) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_157 : 270
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (35) >> node_049 
	elser (0) >> node_051 
	elser (65) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_158 : 385
	random (0) 
	elser (10) >> node_001 
	elser (0) >> node_043 
	elser (40) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_159 : 387
	random (0) 
	elser (20) >> node_001 
	elser (0) >> node_043 
	elser (30) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_160 : 389
	random (0) 
	elser (30) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (45) >> node_049 
	elser (25) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_161 : 391
	random (0) 
	elser (30) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (20) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_162 : 393
	random (0) 
	elser (30) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (35) >> node_049 
	elser (35) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_163 : 386
	random (0) 
	elser (0) >> node_001 
	elser (50) >> node_043 
	elser (35) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_164 : 388
	random (0) 
	elser (0) >> node_001 
	elser (40) >> node_043 
	elser (15) >> node_044 
	elser (45) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_165 : 390
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (40) >> node_045 
	elser (30) >> node_049 
	elser (0) >> node_051 
	elser (30) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_166 : 392
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (40) >> node_049 
	elser (0) >> node_051 
	elser (60) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_167 : 394
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (20) >> node_049 
	elser (0) >> node_051 
	elser (80) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_168 : 362
	if self.distance_2d_to_target().leq(1000) 
		self.enraged() >> node_174 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_169 => reset 
	elif self.distance_2d_to_target().leq(1500) 
		self.enraged() >> node_175 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_170 => reset 
	elif self.distance_2d_to_target().leq(2000) 
		self.enraged() >> node_176 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_171 => reset 
	elif self.distance_2d_to_target().leq(2500) 
		self.enraged() >> node_177 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_172 => reset 
	else 
		self.enraged() >> node_178 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_173 => reset 
	endif 
	return 
endf 

def node_169 : 298
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (30) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (70) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_170 : 285
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (60) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (40) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_171 : 297
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (50) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (50) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_172 : 299
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (30) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (70) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_173 : 300
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (100) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_174 : 395
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (30) >> node_090 
	elser (20) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (50) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_175 : 396
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (20) >> node_090 
	elser (30) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (50) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_176 : 397
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (20) >> node_090 
	elser (30) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (50) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_177 : 398
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (25) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (75) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_178 : 399
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (100) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_179 : 400
	random (0) 
	elser (100) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_180 : 355
	if self.distance_2d_to_target().leq(1000) 
		self.enraged() >> node_181 => return 
		self.fatigued() >> node_181 => return 
		>> node_181 => return 
	elif self.distance_2d_to_target().leq(1500) 
		self.enraged() >> node_182 => return 
		self.fatigued() >> node_182 => return 
		>> node_182 => return 
	elif self.distance_2d_to_target().leq(2000) 
		self.enraged() >> node_183 => return 
		self.fatigued() >> node_183 => return 
		>> node_183 => return 
	elif self.distance_2d_to_target().leq(2500) 
		self.enraged() >> node_184 => return 
		self.fatigued() >> node_184 => return 
		>> node_184 => return 
	else 
		self.enraged() >> node_185 => return 
		self.fatigued() >> node_185 => return 
		>> node_185 => return 
	endif 
	return 
endf 

def node_181 : 350
	random (0) 
	elser (10) >> node_089 
	elser (30) >> node_090 
	elser (10) >> node_091 
	elser (50) >> node_093 
	elser (0) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_182 : 351
	random (0) 
	elser (10) >> node_089 
	elser (35) >> node_090 
	elser (10) >> node_091 
	elser (45) >> node_093 
	elser (0) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_183 : 352
	random (0) 
	elser (10) >> node_089 
	elser (15) >> node_090 
	elser (35) >> node_091 
	elser (40) >> node_093 
	elser (0) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_184 : 353
	random (0) 
	elser (0) >> node_089 
	elser (20) >> node_090 
	elser (20) >> node_091 
	elser (0) >> node_093 
	elser (60) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_185 : 354
	random (0) 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (30) >> node_091 
	elser (0) >> node_093 
	elser (70) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_186 : 363
	if self.distance_2d_to_target().leq(600) 
		self.enraged() >> node_190 => reset 
		self.fatigued() >> node_193 => reset 
		>> node_187 => reset 
	elif self.distance_2d_to_target().leq(1800) 
		self.enraged() >> node_191 => reset 
		self.fatigued() >> node_193 => reset 
		>> node_188 => reset 
	else 
		self.enraged() >> node_192 => reset 
		self.fatigued() >> node_193 => reset 
		>> node_189 => reset 
	endif 
	return 
endf 

def node_187 : 286
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (50) >> node_104 
	elser (50) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_188 : 306
	random (0) 
	elser (25) >> node_101 
	elser (25) >> node_102 
	elser (0) >> node_103 
	elser (25) >> node_104 
	elser (25) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_189 : 302
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (0) >> node_104 
	elser (100) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_190 : 401
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (50) >> node_104 
	elser (0) >> node_105 
	elser (50) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_191 : 402
	random (0) 
	elser (50) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (0) >> node_104 
	elser (0) >> node_105 
	elser (50) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_192 : 403
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (0) >> node_104 
	elser (0) >> node_105 
	elser (100) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_193 : 404
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (100) >> node_103 
	elser (0) >> node_104 
	elser (0) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_194 : 9
	>> node_199 
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.vertical_distance_to_target().leq(1000) 
				if self.distance_3d_to_target().leq(3000) 
					if self.target_is(em.Fulgur_Anjanath) 
						>> node_198 
					elif self.target_is(em.Odogaron) 
						>> node_198 
					elif self.target_is(em.Ebony_Odogaron) 
						>> node_198 
					elif self.target_is(em.Legiana) 
						>> node_198 
					elif self.target_is(em.Shrieking_Legiana) 
						>> node_198 
					elif self.target_is(em.Banbaro) 
						>> node_198 
					elif function#30(2) 
						>> node_195 
					elif function#30(4) 
						>> node_196 
					else 
						>> node_197 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_195 : 135
	if self.target.in_combat() 
		random (35) >> node_201 
		elser (0) >> node_202 
		elser (10) >> node_203 
		elser (55) >> node_204 
		elser (0) >> node_206 
		endr 
	else 
		random (10) >> node_201 
		elser (35) >> node_202 
		elser (0) >> node_203 
		elser (55) >> node_204 
		elser (0) >> node_206 
		endr 
	endif 
	return 
endf 

def node_196 : 454
	if self.target.in_combat() 
		random (35) >> node_201 
		elser (10) >> node_202 
		elser (55) >> node_203 
		elser (0) >> node_204 
		elser (0) >> node_206 
		endr 
	else 
		random (35) >> node_201 
		elser (55) >> node_202 
		elser (10) >> node_203 
		elser (0) >> node_204 
		elser (0) >> node_206 
		endr 
	endif 
	return 
endf 

def node_197 : 134
	if self.target.in_combat() 
		random (35) >> node_201 
		elser (0) >> node_202 
		elser (50) >> node_203 
		elser (0) >> node_204 
		elser (15) >> node_206 
		endr 
	else 
		random (35) >> node_201 
		elser (55) >> node_202 
		elser (10) >> node_203 
		elser (0) >> node_204 
		elser (0) >> node_206 
		endr 
	endif 
	return 
endf 

def node_198 : 136
	if self.target(39) 
		>> node_195 
	else 
		if self.in_combat() 
			if self.target.in_combat() 
				random (75) >> node_201 
				elser (15) >> node_202 
				elser (10) >> node_203 
				elser (0) >> node_204 
				endr 
			else 
				random (40) >> node_201 
				elser (60) >> node_202 
				elser (0) >> node_203 
				elser (0) >> node_204 
				endr 
			endif 
		else 
			if self.target.in_combat() 
				random (10) >> node_201 
				elser (5) >> node_202 
				elser (65) >> node_203 
				elser (20) >> node_204 
				endr 
			else 
				random (10) >> node_201 
				elser (5) >> node_202 
				elser (65) >> node_203 
				elser (20) >> node_204 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

def node_199 : 449
	if function#38(0,10003) 
		>> node_200 
	elif self.quest_id(1102) 
		>> node_200 
	else 
	endif 
	return 
endf 

def node_200 : 450
	if function#CE(1,1) 
		function#CF() 
	else 
	endif 
	return 
endf 

def node_201 : 138
	return 
endf 

def node_202 : 16
	>> node_003 
	>> node_008 
	>> node_026 
	return 
endf 

def node_203 : 19
	>> node_003 
	if self.vertical_distance_to_target().gt(500) 
		>> node_078 
		>> node_095 
	else 
		if self.distance_3d_to_target().leq(700) 
			random (30) >> node_040 
			elser (30) >> node_045 
			elser (30) >> node_044 
			elser (10) >> node_043 
			endr 
		else 
			random (40) >> node_052 
			elser (30) >> node_051 
			elser (30) >> node_065 
			endr 
		endif 
	endif 
	return 
endf 

def node_204 : 18
	>> node_003 
	if [RegisterVar1 == 0] 
		[RegisterVar1 ++] 
	else 
		[RegisterVar1 |-] 
		self.force_area_change2() 
	endif 
	>> node_205 
	return 
endf 

def node_205 : 17
	>> node_003 
	>> node_032 
	>> node_027 
	return 
endf 

def node_206 : 453
	>> node_203 
	[RegisterVar1 |-] 
	self.force_area_change2() 
	return 
endf 

def node_207 : 369
	self.targetArea(target_area.nearest_entrance) 
	if self.flying() 
		self.targetArea(40) 
		>> node_208 
	else 
		self.targetArea(39) 
		>> node_209 
	endif 
	return 
endf 

def node_208 : 370
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> barioth.glide(6,2,5,900,3000) 
		repeat 
	endif 
	return 
endf 

def node_209 : 371
	>> node_194 
	self.targetArea(39) 
	if self.distance_3d_to_target().leq(600) 
	else 
		if self.fatigued() 
			-> barioth.walk_tired(2,5,0,1500) 
		else 
			-> barioth.walk(2,5,0,1500) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_210 : 372
	if self.distance_3d_to_target().leq(600) 
	else 
		-> barioth.glide(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_211 : 373
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> barioth.glide(2,1,0,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_212 : 237
endf 

