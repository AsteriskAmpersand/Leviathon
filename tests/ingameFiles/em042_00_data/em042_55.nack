importactions Barioth as barioth

def node_000
	self.targetEnemy(50) 
	>> node_075 
	>> node_003 
	conclude 
endf 

def node_001
	if function#101() 
		-> barioth.idle_wall_no_interrupt_s() 
	elif self.flying() 
		-> barioth.idle_fly_no_interrupt_s() 
	elif self.fatigued() 
		-> barioth.idle_tired() 
	else 
		-> barioth.idle_no_interrupt_s() 
	endif 
	return 
endf 

def node_002
	if function#101() 
		-> barioth.idle_wall_no_interrupt_l() 
	elif self.flying() 
		-> barioth.idle_fly_no_interrupt_l() 
	elif self.fatigued() 
		-> barioth.idle_tired() 
	else 
		-> barioth.idle_no_interrupt_l() 
	endif 
	return 
endf 

def node_003
	if function#101() 
		>> node_103 
	elif self.flying() 
		if function#AF(5000) 
			-> barioth.landing() 
		else 
			>> node_023 
		endif 
	else 
	endif 
	return 
endf 

def node_004
	if function#101() 
		>> node_103 
	else 
	endif 
	if self.flying() 
	else 
		-> barioth.take_off() 
	endif 
	return 
endf 

def node_005
	if self.flying() 
	elif self.in_combat() 
	else 
		-> barioth.trans_combat() 
	endif 
	return 
endf 

def node_006
	if self.flying() 
	elif self.in_combat() 
		-> barioth.trans_normal() 
	else 
	endif 
	return 
endf 

def node_007
	if self.flying() 
		if self.in_combat() 
			-> barioth.turn_fly_quick() 
		else 
			-> barioth.turn_fly() 
		endif 
	else 
		if self.in_combat() 
			-> barioth.turn_quick() 
		else 
			-> barioth.turn() 
		endif 
	endif 
	return 
endf 

def node_008
	if self.angle_2d_cw_between(30,330) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_009
	if self.angle_2d_cw_between(60,300) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_010
	if self.angle_2d_cw_between(90,270) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_011
	if self.angle_2d_cw_between(120,240) 
		>> node_007 
	else 
	endif 
	return 
endf 

def node_012
	>> node_003 
	if self.distance_2d_to_target().gt(500) 
		if self.in_combat() 
			-> barioth.dash_combat(6,0,0,500) 
		else 
			-> barioth.dash(6,0,0,500) 
		endif 
	else 
	endif 
	return 
endf 

def node_013
	>> node_003 
	if self.distance_2d_to_target().gt(1000) 
		if self.in_combat() 
			-> barioth.dash_combat(6,0,0,1000) 
		else 
			-> barioth.dash(6,0,0,1000) 
		endif 
	else 
	endif 
	return 
endf 

def node_014
	>> node_003 
	if self.distance_2d_to_target().gt(1500) 
		if self.in_combat() 
			-> barioth.dash_combat(6,0,0,1500) 
		else 
			-> barioth.dash(6,0,0,1500) 
		endif 
	else 
	endif 
	return 
endf 

def node_015
	>> node_003 
	if self.in_combat() 
		-> barioth.dash_combat(1,2,0,800,1500) 
	else 
		-> barioth.dash(1,2,0,800,1500) 
	endif 
	return 
endf 

def node_016
	>> node_003 
	if self.in_combat() 
		-> barioth.dash_combat(1,2,0,800,3000) 
	else 
		-> barioth.dash(1,2,0,800,3000) 
	endif 
	return 
endf 

def node_017
	>> node_003 
	if self.distance_2d_to_target().leq(500) 
	else 
		if self.in_combat() 
			-> barioth.dash_combat(6,2,0,500,1000) 
		else 
			-> barioth.dash(6,2,0,500,1000) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_018
	>> node_003 
	if self.distance_2d_to_target().leq(800) 
	else 
		if self.in_combat() 
			-> barioth.dash_combat(6,2,0,800,1500) 
		else 
			-> barioth.dash(6,2,0,800,1500) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_019
	>> node_003 
	if self.fatigued() 
		-> barioth.walk_tired(1,2,5,800,1500) 
	elif self.in_combat() 
		-> barioth.walk_combat(1,2,5,800,1500) 
	else 
		-> barioth.walk(1,2,5,800,1500) 
	endif 
	return 
endf 

def node_020
	>> node_003 
	if self.distance_2d_to_target().leq(500) 
	else 
		if self.fatigued() 
			-> barioth.walk_tired(6,2,0,500,1000) 
		elif self.in_combat() 
			-> barioth.walk_combat(6,2,0,500,1000) 
		else 
			-> barioth.walk(6,2,0,500,1000) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_021
	>> node_003 
	if self.fatigued() 
		-> barioth.walk_tired(6,0,0,500) 
	elif self.in_combat() 
		-> barioth.walk_combat(6,0,0,500) 
	else 
		-> barioth.walk(6,0,0,500) 
	endif 
	return 
endf 

def node_022
	>> node_003 
	if self.distance_2d_to_target().gt(2000) 
		if self.in_combat() 
			-> barioth.dash_combat(6,2,0,2000,3000) 
		else 
			-> barioth.dash(6,2,0,2000,3000) 
		endif 
		repeat 
	elif self.distance_2d_to_target().gt(500) 
		if self.fatigued() 
			-> barioth.walk_tired(6,2,0,500,1000) 
		elif self.in_combat() 
			-> barioth.walk_combat(6,2,0,500,1000) 
		else 
			-> barioth.walk(6,2,0,500,1000) 
		endif 
		repeat 
	elif self.distance_2d_to_target().leq(200) 
		-> barioth.turn_back_step() 
	else 
	endif 
	return 
endf 

def node_023
	self.targetArea(target_area.area_aerial_center) 
	>> node_210 
	self.targetArea(target_area.area_center) 
	-> barioth.landing() 
	return 
endf 

def node_024
	if self.distance_2d_to_target().leq(600) 
	else 
		-> barioth.glide_combat(6,2,0,500,3000) 
		repeat 
	endif 
	return 
endf 

def node_025
	>> node_003 
	[RegisterVar2 |-] 
	-> barioth.threat() 
	return 
endf 

def node_026
	>> node_003 
	[RegisterVar2 |-] 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.short_threat() 
	else 
		-> barioth.short_threat_r() 
	endif 
	return 
endf 

def node_027
	>> node_003 
	>> node_005 
	if self.fatigued() 
		-> barioth.idle_tired() 
	else 
		-> barioth.intimidation() 
	endif 
	return 
endf 

def node_028
	random (50) >> node_027 
	elser (50) 
	elser (0) 
	endr 
	return 
endf 

def node_029
	if self.enraged() 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_030
	if self.part(1).is_broken(0) 
		if self.part(2).is_broken(0) 
			>> node_027 
		else 
		endif 
	else 
	endif 
	return 
endf 

def node_031
	>> node_003 
	-> barioth.refresh() 
	return 
endf 

def node_032
	>> node_003 
	>> node_005 
	-> barioth.turn_back_step() 
	return 
endf 

def node_033
	>> node_003 
	if self.distance_2d_to_target().leq(600) 
		>> node_005 
		-> barioth.turn_back_step() 
	else 
	endif 
	return 
endf 

def node_034
	>> node_003 
	if self.distance_2d_to_target().leq(1000) 
		>> node_005 
		-> barioth.turn_back_step() 
	else 
	endif 
	return 
endf 

def node_035
	>> node_032 
	>> node_152 
	return 
endf 

def node_036
	>> node_032 
	>> node_127 
	return 
endf 

def node_037
	>> node_003 
	>> node_005 
	>> node_010 
	-> barioth.battle_walk() 
	return 
endf 

def node_038
	>> node_037 
	>> node_152 
	return 
endf 

def node_039
	>> node_037 
	>> node_139 
	return 
endf 

def node_040
	>> node_003 
	>> node_005 
	>> node_010 
	-> barioth.bite() 
	return 
endf 

def node_041
	>> node_040 
	>> node_152 
	return 
endf 

def node_042
	>> node_040 
	>> node_127 
	return 
endf 

def node_043
	>> node_003 
	>> node_005 
	-> barioth.bite_slammed() 
	return 
endf 

def node_044
	>> node_003 
	>> node_005 
	-> barioth.tackle() 
	return 
endf 

def node_045
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.tail_attack_clockwise() 
	else 
		-> barioth.tail_attack_counter_clockwise() 
	endif 
	return 
endf 

def node_046
	>> node_003 
	>> node_005 
	>> node_008 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.advance_and_jab_l() 
	else 
		-> barioth.advance_and_jab_r() 
	endif 
	return 
endf 

def node_047
	>> node_003 
	>> node_005 
	self.targetEnemy(67) @ parameter2:1 
	>> node_008 
	if self.distance_2d_to_target().leq(2000) 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			-> barioth.advance_and_jab_l() 
		else 
			-> barioth.advance_and_jab_r() 
		endif 
		>> node_152 
	else 
		function#103() 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			if self.part(1).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		else 
			if self.part(2).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		endif 
	endif 
	return 
endf 

def node_048
	>> node_003 
	>> node_005 
	self.targetEnemy(67) @ parameter2:1 
	>> node_008 
	if self.distance_2d_to_target().leq(2000) 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			-> barioth.advance_and_jab_l() 
		else 
			-> barioth.advance_and_jab_r() 
		endif 
		>> node_127 
	else 
		function#103() 
		self.targetEnemy(target_em.random_player_or_cat) 
		if self.angle_2d_cw_between(0,180) 
			if self.part(1).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		else 
			if self.part(2).is_broken(0) 
				-> barioth.jump_turn_attack() 
			else 
				-> barioth.jump_turn_attack_drift() 
				>> node_151 
			endif 
		endif 
	endif 
	return 
endf 

def node_049
	if [RegisterVar3 == 0] 
		[RegisterVar3 ++] 
		[RegisterVar4 |-] 
		>> node_050 
	elif [RegisterVar4 <= 2] 
		[RegisterVar3 ++] 
		[RegisterVar4 |-] 
		>> node_050 
	else 
		[RegisterVar3 |-] 
		>> node_052 
	endif 
	return 
endf 

def node_050
	>> node_003 
	>> node_005 
	if self.target.helpless_0() 
		>> node_007 
		self.targetEnemy(9) @ parameter2:1000 
	else 
	endif 
	-> barioth.breath_normal() 
	if self.fatigued() 
	else 
		[RegisterVar3 ++] 
	endif 
	return 
endf 

def node_051
	>> node_003 
	>> node_005 
	if function#104() 
		>> node_040 
	else 
		-> barioth.rush() 
	endif 
	if function#104() 
		>> node_152 
	else 
	endif 
	return 
endf 

def node_052
	>> node_003 
	>> node_005 
	-> barioth.jump_turn_attack() 
	return 
endf 

def node_053
	>> node_003 
	>> node_005 
	self.targetEnemy(67) @ parameter2:1 
	function#103() 
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.angle_2d_cw_between(0,180) 
		if self.part(1).is_broken(0) 
			-> barioth.jump_turn_attack() 
		else 
			-> barioth.jump_turn_attack_drift() @ comboSetting:1 
			-> barioth.jump_turn_attack() 
		endif 
	else 
		if self.part(2).is_broken(0) 
			-> barioth.jump_turn_attack() 
		else 
			-> barioth.jump_turn_attack_drift() @ comboSetting:1 
			-> barioth.jump_turn_attack() 
		endif 
	endif 
	return 
endf 

def node_054
	>> node_056 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_055
	>> node_056 
	if function#101() 
	else 
		>> node_139 
	endif 
	return 
endf 

def node_056
	>> node_003 
	>> node_005 
	-> barioth.wrap() 
	return 
endf 

def node_057
	if self.angle_2d_cw_between(0,90) 
		>> node_058 
	elif self.angle_2d_cw_between(270,360) 
		>> node_059 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_058
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_059
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_060 
	endif 
	return 
endf 

def node_060
	>> node_061 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_061
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_r() 
	else 
		-> barioth.wrap_l() 
	endif 
	return 
endf 

def node_062
	if self.angle_2d_cw_between(0,90) 
		>> node_063 
	elif self.angle_2d_cw_between(270,360) 
		>> node_064 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_063
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_064
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_065 
	endif 
	return 
endf 

def node_065
	>> node_061 
	if function#101() 
	else 
		>> node_139 
	endif 
	return 
endf 

def node_066
	if self.angle_2d_cw_between(0,90) 
		>> node_067 
	elif self.angle_2d_cw_between(270,360) 
		>> node_068 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_067
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_068
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_069 
	endif 
	return 
endf 

def node_069
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_r() @ comboSetting:1 
		-> barioth.bite() 
	else 
		-> barioth.wrap_l() @ comboSetting:1 
		-> barioth.bite() 
	endif 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_070
	if self.angle_2d_cw_between(0,90) 
		>> node_071 
	elif self.angle_2d_cw_between(270,360) 
		>> node_072 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_071
	>> node_003 
	>> node_005 
	if function#102() 
		-> barioth.wrap_wall_priority_l_grd_fast() 
		>> node_104 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_072
	>> node_003 
	>> node_005 
	if function#102(1) 
		-> barioth.wrap_wall_priority_r_grd_fast() 
		>> node_104 
	else 
		>> node_073 
	endif 
	return 
endf 

def node_073
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_r() @ comboSetting:1 
		-> barioth.bite() 
	else 
		-> barioth.wrap_l() @ comboSetting:1 
		-> barioth.bite() 
	endif 
	if function#101() 
	else 
		>> node_127 
	endif 
	return 
endf 

def node_074
	>> node_061 
	if function#101() 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_075
	>> node_003 
	>> node_005 
	-> barioth.back_jump_take_off() 
	return 
endf 

def node_076
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_takeoff_r() 
	else 
		-> barioth.wrap_takeoff_l() 
	endif 
	return 
endf 

def node_077
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_takeoff_l() 
	else 
		-> barioth.wrap_takeoff_r() 
	endif 
	return 
endf 

def node_078
	>> node_003 
	>> node_005 
	-> barioth.take_off_switch_pattern_adjust_combat() 
	return 
endf 

def node_079
	>> node_003 
	>> node_005 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.tail_cleave_r_to_fly() 
	else 
		-> barioth.tail_cleave_l_to_fly() 
	endif 
	return 
endf 

def node_080
	>> node_079 
	>> node_088 
	return 
endf 

def node_081
	>> node_003 
	>> node_005 
	-> barioth.back_jump() 
	return 
endf 

def node_082
	>> node_081 
	if function#101() 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_083
	>> node_003 
	>> node_005 
	if function#102(2) 
		-> barioth.back_jump_wall_priority_grd_fast() 
		>> node_104 
	else 
		>> node_009 
		>> node_084 
	endif 
	return 
endf 

def node_084
	>> node_081 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_085
	>> node_003 
	>> node_005 
	if function#102(2) 
		-> barioth.back_jump_wall_priority_grd_fast() 
		>> node_104 
	else 
		>> node_009 
		>> node_086 
	endif 
	return 
endf 

def node_086
	>> node_081 
	if function#101() 
	else 
		>> node_127 
	endif 
	return 
endf 

def node_087
	if function#101() 
		-> barioth.flying_triangle() 
	elif self.flying() 
		if function#AF(5000) 
			-> barioth.landing() 
		else 
			>> node_023 
		endif 
	else 
		-> barioth.idle_no_interrupt_s() 
	endif 
	return 
endf 

def node_088
	>> node_004 
	-> barioth.breath_fly() 
	return 
endf 

def node_089
	>> node_088 
	>> node_098 
	return 
endf 

def node_090
	>> node_088 
	>> node_098 
	if self.flying() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_091
	>> node_088 
	>> node_093 
	return 
endf 

def node_092
	>> node_004 
	-> barioth.rush_fly() 
	return 
endf 

def node_093
	>> node_092 
	>> node_094 
	return 
endf 

def node_094
	if function#B9() 
		if self.enraged() 
			if [RegisterVar2 <= 2] 
				[RegisterVar2 |-] 
				>> node_027 
			else 
				[RegisterVar2 ++] 
			endif 
		else 
			if [RegisterVar2 <= 1] 
				[RegisterVar2 |-] 
				>> node_027 
			else 
				[RegisterVar2 ++] 
			endif 
		endif 
	else 
		if self.enraged() 
			if [RegisterVar2 <= 1] 
				[RegisterVar2 |-] 
				>> node_027 
			else 
				[RegisterVar2 ++] 
			endif 
		else 
			[RegisterVar2 |-] 
			>> node_027 
		endif 
	endif 
	return 
endf 

def node_095
	>> node_004 
	-> barioth.turn_attack_fly() 
	return 
endf 

def node_096
	>> node_004 
	if self.angle_2d_cw_between(0,180) 
		if self.part(1).is_broken(0) 
			-> barioth.turn_attack_fly() 
			>> node_094 
		else 
			-> barioth.turn_attack_fly_to_fly() 
			>> node_180 
		endif 
	else 
		if self.part(2).is_broken(0) 
			-> barioth.turn_attack_fly() 
			>> node_094 
		else 
			-> barioth.turn_attack_fly_to_fly() 
			>> node_180 
		endif 
	endif 
	return 
endf 

def node_097
	>> node_004 
	self.targetEnemy(67) @ parameter2:1 
	function#103() 
	self.targetEnemy(target_em.random_player_or_cat) 
	if self.angle_2d_cw_between(0,180) 
		if self.part(1).is_broken(0) 
			-> barioth.turn_attack_fly() 
		else 
			-> barioth.turn_attack_fly_drift() 
			>> node_151 
		endif 
	else 
		if self.part(2).is_broken(0) 
			-> barioth.turn_attack_fly() 
		else 
			-> barioth.turn_attack_fly_drift() 
			>> node_151 
		endif 
	endif 
	return 
endf 

def node_098
	>> node_004 
	if self.angle_2d_cw_between(0,180) 
		-> barioth.wrap_landing_r() 
	else 
		-> barioth.wrap_landing_l() 
	endif 
	return 
endf 

def node_099
	>> node_098 
	if self.flying() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_100
	if function#101() 
		-> barioth.breath_wall() 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_101
	>> node_100 
	>> node_104 
	return 
endf 

def node_102
	>> node_100 
	>> node_105 
	return 
endf 

def node_103
	if function#101() 
		-> barioth.flying_triangle() 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_104
	>> node_103 
	if function#101() 
	else 
		>> node_152 
	endif 
	return 
endf 

def node_105
	if function#101() 
		-> barioth.turn_attack_wall() 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_106
	if function#101() 
		if self.angle_2d_cw_between(0,180) 
			if self.part(1).is_broken(0) 
				-> barioth.turn_attack_wall() 
			else 
				-> barioth.turn_attack_wall_to_fly() 
				>> node_180 
			endif 
		else 
			if self.part(2).is_broken(0) 
				-> barioth.turn_attack_wall() 
			else 
				-> barioth.turn_attack_wall_to_fly() 
				>> node_180 
			endif 
		endif 
	else 
		>> node_001 
	endif 
	return 
endf 

def node_107
	if function#101() 
		-> barioth.turn_attack_wall() 
	elif self.flying() 
		-> barioth.turn_attack_fly() 
	else 
		>> node_005 
		-> barioth.jump_turn_attack() 
	endif 
	return 
endf 

def node_108
	>> node_003 
	self.targetArea(14) 
	if self.distance_3d_to_target().gt(800) 
		>> node_015 
		repeat 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_109
	>> node_003 
	self.targetArea(19) 
	if self.distance_3d_to_target().gt(800) 
		>> node_015 
		repeat 
	else 
		>> node_027 
	endif 
	return 
endf 

def node_110
	if self.distance_2d_to_target().leq(500) 
		self.enraged() >> node_121 => reset 
		self.fatigued() >> node_116 => reset 
		>> node_111 => reset 
	elif self.distance_2d_to_target().leq(1000) 
		self.enraged() >> node_122 => reset 
		self.fatigued() >> node_117 => reset 
		>> node_112 => reset 
	elif self.distance_2d_to_target().leq(1800) 
		self.enraged() >> node_123 => reset 
		self.fatigued() >> node_118 => reset 
		>> node_113 => reset 
	elif self.distance_2d_to_target().leq(2500) 
		self.enraged() >> node_124 => reset 
		self.fatigued() >> node_119 => reset 
		>> node_114 => reset 
	else 
		self.enraged() >> node_125 => reset 
		self.fatigued() >> node_120 => reset 
		>> node_115 => reset 
	endif 
	return 
endf 

def node_111
	random (0) 
	elser (0) >> node_027 
	elser (25) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (20) >> node_044 
	elser (0) >> node_045 
	elser (20) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (15) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (10) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_112
	random (0) 
	elser (0) >> node_027 
	elser (10) >> node_036 
	elser (10) >> node_039 
	elser (0) >> node_040 
	elser (10) >> node_042 
	elser (0) >> node_043 
	elser (20) >> node_044 
	elser (0) >> node_045 
	elser (15) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (10) >> node_055 
	elser (15) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_113
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (10) >> node_039 
	elser (0) >> node_040 
	elser (20) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (10) >> node_049 
	elser (15) >> node_051 
	elser (10) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (25) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (10) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_114
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (15) >> node_049 
	elser (30) >> node_051 
	elser (15) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (25) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (15) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_115
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (20) >> node_049 
	elser (35) >> node_051 
	elser (25) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (20) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_116
	random (0) 
	elser (0) >> node_027 
	elser (20) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (30) >> node_044 
	elser (10) >> node_045 
	elser (0) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (25) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (15) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_117
	random (0) 
	elser (0) >> node_027 
	elser (20) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (15) >> node_042 
	elser (0) >> node_043 
	elser (20) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (25) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (5) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_118
	random (0) 
	elser (0) >> node_027 
	elser (5) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (20) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_048 
	elser (20) >> node_049 
	elser (15) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (25) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_119
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (10) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (30) >> node_049 
	elser (30) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (30) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_120
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (35) >> node_049 
	elser (35) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (30) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_121
	random (0) 
	elser (0) >> node_027 
	elser (15) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (25) >> node_044 
	elser (0) >> node_045 
	elser (25) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (15) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (15) >> node_080 
	elser (5) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_122
	random (0) 
	elser (0) >> node_027 
	elser (12) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (10) >> node_042 
	elser (0) >> node_043 
	elser (15) >> node_044 
	elser (0) >> node_045 
	elser (18) >> node_048 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) >> node_053 
	elser (10) >> node_055 
	elser (0) >> node_062 
	elser (20) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (15) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_123
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (25) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (10) >> node_049 
	elser (20) >> node_051 
	elser (0) >> node_052 
	elser (10) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (25) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (10) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_124
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (15) >> node_049 
	elser (25) >> node_051 
	elser (0) >> node_052 
	elser (15) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (25) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (20) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_125
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_036 
	elser (0) >> node_039 
	elser (0) >> node_040 
	elser (0) >> node_042 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (0) >> node_048 
	elser (15) >> node_049 
	elser (30) >> node_051 
	elser (0) >> node_052 
	elser (30) >> node_053 
	elser (0) >> node_055 
	elser (0) >> node_062 
	elser (0) >> node_070 
	elser (0) >> node_074 
	elser (0) >> node_082 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (25) >> node_078 
	elser (0) >> node_079 
	elser (0) >> node_080 
	elser (0) >> node_085 
	elser (0) 
	endr 
	return 
endf 

def node_126
	[RegisterVar0 |-] 
	if self.part(0).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	if self.part(1).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	if self.part(2).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	if self.part(3).is_broken(0) 
		[RegisterVar0 ++] 
	else 
	endif 
	return 
endf 

def node_127
	if self.fatigued() 
		>> node_152 
	else 
		>> node_126 
		if [RegisterVar0 == 0] 
			random (60) >> node_128 
			elser (40) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 1] 
			random (40) >> node_128 
			elser (60) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 2] 
			random (20) >> node_128 
			elser (80) >> node_152 
			elser (0) 
			endr 
		else 
			>> node_152 
		endif 
	endif 
	return 
endf 

def node_128
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() 
			>> node_134 
		else 
			>> node_129 
		endif 
	elif self.distance_2d_to_target().leq(1300) 
		if self.enraged() 
			>> node_135 
		else 
			>> node_130 
		endif 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			>> node_136 
		else 
			>> node_131 
		endif 
	elif self.distance_2d_to_target().leq(3000) 
		if self.enraged() 
			>> node_137 
		else 
			>> node_132 
		endif 
	else 
		if self.enraged() 
			>> node_138 
		else 
			>> node_133 
		endif 
	endif 
	return 
endf 

def node_129
	random (0) 
	elser (0) >> node_038 
	elser (30) >> node_054 
	elser (45) >> node_057 
	elser (0) >> node_066 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_130
	random (0) 
	elser (10) >> node_038 
	elser (20) >> node_054 
	elser (45) >> node_057 
	elser (0) >> node_066 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_131
	random (0) 
	elser (10) >> node_038 
	elser (20) >> node_054 
	elser (45) >> node_057 
	elser (0) >> node_066 
	elser (0) >> node_075 
	elser (25) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_132
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (70) >> node_057 
	elser (0) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_133
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (70) >> node_057 
	elser (0) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_134
	random (0) 
	elser (0) >> node_038 
	elser (35) >> node_054 
	elser (0) >> node_057 
	elser (35) >> node_066 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_135
	random (0) 
	elser (0) >> node_038 
	elser (20) >> node_054 
	elser (0) >> node_057 
	elser (50) >> node_066 
	elser (0) >> node_075 
	elser (10) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_136
	random (0) 
	elser (0) >> node_038 
	elser (20) >> node_054 
	elser (0) >> node_057 
	elser (50) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_137
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (0) >> node_057 
	elser (60) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (10) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_138
	random (0) 
	elser (0) >> node_038 
	elser (0) >> node_054 
	elser (0) >> node_057 
	elser (70) >> node_066 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_139
	if self.fatigued() 
		>> node_152 
	else 
		>> node_126 
		if [RegisterVar0 == 0] 
			random (60) >> node_140 
			elser (40) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 1] 
			random (40) >> node_140 
			elser (60) >> node_152 
			elser (0) 
			endr 
		elif [RegisterVar0 == 2] 
			random (20) >> node_140 
			elser (80) >> node_152 
			elser (0) 
			endr 
		else 
			>> node_152 
		endif 
	endif 
	return 
endf 

def node_140
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() 
			>> node_146 
		else 
			>> node_141 
		endif 
	elif self.distance_2d_to_target().leq(1300) 
		if self.enraged() 
			>> node_147 
		else 
			>> node_142 
		endif 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			>> node_148 
		else 
			>> node_143 
		endif 
	elif self.distance_2d_to_target().leq(3000) 
		if self.enraged() 
			>> node_149 
		else 
			>> node_144 
		endif 
	else 
		if self.enraged() 
			>> node_150 
		else 
			>> node_145 
		endif 
	endif 
	return 
endf 

def node_141
	random (0) 
	elser (0) >> node_027 
	elser (50) >> node_035 
	elser (15) >> node_041 
	elser (0) >> node_047 
	elser (0) >> node_051 
	elser (10) >> node_083 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_142
	random (0) 
	elser (0) >> node_027 
	elser (10) >> node_035 
	elser (30) >> node_041 
	elser (35) >> node_047 
	elser (0) >> node_051 
	elser (0) >> node_083 
	elser (10) >> node_075 
	elser (15) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_143
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (60) >> node_041 
	elser (0) >> node_047 
	elser (15) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (25) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_144
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (70) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_145
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (70) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_146
	random (0) 
	elser (0) >> node_027 
	elser (40) >> node_035 
	elser (20) >> node_041 
	elser (0) >> node_047 
	elser (0) >> node_051 
	elser (10) >> node_083 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_147
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (30) >> node_041 
	elser (40) >> node_047 
	elser (0) >> node_051 
	elser (0) >> node_083 
	elser (10) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (0) >> node_078 
	elser (20) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_148
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (50) >> node_041 
	elser (0) >> node_047 
	elser (20) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (0) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_149
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (60) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (30) >> node_077 
	elser (10) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_150
	random (0) 
	elser (0) >> node_027 
	elser (0) >> node_035 
	elser (0) >> node_041 
	elser (0) >> node_047 
	elser (70) >> node_051 
	elser (0) >> node_083 
	elser (0) >> node_075 
	elser (0) >> node_076 
	elser (0) >> node_077 
	elser (30) >> node_078 
	elser (0) >> node_080 
	elser (0) 
	endr 
	return 
endf 

def node_151
	self.targetEnemy(target_em.random_player_or_cat) 
	>> node_152 
	return 
endf 

def node_152
	if self.distance_2d_to_target().leq(600) 
		if self.enraged() 
			>> node_163 
		elif self.fatigued() 
			>> node_158 
		else 
			>> node_153 
		endif 
	elif self.distance_2d_to_target().leq(1300) 
		if self.enraged() 
			>> node_164 
		elif self.fatigued() 
			>> node_159 
		else 
			>> node_154 
		endif 
	elif self.distance_2d_to_target().leq(1800) 
		if self.enraged() 
			>> node_165 
		elif self.fatigued() 
			>> node_160 
		else 
			>> node_155 
		endif 
	elif self.distance_2d_to_target().leq(3000) 
		if self.enraged() 
			>> node_166 
		elif self.fatigued() 
			>> node_161 
		else 
			>> node_156 
		endif 
	else 
		if self.enraged() 
			>> node_167 
		elif self.fatigued() 
			>> node_162 
		else 
			>> node_157 
		endif 
	endif 
	return 
endf 

def node_153
	random (0) 
	elser (0) >> node_001 
	elser (25) >> node_043 
	elser (60) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_154
	random (0) 
	elser (0) >> node_001 
	elser (20) >> node_043 
	elser (35) >> node_044 
	elser (45) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_155
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (50) >> node_045 
	elser (30) >> node_049 
	elser (0) >> node_051 
	elser (20) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_156
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (0) >> node_051 
	elser (50) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_157
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (35) >> node_049 
	elser (0) >> node_051 
	elser (65) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_158
	random (0) 
	elser (10) >> node_001 
	elser (0) >> node_043 
	elser (40) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_159
	random (0) 
	elser (20) >> node_001 
	elser (0) >> node_043 
	elser (30) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_160
	random (0) 
	elser (30) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (45) >> node_049 
	elser (25) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_161
	random (0) 
	elser (30) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (50) >> node_049 
	elser (20) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_162
	random (0) 
	elser (30) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (35) >> node_049 
	elser (35) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_163
	random (0) 
	elser (0) >> node_001 
	elser (50) >> node_043 
	elser (35) >> node_044 
	elser (15) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_164
	random (0) 
	elser (0) >> node_001 
	elser (40) >> node_043 
	elser (15) >> node_044 
	elser (45) >> node_045 
	elser (0) >> node_049 
	elser (0) >> node_051 
	elser (0) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_165
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (40) >> node_045 
	elser (30) >> node_049 
	elser (0) >> node_051 
	elser (30) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_166
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (40) >> node_049 
	elser (0) >> node_051 
	elser (60) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_167
	random (0) 
	elser (0) >> node_001 
	elser (0) >> node_043 
	elser (0) >> node_044 
	elser (0) >> node_045 
	elser (20) >> node_049 
	elser (0) >> node_051 
	elser (80) >> node_052 
	elser (0) 
	endr 
	return 
endf 

def node_168
	if self.distance_2d_to_target().leq(1000) 
		self.enraged() >> node_174 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_169 => reset 
	elif self.distance_2d_to_target().leq(1500) 
		self.enraged() >> node_175 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_170 => reset 
	elif self.distance_2d_to_target().leq(2000) 
		self.enraged() >> node_176 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_171 => reset 
	elif self.distance_2d_to_target().leq(2500) 
		self.enraged() >> node_177 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_172 => reset 
	else 
		self.enraged() >> node_178 => reset 
		self.fatigued() >> node_179 => reset 
		>> node_173 => reset 
	endif 
	return 
endf 

def node_169
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (30) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (70) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_170
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (60) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (40) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_171
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (50) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (50) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_172
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (30) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (70) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_173
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (100) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_174
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (30) >> node_090 
	elser (20) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (50) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_175
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (20) >> node_090 
	elser (30) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (50) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_176
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (20) >> node_090 
	elser (30) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (50) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_177
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (25) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (75) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_178
	random (0) 
	elser (0) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (100) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_179
	random (0) 
	elser (100) >> node_087 
	elser (0) >> node_088 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (0) >> node_091 
	elser (0) >> node_093 
	elser (0) >> node_095 
	elser (0) >> node_096 
	elser (0) 
	endr 
	return 
endf 

def node_180
	if self.distance_2d_to_target().leq(1000) 
		self.enraged() >> node_181 => return 
		self.fatigued() >> node_181 => return 
		>> node_181 => return 
	elif self.distance_2d_to_target().leq(1500) 
		self.enraged() >> node_182 => return 
		self.fatigued() >> node_182 => return 
		>> node_182 => return 
	elif self.distance_2d_to_target().leq(2000) 
		self.enraged() >> node_183 => return 
		self.fatigued() >> node_183 => return 
		>> node_183 => return 
	elif self.distance_2d_to_target().leq(2500) 
		self.enraged() >> node_184 => return 
		self.fatigued() >> node_184 => return 
		>> node_184 => return 
	else 
		self.enraged() >> node_185 => return 
		self.fatigued() >> node_185 => return 
		>> node_185 => return 
	endif 
	return 
endf 

def node_181
	random (0) 
	elser (10) >> node_089 
	elser (30) >> node_090 
	elser (10) >> node_091 
	elser (50) >> node_093 
	elser (0) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_182
	random (0) 
	elser (10) >> node_089 
	elser (35) >> node_090 
	elser (10) >> node_091 
	elser (45) >> node_093 
	elser (0) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_183
	random (0) 
	elser (10) >> node_089 
	elser (15) >> node_090 
	elser (35) >> node_091 
	elser (40) >> node_093 
	elser (0) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_184
	random (0) 
	elser (0) >> node_089 
	elser (20) >> node_090 
	elser (20) >> node_091 
	elser (0) >> node_093 
	elser (60) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_185
	random (0) 
	elser (0) >> node_089 
	elser (0) >> node_090 
	elser (30) >> node_091 
	elser (0) >> node_093 
	elser (70) >> node_095 
	elser (0) 
	endr 
	return 
endf 

def node_186
	if self.distance_2d_to_target().leq(600) 
		self.enraged() >> node_190 => reset 
		self.fatigued() >> node_193 => reset 
		>> node_187 => reset 
	elif self.distance_2d_to_target().leq(1800) 
		self.enraged() >> node_191 => reset 
		self.fatigued() >> node_193 => reset 
		>> node_188 => reset 
	else 
		self.enraged() >> node_192 => reset 
		self.fatigued() >> node_193 => reset 
		>> node_189 => reset 
	endif 
	return 
endf 

def node_187
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (50) >> node_104 
	elser (50) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_188
	random (0) 
	elser (25) >> node_101 
	elser (25) >> node_102 
	elser (0) >> node_103 
	elser (25) >> node_104 
	elser (25) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_189
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (0) >> node_104 
	elser (100) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_190
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (50) >> node_104 
	elser (0) >> node_105 
	elser (50) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_191
	random (0) 
	elser (50) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (0) >> node_104 
	elser (0) >> node_105 
	elser (50) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_192
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (0) >> node_103 
	elser (0) >> node_104 
	elser (0) >> node_105 
	elser (100) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_193
	random (0) 
	elser (0) >> node_101 
	elser (0) >> node_102 
	elser (100) >> node_103 
	elser (0) >> node_104 
	elser (0) >> node_105 
	elser (0) >> node_106 
	elser (0) 
	endr 
	return 
endf 

def node_194
	>> node_199 
	if self.targetEnemy(target_em.any_monster) 
		if self.target(13) 
		else 
			if self.vertical_distance_to_target().leq(1000) 
				if self.distance_3d_to_target().leq(3000) 
					if self.target_is(em.Fulgur_Anjanath) 
						>> node_198 
					elif self.target_is(em.Odogaron) 
						>> node_198 
					elif self.target_is(em.Ebony_Odogaron) 
						>> node_198 
					elif self.target_is(em.Legiana) 
						>> node_198 
					elif self.target_is(em.Shrieking_Legiana) 
						>> node_198 
					elif self.target_is(em.Banbaro) 
						>> node_198 
					elif function#30(2) 
						>> node_195 
					elif function#30(4) 
						>> node_196 
					else 
						>> node_197 
					endif 
				else 
				endif 
			else 
			endif 
		endif 
	else 
	endif 
	return 
endf 

def node_195
	if self.target.in_combat() 
		random (35) >> node_201 
		elser (0) >> node_202 
		elser (10) >> node_203 
		elser (55) >> node_204 
		elser (0) >> node_206 
		endr 
	else 
		random (10) >> node_201 
		elser (35) >> node_202 
		elser (0) >> node_203 
		elser (55) >> node_204 
		elser (0) >> node_206 
		endr 
	endif 
	return 
endf 

def node_196
	if self.target.in_combat() 
		random (35) >> node_201 
		elser (10) >> node_202 
		elser (55) >> node_203 
		elser (0) >> node_204 
		elser (0) >> node_206 
		endr 
	else 
		random (35) >> node_201 
		elser (55) >> node_202 
		elser (10) >> node_203 
		elser (0) >> node_204 
		elser (0) >> node_206 
		endr 
	endif 
	return 
endf 

def node_197
	if self.target.in_combat() 
		random (35) >> node_201 
		elser (0) >> node_202 
		elser (50) >> node_203 
		elser (0) >> node_204 
		elser (15) >> node_206 
		endr 
	else 
		random (35) >> node_201 
		elser (55) >> node_202 
		elser (10) >> node_203 
		elser (0) >> node_204 
		elser (0) >> node_206 
		endr 
	endif 
	return 
endf 

def node_198
	if self.target(39) 
		>> node_195 
	else 
		if self.in_combat() 
			if self.target.in_combat() 
				random (75) >> node_201 
				elser (15) >> node_202 
				elser (10) >> node_203 
				elser (0) >> node_204 
				endr 
			else 
				random (40) >> node_201 
				elser (60) >> node_202 
				elser (0) >> node_203 
				elser (0) >> node_204 
				endr 
			endif 
		else 
			if self.target.in_combat() 
				random (10) >> node_201 
				elser (5) >> node_202 
				elser (65) >> node_203 
				elser (20) >> node_204 
				endr 
			else 
				random (10) >> node_201 
				elser (5) >> node_202 
				elser (65) >> node_203 
				elser (20) >> node_204 
				endr 
			endif 
		endif 
	endif 
	return 
endf 

def node_199
	if function#38(0,10003) 
		>> node_200 
	elif self.quest_id(1102) 
		>> node_200 
	else 
	endif 
	return 
endf 

def node_200
	if function#CE(1,1) 
		function#CF() 
	else 
	endif 
	return 
endf 

def node_201
	return 
endf 

def node_202
	>> node_003 
	>> node_008 
	>> node_026 
	return 
endf 

def node_203
	>> node_003 
	if self.vertical_distance_to_target().gt(500) 
		>> node_078 
		>> node_095 
	else 
		if self.distance_3d_to_target().leq(700) 
			random (30) >> node_040 
			elser (30) >> node_045 
			elser (30) >> node_044 
			elser (10) >> node_043 
			endr 
		else 
			random (40) >> node_052 
			elser (30) >> node_051 
			elser (30) >> node_065 
			endr 
		endif 
	endif 
	return 
endf 

def node_204
	>> node_003 
	if [RegisterVar1 == 0] 
		[RegisterVar1 ++] 
	else 
		[RegisterVar1 |-] 
		self.force_area_change2() 
	endif 
	>> node_205 
	return 
endf 

def node_205
	>> node_003 
	>> node_032 
	>> node_027 
	return 
endf 

def node_206
	>> node_203 
	[RegisterVar1 |-] 
	self.force_area_change2() 
	return 
endf 

def node_207
	self.targetArea(target_area.nearest_entrance) 
	if self.flying() 
		self.targetArea(40) 
		>> node_208 
	else 
		self.targetArea(39) 
		>> node_209 
	endif 
	return 
endf 

def node_208
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> barioth.glide(6,2,5,900,3000) 
		repeat 
	endif 
	return 
endf 

def node_209
	>> node_194 
	self.targetArea(39) 
	if self.distance_3d_to_target().leq(600) 
	else 
		if self.fatigued() 
			-> barioth.walk_tired(2,5,0,1500) 
		else 
			-> barioth.walk(2,5,0,1500) 
		endif 
		repeat 
	endif 
	return 
endf 

def node_210
	if self.distance_3d_to_target().leq(600) 
	else 
		-> barioth.glide(2,1,0,3000,500) 
		repeat 
	endif 
	return 
endf 

def node_211
	if self.distance_3d_to_target().leq(1000) 
	else 
		-> barioth.glide(2,1,0,3000,900) 
		repeat 
	endif 
	return 
endf 

def node_212
endf 

