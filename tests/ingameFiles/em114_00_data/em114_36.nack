importactions Radobaan as radobaan
importlibrary Global as Global

def node_000 : 1
	>> Global.node_008 
	self.targetEnemy(21) @ parameter2:700 
	>> node_007 
	if self.current_quest().is_rank(rank.MR) 
		self.enraged() >> node_002 => reset 
		self.fatigued() >> node_003 => reset 
		>> node_001 => reset 
	else 
		self.enraged() >> node_005 => reset 
		self.fatigued() >> node_006 => reset 
		>> node_004 => reset 
	endif 
	reset 
endf 

def node_001 : 2
	random (55) >> Global.node_023 
	elser (35) >> Global.node_027 
	elser (5) >> Global.node_019 
	elser (5) >> Global.node_020 
	endr 
	return 
endf 

def node_002 : 3
	random (45) >> Global.node_023 
	elser (20) >> Global.node_027 
	elser (25) >> Global.node_024 
	elser (5) >> Global.node_019 
	elser (5) >> Global.node_020 
	endr 
	return 
endf 

def node_003 : 4
	random (50) >> Global.node_023 
	elser (35) >> Global.node_022 
	elser (5) >> Global.node_020 
	elser (10) >> Global.node_019 
	endr 
	return 
endf 

def node_004 : 12
	random (45) >> Global.node_023 
	elser (25) >> Global.node_027 
	elser (20) >> Global.node_019 
	elser (10) >> Global.node_020 
	endr 
	return 
endf 

def node_005 : 13
	random (45) >> Global.node_023 
	elser (20) >> Global.node_027 
	elser (15) >> Global.node_024 
	elser (15) >> Global.node_019 
	elser (5) >> Global.node_020 
	endr 
	return 
endf 

def node_006 : 14
	random (40) >> Global.node_023 
	elser (30) >> Global.node_022 
	elser (5) >> Global.node_020 
	elser (25) >> Global.node_019 
	endr 
	return 
endf 

def node_007 : 11
	if self.target_on_part(0) -> radobaan.tired() 
		-> radobaan.ride_rage_head() => reset 
	elif self.target_on_part(1) -> radobaan.tired() 
		-> radobaan.ride_rage_body() => reset 
	elif self.target_on_part(2) -> radobaan.tired() 
		-> radobaan.ride_rage_tail() => reset 
	else 
	endif 
	return 
endf 

