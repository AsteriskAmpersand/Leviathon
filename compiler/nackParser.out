Grammar:

Rule 0     S' -> nackFile
Rule 1     nackFile -> skip nackHeader nackBody
Rule 2     nackFile -> nackHeader nackBody
Rule 3     nackHeader -> assignment nackHeader
Rule 4     nackHeader -> registerDeclaration nackHeader
Rule 5     nackHeader -> actionImport nackHeader
Rule 6     nackHeader -> libraryImport nackHeader
Rule 7     nackHeader -> empty
Rule 8     libraryImport -> IMPORTLIBRARY numeric AS ID skip
Rule 9     libraryImport -> IMPORTLIBRARY ID AS ID skip
Rule 10    libraryImport -> IMPORTLIBRARY PATH AS ID skip
Rule 11    actionImport -> IMPORTACTIONS ID AS ID skip
Rule 12    actionImport -> IMPORTACTIONS PATH AS ID skip
Rule 13    registerDeclaration -> REGISTER id AS REG skip
Rule 14    registerDeclaration -> REGISTER id skip
Rule 15    assignment -> id ASSIGN numeric skip
Rule 16    nackBody -> empty
Rule 17    nackBody -> node nackBody
Rule 18    node -> defHeader nodeBody nodeEnd
Rule 19    defHeader -> DEF id nodeAlias nodeIndex skip
Rule 20    nodeAlias -> empty
Rule 21    nodeAlias -> & id nodeAlias
Rule 22    nodeIndex -> empty
Rule 23    nodeIndex -> META numeric
Rule 24    nodeIndex -> : numeric META numeric
Rule 25    nodeIndex -> : numeric
Rule 26    nodeBody -> empty
Rule 27    nodeBody -> segment nodeBody
Rule 28    nodeEnd -> ENDFUNCTION maybeMetaType skip
Rule 29    nodeEnd -> ENDDEF maybeMetaType skip
Rule 30    nodeEnd -> ENDF maybeMetaType skip
Rule 31    segment -> DO_NOTHING skip
Rule 32    segment -> UNSAFE skip
Rule 33    segment -> uncontrolledSegment
Rule 34    segment -> CONCLUDE uncontrolledSegment
Rule 35    segment -> conditional
Rule 36    segment -> chance
Rule 37    chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
Rule 38    optionalChance -> optionalTerminator
Rule 39    optionalChance -> chanceBody actionTypeStart nodeBody optionalChance
Rule 40    optionalTerminator -> ENDRANDOMWITH uncontrolledSegment
Rule 41    optionalTerminator -> ENDRWITH uncontrolledSegment
Rule 42    optionalTerminator -> ENDRANDOM skip
Rule 43    optionalTerminator -> ENDR skip
Rule 44    chanceHeader -> RANDOM ( id )
Rule 45    chanceHeader -> RANDOM ( numeric )
Rule 46    chanceBody -> elsechance ( id )
Rule 47    chanceBody -> elsechance ( numeric )
Rule 48    elsechance -> ELSER
Rule 49    elsechance -> ELSERANDOM
Rule 50    conditional -> IF uncontrolledSegment nodeBody conditionalTerminator
Rule 51    conditionalTerminator -> ENDWITH uncontrolledSegment
Rule 52    conditionalTerminator -> ENDIF skip
Rule 53    conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator
Rule 54    conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator
Rule 55    uncontrolledSegment -> directiveName maybeMetaType skip
Rule 56    uncontrolledSegment -> maybeFunctionType actionTypeStart
Rule 57    actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
Rule 58    maybeFunctionType -> empty
Rule 59    maybeFunctionType -> functionType
Rule 60    maybeActionType -> empty
Rule 61    maybeActionType -> actionType
Rule 62    maybeCallType -> empty
Rule 63    maybeCallType -> callType
Rule 64    maybeDirectiveType -> empty
Rule 65    maybeDirectiveType -> directiveType
Rule 66    maybeMetaType -> empty
Rule 67    maybeMetaType -> metaType
Rule 68    functionType -> registerType
Rule 69    functionType -> functionLiteral
Rule 70    functionType -> functionName
Rule 71    actionType -> DO_ACTION actionLiteral actionParens
Rule 72    actionType -> DO_ACTION actionName actionParens
Rule 73    callType -> DO_CALL callName
Rule 74    directiveType -> DO_DIRECTIVE directiveName
Rule 75    metaType -> META metaparams
Rule 76    functionName -> FUNCTION_START id maybeParens maybeSubFunction
Rule 77    functionName -> FUNCTION_START id parens
Rule 78    functionName -> FUNCTION_START id
Rule 79    maybeSubFunction -> . id parens maybeSubFunction
Rule 80    maybeSubFunction -> . id maybeParens
Rule 81    maybeParens -> empty
Rule 82    maybeParens -> parens
Rule 83    parens -> funcParens
Rule 84    parens -> ( )
Rule 85    functionLiteral -> FUNCTION maybeFuncLiteralParens
Rule 86    maybeFuncLiteralParens -> funcParens
Rule 87    maybeFuncLiteralParens -> ( )
Rule 88    maybeFuncLiteralParens -> empty
Rule 89    funcParens -> ( floatNumericSymbol commaPrefacedId )
Rule 90    funcParens -> ( id . id commaPrefacedId )
Rule 91    commaPrefacedId -> , floatNumericSymbol commaPrefacedId
Rule 92    commaPrefacedId -> , id . id commaPrefacedId
Rule 93    commaPrefacedId -> empty
Rule 94    actionParens -> ( maybeActionParams )
Rule 95    maybeActionParams -> numeric maybeMoreActionParams
Rule 96    maybeActionParams -> empty
Rule 97    maybeMoreActionParams -> , numeric maybeMoreActionParams
Rule 98    maybeMoreActionParams -> empty
Rule 99    actionName -> id
Rule 100   actionName -> id . id
Rule 101   actionLiteral -> ACTION
Rule 102   callName -> CALL
Rule 103   callName -> id
Rule 104   callName -> id . CALL
Rule 105   callName -> id . id
Rule 106   directiveName -> REPEAT
Rule 107   directiveName -> RESET
Rule 108   directiveName -> RETURN
Rule 109   metaparams -> metaparamPair , metaparams
Rule 110   metaparams -> metaparamPair
Rule 111   metaparamPair -> id : numericSymbol
Rule 112   registerType -> [ registerContent ]
Rule 113   registerContent -> regRef regComp regRef
Rule 114   registerContent -> regRef regOp
Rule 115   regOp -> ELAPSED
Rule 116   regOp -> TIME
Rule 117   regOp -> DECREMENT
Rule 118   regOp -> CLEAR
Rule 119   regOp -> INCREMENT
Rule 120   regComp -> ELAPLT
Rule 121   regComp -> ELAPGT
Rule 122   regComp -> MOD
Rule 123   regComp -> DIV
Rule 124   regComp -> MUL
Rule 125   regComp -> SUB
Rule 126   regComp -> ADD
Rule 127   regComp -> SET
Rule 128   regComp -> NEQ
Rule 129   regComp -> GT
Rule 130   regComp -> GEQ
Rule 131   regComp -> LT
Rule 132   regComp -> LEQ
Rule 133   regComp -> EQ
Rule 134   regRef -> numericSymbol
Rule 135   regRef -> REG
Rule 136   numericSymbol -> numeric
Rule 137   numericSymbol -> id
Rule 138   floatNumericSymbol -> float
Rule 139   floatNumericSymbol -> numeric
Rule 140   floatNumericSymbol -> id
Rule 141   float -> FLOAT
Rule 142   numeric -> HEXNUMBER
Rule 143   numeric -> NUMBER
Rule 144   id -> ID
Rule 145   skip -> LINESKIP skip
Rule 146   skip -> LINESKIP
Rule 147   empty -> <empty>

Unused terminals:

    COMMENTS
    DORRAH
    LINECONTINUE

Terminals, with rules where they appear:

&                    : 21
(                    : 44 45 46 47 84 87 89 90 94
)                    : 44 45 46 47 84 87 89 90 94
,                    : 91 92 97 109
.                    : 79 80 90 92 100 104 105
:                    : 24 25 111
ACTION               : 101
ADD                  : 126
AS                   : 8 9 10 11 12 13
ASSIGN               : 15
CALL                 : 102 104
CLEAR                : 118
COMMENTS             : 
CONCLUDE             : 34
DECREMENT            : 117
DEF                  : 19
DIV                  : 123
DORRAH               : 
DO_ACTION            : 71 72
DO_CALL              : 73
DO_DIRECTIVE         : 74
DO_NOTHING           : 31
ELAPGT               : 121
ELAPLT               : 120
ELAPSED              : 115
ELIF                 : 54
ELSE                 : 53
ELSER                : 48
ELSERANDOM           : 49
ENDDEF               : 29
ENDF                 : 30
ENDFUNCTION          : 28
ENDIF                : 52
ENDR                 : 43
ENDRANDOM            : 42
ENDRANDOMWITH        : 40
ENDRWITH             : 41
ENDWITH              : 51
EQ                   : 133
FLOAT                : 141
FUNCTION             : 85
FUNCTION_START       : 76 77 78
GEQ                  : 130
GT                   : 129
HEXNUMBER            : 142
ID                   : 8 9 9 10 11 11 12 144
IF                   : 50
IMPORTACTIONS        : 11 12
IMPORTLIBRARY        : 8 9 10
INCREMENT            : 119
LEQ                  : 132
LINECONTINUE         : 
LINESKIP             : 145 146
LT                   : 131
META                 : 23 24 75
MOD                  : 122
MUL                  : 124
NEQ                  : 128
NUMBER               : 143
PATH                 : 10 12
RANDOM               : 44 45
REG                  : 13 135
REGISTER             : 13 14
REPEAT               : 106
RESET                : 107
RETURN               : 108
SET                  : 127
SUB                  : 125
TIME                 : 116
UNSAFE               : 32
[                    : 112
]                    : 112
error                : 

Nonterminals, with rules where they appear:

actionImport         : 5
actionLiteral        : 71
actionName           : 72
actionParens         : 71 72
actionType           : 61
actionTypeStart      : 37 39 53 54 56
assignment           : 3
callName             : 73
callType             : 63
chance               : 36
chanceBody           : 37 39
chanceHeader         : 37
commaPrefacedId      : 89 90 91 92
conditional          : 35
conditionalTerminator : 50 53 54
defHeader            : 18
directiveName        : 55 74
directiveType        : 65
elsechance           : 46 47
empty                : 7 16 20 22 26 58 60 62 64 66 81 88 93 96 98
float                : 138
floatNumericSymbol   : 89 91
funcParens           : 83 86
functionLiteral      : 69
functionName         : 70
functionType         : 54 59
id                   : 13 14 15 19 21 44 46 76 77 78 79 80 90 90 92 92 99 100 100 103 104 105 105 111 137 140
libraryImport        : 6
maybeActionParams    : 94
maybeActionType      : 57
maybeCallType        : 57
maybeDirectiveType   : 57
maybeFuncLiteralParens : 85
maybeFunctionType    : 56
maybeMetaType        : 28 29 30 55 57
maybeMoreActionParams : 95 97
maybeParens          : 76 80
maybeSubFunction     : 76 79
metaType             : 67
metaparamPair        : 109 110
metaparams           : 75 109
nackBody             : 1 2 17
nackFile             : 0
nackHeader           : 1 2 3 4 5 6
node                 : 17
nodeAlias            : 19 21
nodeBody             : 18 27 37 37 39 50 53 54
nodeEnd              : 18
nodeIndex            : 19
numeric              : 8 15 23 24 24 25 45 47 95 97 136 139
numericSymbol        : 111 134
optionalChance       : 37 39
optionalTerminator   : 38
parens               : 77 79 82
regComp              : 113
regOp                : 114
regRef               : 113 113 114
registerContent      : 112
registerDeclaration  : 4
registerType         : 68
segment              : 27
skip                 : 1 8 9 10 11 12 13 14 15 19 28 29 30 31 32 42 43 52 55 57 145
uncontrolledSegment  : 33 34 37 40 41 50 51


state 0

    (0) S' -> . nackFile
    (1) nackFile -> . skip nackHeader nackBody
    (2) nackFile -> . nackHeader nackBody
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (147) empty -> .
    (144) id -> . ID
    LINESKIP        shift and go to state 4
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 147 (empty -> .)
    $end            reduce using rule 147 (empty -> .)
    ID              shift and go to state 13

    nackFile                       shift and go to state 1
    skip                           shift and go to state 2
    nackHeader                     shift and go to state 3
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 1

    (0) S' -> nackFile .


state 2

    (1) nackFile -> skip . nackHeader nackBody
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (147) empty -> .
    (144) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 147 (empty -> .)
    $end            reduce using rule 147 (empty -> .)
    ID              shift and go to state 13

    nackHeader                     shift and go to state 15
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 3

    (2) nackFile -> nackHeader . nackBody
    (16) nackBody -> . empty
    (17) nackBody -> . node nackBody
    (147) empty -> .
    (18) node -> . defHeader nodeBody nodeEnd
    (19) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 147 (empty -> .)
    DEF             shift and go to state 20

    nackBody                       shift and go to state 16
    empty                          shift and go to state 17
    node                           shift and go to state 18
    defHeader                      shift and go to state 19

state 4

    (145) skip -> LINESKIP . skip
    (146) skip -> LINESKIP .
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
  ! shift/reduce conflict for LINESKIP resolved as shift
    REGISTER        reduce using rule 146 (skip -> LINESKIP .)
    IMPORTACTIONS   reduce using rule 146 (skip -> LINESKIP .)
    IMPORTLIBRARY   reduce using rule 146 (skip -> LINESKIP .)
    ID              reduce using rule 146 (skip -> LINESKIP .)
    DEF             reduce using rule 146 (skip -> LINESKIP .)
    $end            reduce using rule 146 (skip -> LINESKIP .)
    DO_NOTHING      reduce using rule 146 (skip -> LINESKIP .)
    UNSAFE          reduce using rule 146 (skip -> LINESKIP .)
    CONCLUDE        reduce using rule 146 (skip -> LINESKIP .)
    IF              reduce using rule 146 (skip -> LINESKIP .)
    REPEAT          reduce using rule 146 (skip -> LINESKIP .)
    RESET           reduce using rule 146 (skip -> LINESKIP .)
    RETURN          reduce using rule 146 (skip -> LINESKIP .)
    RANDOM          reduce using rule 146 (skip -> LINESKIP .)
    [               reduce using rule 146 (skip -> LINESKIP .)
    FUNCTION        reduce using rule 146 (skip -> LINESKIP .)
    FUNCTION_START  reduce using rule 146 (skip -> LINESKIP .)
    DO_ACTION       reduce using rule 146 (skip -> LINESKIP .)
    DO_CALL         reduce using rule 146 (skip -> LINESKIP .)
    DO_DIRECTIVE    reduce using rule 146 (skip -> LINESKIP .)
    META            reduce using rule 146 (skip -> LINESKIP .)
    ENDFUNCTION     reduce using rule 146 (skip -> LINESKIP .)
    ENDDEF          reduce using rule 146 (skip -> LINESKIP .)
    ENDF            reduce using rule 146 (skip -> LINESKIP .)
    ENDWITH         reduce using rule 146 (skip -> LINESKIP .)
    ENDIF           reduce using rule 146 (skip -> LINESKIP .)
    ELSE            reduce using rule 146 (skip -> LINESKIP .)
    ELIF            reduce using rule 146 (skip -> LINESKIP .)
    ELSER           reduce using rule 146 (skip -> LINESKIP .)
    ELSERANDOM      reduce using rule 146 (skip -> LINESKIP .)
    ENDRANDOMWITH   reduce using rule 146 (skip -> LINESKIP .)
    ENDRWITH        reduce using rule 146 (skip -> LINESKIP .)
    ENDRANDOM       reduce using rule 146 (skip -> LINESKIP .)
    ENDR            reduce using rule 146 (skip -> LINESKIP .)
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 21

state 5

    (3) nackHeader -> assignment . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (147) empty -> .
    (144) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 147 (empty -> .)
    $end            reduce using rule 147 (empty -> .)
    ID              shift and go to state 13

    assignment                     shift and go to state 5
    nackHeader                     shift and go to state 22
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 6

    (4) nackHeader -> registerDeclaration . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (147) empty -> .
    (144) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 147 (empty -> .)
    $end            reduce using rule 147 (empty -> .)
    ID              shift and go to state 13

    registerDeclaration            shift and go to state 6
    nackHeader                     shift and go to state 23
    assignment                     shift and go to state 5
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 7

    (5) nackHeader -> actionImport . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (147) empty -> .
    (144) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 147 (empty -> .)
    $end            reduce using rule 147 (empty -> .)
    ID              shift and go to state 13

    actionImport                   shift and go to state 7
    nackHeader                     shift and go to state 24
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 8

    (6) nackHeader -> libraryImport . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (147) empty -> .
    (144) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 147 (empty -> .)
    $end            reduce using rule 147 (empty -> .)
    ID              shift and go to state 13

    libraryImport                  shift and go to state 8
    nackHeader                     shift and go to state 25
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 9

    (7) nackHeader -> empty .
    DEF             reduce using rule 7 (nackHeader -> empty .)
    $end            reduce using rule 7 (nackHeader -> empty .)


state 10

    (15) assignment -> id . ASSIGN numeric skip
    ASSIGN          shift and go to state 26


state 11

    (13) registerDeclaration -> REGISTER . id AS REG skip
    (14) registerDeclaration -> REGISTER . id skip
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 27

state 12

    (11) actionImport -> IMPORTACTIONS . ID AS ID skip
    (12) actionImport -> IMPORTACTIONS . PATH AS ID skip
    ID              shift and go to state 28
    PATH            shift and go to state 29


state 13

    (144) id -> ID .
    ASSIGN          reduce using rule 144 (id -> ID .)
    AS              reduce using rule 144 (id -> ID .)
    LINESKIP        reduce using rule 144 (id -> ID .)
    &               reduce using rule 144 (id -> ID .)
    META            reduce using rule 144 (id -> ID .)
    :               reduce using rule 144 (id -> ID .)
    ELAPLT          reduce using rule 144 (id -> ID .)
    ELAPGT          reduce using rule 144 (id -> ID .)
    MOD             reduce using rule 144 (id -> ID .)
    DIV             reduce using rule 144 (id -> ID .)
    MUL             reduce using rule 144 (id -> ID .)
    SUB             reduce using rule 144 (id -> ID .)
    ADD             reduce using rule 144 (id -> ID .)
    SET             reduce using rule 144 (id -> ID .)
    NEQ             reduce using rule 144 (id -> ID .)
    GT              reduce using rule 144 (id -> ID .)
    GEQ             reduce using rule 144 (id -> ID .)
    LT              reduce using rule 144 (id -> ID .)
    LEQ             reduce using rule 144 (id -> ID .)
    EQ              reduce using rule 144 (id -> ID .)
    ELAPSED         reduce using rule 144 (id -> ID .)
    TIME            reduce using rule 144 (id -> ID .)
    DECREMENT       reduce using rule 144 (id -> ID .)
    CLEAR           reduce using rule 144 (id -> ID .)
    INCREMENT       reduce using rule 144 (id -> ID .)
    (               reduce using rule 144 (id -> ID .)
    .               reduce using rule 144 (id -> ID .)
    DO_ACTION       reduce using rule 144 (id -> ID .)
    DO_CALL         reduce using rule 144 (id -> ID .)
    DO_DIRECTIVE    reduce using rule 144 (id -> ID .)
    )               reduce using rule 144 (id -> ID .)
    ,               reduce using rule 144 (id -> ID .)
    ]               reduce using rule 144 (id -> ID .)


state 14

    (8) libraryImport -> IMPORTLIBRARY . numeric AS ID skip
    (9) libraryImport -> IMPORTLIBRARY . ID AS ID skip
    (10) libraryImport -> IMPORTLIBRARY . PATH AS ID skip
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    ID              shift and go to state 31
    PATH            shift and go to state 32
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 30

state 15

    (1) nackFile -> skip nackHeader . nackBody
    (16) nackBody -> . empty
    (17) nackBody -> . node nackBody
    (147) empty -> .
    (18) node -> . defHeader nodeBody nodeEnd
    (19) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 147 (empty -> .)
    DEF             shift and go to state 20

    nackBody                       shift and go to state 35
    empty                          shift and go to state 17
    node                           shift and go to state 18
    defHeader                      shift and go to state 19

state 16

    (2) nackFile -> nackHeader nackBody .
    $end            reduce using rule 2 (nackFile -> nackHeader nackBody .)


state 17

    (16) nackBody -> empty .
    $end            reduce using rule 16 (nackBody -> empty .)


state 18

    (17) nackBody -> node . nackBody
    (16) nackBody -> . empty
    (17) nackBody -> . node nackBody
    (147) empty -> .
    (18) node -> . defHeader nodeBody nodeEnd
    (19) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 147 (empty -> .)
    DEF             shift and go to state 20

    node                           shift and go to state 18
    nackBody                       shift and go to state 36
    empty                          shift and go to state 17
    defHeader                      shift and go to state 19

state 19

    (18) node -> defHeader . nodeBody nodeEnd
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDFUNCTION     reduce using rule 147 (empty -> .)
    ENDDEF          reduce using rule 147 (empty -> .)
    ENDF            reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    nodeBody                       shift and go to state 37
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 20

    (19) defHeader -> DEF . id nodeAlias nodeIndex skip
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 61

state 21

    (145) skip -> LINESKIP skip .
    REGISTER        reduce using rule 145 (skip -> LINESKIP skip .)
    IMPORTACTIONS   reduce using rule 145 (skip -> LINESKIP skip .)
    IMPORTLIBRARY   reduce using rule 145 (skip -> LINESKIP skip .)
    ID              reduce using rule 145 (skip -> LINESKIP skip .)
    DEF             reduce using rule 145 (skip -> LINESKIP skip .)
    $end            reduce using rule 145 (skip -> LINESKIP skip .)
    DO_NOTHING      reduce using rule 145 (skip -> LINESKIP skip .)
    UNSAFE          reduce using rule 145 (skip -> LINESKIP skip .)
    CONCLUDE        reduce using rule 145 (skip -> LINESKIP skip .)
    IF              reduce using rule 145 (skip -> LINESKIP skip .)
    REPEAT          reduce using rule 145 (skip -> LINESKIP skip .)
    RESET           reduce using rule 145 (skip -> LINESKIP skip .)
    RETURN          reduce using rule 145 (skip -> LINESKIP skip .)
    RANDOM          reduce using rule 145 (skip -> LINESKIP skip .)
    [               reduce using rule 145 (skip -> LINESKIP skip .)
    FUNCTION        reduce using rule 145 (skip -> LINESKIP skip .)
    FUNCTION_START  reduce using rule 145 (skip -> LINESKIP skip .)
    DO_ACTION       reduce using rule 145 (skip -> LINESKIP skip .)
    DO_CALL         reduce using rule 145 (skip -> LINESKIP skip .)
    DO_DIRECTIVE    reduce using rule 145 (skip -> LINESKIP skip .)
    META            reduce using rule 145 (skip -> LINESKIP skip .)
    LINESKIP        reduce using rule 145 (skip -> LINESKIP skip .)
    ENDFUNCTION     reduce using rule 145 (skip -> LINESKIP skip .)
    ENDDEF          reduce using rule 145 (skip -> LINESKIP skip .)
    ENDF            reduce using rule 145 (skip -> LINESKIP skip .)
    ENDWITH         reduce using rule 145 (skip -> LINESKIP skip .)
    ENDIF           reduce using rule 145 (skip -> LINESKIP skip .)
    ELSE            reduce using rule 145 (skip -> LINESKIP skip .)
    ELIF            reduce using rule 145 (skip -> LINESKIP skip .)
    ELSER           reduce using rule 145 (skip -> LINESKIP skip .)
    ELSERANDOM      reduce using rule 145 (skip -> LINESKIP skip .)
    ENDRANDOMWITH   reduce using rule 145 (skip -> LINESKIP skip .)
    ENDRWITH        reduce using rule 145 (skip -> LINESKIP skip .)
    ENDRANDOM       reduce using rule 145 (skip -> LINESKIP skip .)
    ENDR            reduce using rule 145 (skip -> LINESKIP skip .)


state 22

    (3) nackHeader -> assignment nackHeader .
    DEF             reduce using rule 3 (nackHeader -> assignment nackHeader .)
    $end            reduce using rule 3 (nackHeader -> assignment nackHeader .)


state 23

    (4) nackHeader -> registerDeclaration nackHeader .
    DEF             reduce using rule 4 (nackHeader -> registerDeclaration nackHeader .)
    $end            reduce using rule 4 (nackHeader -> registerDeclaration nackHeader .)


state 24

    (5) nackHeader -> actionImport nackHeader .
    DEF             reduce using rule 5 (nackHeader -> actionImport nackHeader .)
    $end            reduce using rule 5 (nackHeader -> actionImport nackHeader .)


state 25

    (6) nackHeader -> libraryImport nackHeader .
    DEF             reduce using rule 6 (nackHeader -> libraryImport nackHeader .)
    $end            reduce using rule 6 (nackHeader -> libraryImport nackHeader .)


state 26

    (15) assignment -> id ASSIGN . numeric skip
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 62

state 27

    (13) registerDeclaration -> REGISTER id . AS REG skip
    (14) registerDeclaration -> REGISTER id . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    AS              shift and go to state 63
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 64

state 28

    (11) actionImport -> IMPORTACTIONS ID . AS ID skip
    AS              shift and go to state 65


state 29

    (12) actionImport -> IMPORTACTIONS PATH . AS ID skip
    AS              shift and go to state 66


state 30

    (8) libraryImport -> IMPORTLIBRARY numeric . AS ID skip
    AS              shift and go to state 67


state 31

    (9) libraryImport -> IMPORTLIBRARY ID . AS ID skip
    AS              shift and go to state 68


state 32

    (10) libraryImport -> IMPORTLIBRARY PATH . AS ID skip
    AS              shift and go to state 69


state 33

    (142) numeric -> HEXNUMBER .
    AS              reduce using rule 142 (numeric -> HEXNUMBER .)
    LINESKIP        reduce using rule 142 (numeric -> HEXNUMBER .)
    ELAPLT          reduce using rule 142 (numeric -> HEXNUMBER .)
    ELAPGT          reduce using rule 142 (numeric -> HEXNUMBER .)
    MOD             reduce using rule 142 (numeric -> HEXNUMBER .)
    DIV             reduce using rule 142 (numeric -> HEXNUMBER .)
    MUL             reduce using rule 142 (numeric -> HEXNUMBER .)
    SUB             reduce using rule 142 (numeric -> HEXNUMBER .)
    ADD             reduce using rule 142 (numeric -> HEXNUMBER .)
    SET             reduce using rule 142 (numeric -> HEXNUMBER .)
    NEQ             reduce using rule 142 (numeric -> HEXNUMBER .)
    GT              reduce using rule 142 (numeric -> HEXNUMBER .)
    GEQ             reduce using rule 142 (numeric -> HEXNUMBER .)
    LT              reduce using rule 142 (numeric -> HEXNUMBER .)
    LEQ             reduce using rule 142 (numeric -> HEXNUMBER .)
    EQ              reduce using rule 142 (numeric -> HEXNUMBER .)
    ELAPSED         reduce using rule 142 (numeric -> HEXNUMBER .)
    TIME            reduce using rule 142 (numeric -> HEXNUMBER .)
    DECREMENT       reduce using rule 142 (numeric -> HEXNUMBER .)
    CLEAR           reduce using rule 142 (numeric -> HEXNUMBER .)
    INCREMENT       reduce using rule 142 (numeric -> HEXNUMBER .)
    )               reduce using rule 142 (numeric -> HEXNUMBER .)
    ,               reduce using rule 142 (numeric -> HEXNUMBER .)
    ]               reduce using rule 142 (numeric -> HEXNUMBER .)
    META            reduce using rule 142 (numeric -> HEXNUMBER .)


state 34

    (143) numeric -> NUMBER .
    AS              reduce using rule 143 (numeric -> NUMBER .)
    LINESKIP        reduce using rule 143 (numeric -> NUMBER .)
    ELAPLT          reduce using rule 143 (numeric -> NUMBER .)
    ELAPGT          reduce using rule 143 (numeric -> NUMBER .)
    MOD             reduce using rule 143 (numeric -> NUMBER .)
    DIV             reduce using rule 143 (numeric -> NUMBER .)
    MUL             reduce using rule 143 (numeric -> NUMBER .)
    SUB             reduce using rule 143 (numeric -> NUMBER .)
    ADD             reduce using rule 143 (numeric -> NUMBER .)
    SET             reduce using rule 143 (numeric -> NUMBER .)
    NEQ             reduce using rule 143 (numeric -> NUMBER .)
    GT              reduce using rule 143 (numeric -> NUMBER .)
    GEQ             reduce using rule 143 (numeric -> NUMBER .)
    LT              reduce using rule 143 (numeric -> NUMBER .)
    LEQ             reduce using rule 143 (numeric -> NUMBER .)
    EQ              reduce using rule 143 (numeric -> NUMBER .)
    ELAPSED         reduce using rule 143 (numeric -> NUMBER .)
    TIME            reduce using rule 143 (numeric -> NUMBER .)
    DECREMENT       reduce using rule 143 (numeric -> NUMBER .)
    CLEAR           reduce using rule 143 (numeric -> NUMBER .)
    INCREMENT       reduce using rule 143 (numeric -> NUMBER .)
    )               reduce using rule 143 (numeric -> NUMBER .)
    ,               reduce using rule 143 (numeric -> NUMBER .)
    ]               reduce using rule 143 (numeric -> NUMBER .)
    META            reduce using rule 143 (numeric -> NUMBER .)


state 35

    (1) nackFile -> skip nackHeader nackBody .
    $end            reduce using rule 1 (nackFile -> skip nackHeader nackBody .)


state 36

    (17) nackBody -> node nackBody .
    $end            reduce using rule 17 (nackBody -> node nackBody .)


state 37

    (18) node -> defHeader nodeBody . nodeEnd
    (28) nodeEnd -> . ENDFUNCTION maybeMetaType skip
    (29) nodeEnd -> . ENDDEF maybeMetaType skip
    (30) nodeEnd -> . ENDF maybeMetaType skip
    ENDFUNCTION     shift and go to state 71
    ENDDEF          shift and go to state 72
    ENDF            shift and go to state 73

    nodeEnd                        shift and go to state 70

state 38

    (26) nodeBody -> empty .
    (58) maybeFunctionType -> empty .
    ENDFUNCTION     reduce using rule 26 (nodeBody -> empty .)
    ENDDEF          reduce using rule 26 (nodeBody -> empty .)
    ENDF            reduce using rule 26 (nodeBody -> empty .)
    ENDWITH         reduce using rule 26 (nodeBody -> empty .)
    ENDIF           reduce using rule 26 (nodeBody -> empty .)
    ELSE            reduce using rule 26 (nodeBody -> empty .)
    ELIF            reduce using rule 26 (nodeBody -> empty .)
    ELSER           reduce using rule 26 (nodeBody -> empty .)
    ELSERANDOM      reduce using rule 26 (nodeBody -> empty .)
    ENDRANDOMWITH   reduce using rule 26 (nodeBody -> empty .)
    ENDRWITH        reduce using rule 26 (nodeBody -> empty .)
    ENDRANDOM       reduce using rule 26 (nodeBody -> empty .)
    ENDR            reduce using rule 26 (nodeBody -> empty .)
    DO_ACTION       reduce using rule 58 (maybeFunctionType -> empty .)
    DO_CALL         reduce using rule 58 (maybeFunctionType -> empty .)
    DO_DIRECTIVE    reduce using rule 58 (maybeFunctionType -> empty .)
    META            reduce using rule 58 (maybeFunctionType -> empty .)
    LINESKIP        reduce using rule 58 (maybeFunctionType -> empty .)


state 39

    (27) nodeBody -> segment . nodeBody
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDFUNCTION     reduce using rule 147 (empty -> .)
    ENDDEF          reduce using rule 147 (empty -> .)
    ENDF            reduce using rule 147 (empty -> .)
    ENDWITH         reduce using rule 147 (empty -> .)
    ENDIF           reduce using rule 147 (empty -> .)
    ELSE            reduce using rule 147 (empty -> .)
    ELIF            reduce using rule 147 (empty -> .)
    ELSER           reduce using rule 147 (empty -> .)
    ELSERANDOM      reduce using rule 147 (empty -> .)
    ENDRANDOMWITH   reduce using rule 147 (empty -> .)
    ENDRWITH        reduce using rule 147 (empty -> .)
    ENDRANDOM       reduce using rule 147 (empty -> .)
    ENDR            reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    segment                        shift and go to state 39
    nodeBody                       shift and go to state 74
    empty                          shift and go to state 38
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 40

    (31) segment -> DO_NOTHING . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 75

state 41

    (32) segment -> UNSAFE . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 76

state 42

    (33) segment -> uncontrolledSegment .
    DO_NOTHING      reduce using rule 33 (segment -> uncontrolledSegment .)
    UNSAFE          reduce using rule 33 (segment -> uncontrolledSegment .)
    CONCLUDE        reduce using rule 33 (segment -> uncontrolledSegment .)
    IF              reduce using rule 33 (segment -> uncontrolledSegment .)
    REPEAT          reduce using rule 33 (segment -> uncontrolledSegment .)
    RESET           reduce using rule 33 (segment -> uncontrolledSegment .)
    RETURN          reduce using rule 33 (segment -> uncontrolledSegment .)
    RANDOM          reduce using rule 33 (segment -> uncontrolledSegment .)
    [               reduce using rule 33 (segment -> uncontrolledSegment .)
    FUNCTION        reduce using rule 33 (segment -> uncontrolledSegment .)
    FUNCTION_START  reduce using rule 33 (segment -> uncontrolledSegment .)
    DO_ACTION       reduce using rule 33 (segment -> uncontrolledSegment .)
    DO_CALL         reduce using rule 33 (segment -> uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 33 (segment -> uncontrolledSegment .)
    META            reduce using rule 33 (segment -> uncontrolledSegment .)
    LINESKIP        reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDDEF          reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDF            reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDWITH         reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDIF           reduce using rule 33 (segment -> uncontrolledSegment .)
    ELSE            reduce using rule 33 (segment -> uncontrolledSegment .)
    ELIF            reduce using rule 33 (segment -> uncontrolledSegment .)
    ELSER           reduce using rule 33 (segment -> uncontrolledSegment .)
    ELSERANDOM      reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDRANDOMWITH   reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDRWITH        reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDRANDOM       reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDR            reduce using rule 33 (segment -> uncontrolledSegment .)


state 43

    (34) segment -> CONCLUDE . uncontrolledSegment
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (147) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 77
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 44

    (35) segment -> conditional .
    DO_NOTHING      reduce using rule 35 (segment -> conditional .)
    UNSAFE          reduce using rule 35 (segment -> conditional .)
    CONCLUDE        reduce using rule 35 (segment -> conditional .)
    IF              reduce using rule 35 (segment -> conditional .)
    REPEAT          reduce using rule 35 (segment -> conditional .)
    RESET           reduce using rule 35 (segment -> conditional .)
    RETURN          reduce using rule 35 (segment -> conditional .)
    RANDOM          reduce using rule 35 (segment -> conditional .)
    [               reduce using rule 35 (segment -> conditional .)
    FUNCTION        reduce using rule 35 (segment -> conditional .)
    FUNCTION_START  reduce using rule 35 (segment -> conditional .)
    DO_ACTION       reduce using rule 35 (segment -> conditional .)
    DO_CALL         reduce using rule 35 (segment -> conditional .)
    DO_DIRECTIVE    reduce using rule 35 (segment -> conditional .)
    META            reduce using rule 35 (segment -> conditional .)
    LINESKIP        reduce using rule 35 (segment -> conditional .)
    ENDFUNCTION     reduce using rule 35 (segment -> conditional .)
    ENDDEF          reduce using rule 35 (segment -> conditional .)
    ENDF            reduce using rule 35 (segment -> conditional .)
    ENDWITH         reduce using rule 35 (segment -> conditional .)
    ENDIF           reduce using rule 35 (segment -> conditional .)
    ELSE            reduce using rule 35 (segment -> conditional .)
    ELIF            reduce using rule 35 (segment -> conditional .)
    ELSER           reduce using rule 35 (segment -> conditional .)
    ELSERANDOM      reduce using rule 35 (segment -> conditional .)
    ENDRANDOMWITH   reduce using rule 35 (segment -> conditional .)
    ENDRWITH        reduce using rule 35 (segment -> conditional .)
    ENDRANDOM       reduce using rule 35 (segment -> conditional .)
    ENDR            reduce using rule 35 (segment -> conditional .)


state 45

    (36) segment -> chance .
    DO_NOTHING      reduce using rule 36 (segment -> chance .)
    UNSAFE          reduce using rule 36 (segment -> chance .)
    CONCLUDE        reduce using rule 36 (segment -> chance .)
    IF              reduce using rule 36 (segment -> chance .)
    REPEAT          reduce using rule 36 (segment -> chance .)
    RESET           reduce using rule 36 (segment -> chance .)
    RETURN          reduce using rule 36 (segment -> chance .)
    RANDOM          reduce using rule 36 (segment -> chance .)
    [               reduce using rule 36 (segment -> chance .)
    FUNCTION        reduce using rule 36 (segment -> chance .)
    FUNCTION_START  reduce using rule 36 (segment -> chance .)
    DO_ACTION       reduce using rule 36 (segment -> chance .)
    DO_CALL         reduce using rule 36 (segment -> chance .)
    DO_DIRECTIVE    reduce using rule 36 (segment -> chance .)
    META            reduce using rule 36 (segment -> chance .)
    LINESKIP        reduce using rule 36 (segment -> chance .)
    ENDFUNCTION     reduce using rule 36 (segment -> chance .)
    ENDDEF          reduce using rule 36 (segment -> chance .)
    ENDF            reduce using rule 36 (segment -> chance .)
    ENDWITH         reduce using rule 36 (segment -> chance .)
    ENDIF           reduce using rule 36 (segment -> chance .)
    ELSE            reduce using rule 36 (segment -> chance .)
    ELIF            reduce using rule 36 (segment -> chance .)
    ELSER           reduce using rule 36 (segment -> chance .)
    ELSERANDOM      reduce using rule 36 (segment -> chance .)
    ENDRANDOMWITH   reduce using rule 36 (segment -> chance .)
    ENDRWITH        reduce using rule 36 (segment -> chance .)
    ENDRANDOM       reduce using rule 36 (segment -> chance .)
    ENDR            reduce using rule 36 (segment -> chance .)


state 46

    (55) uncontrolledSegment -> directiveName . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (147) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 147 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 79
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 47

    (56) uncontrolledSegment -> maybeFunctionType . actionTypeStart
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (147) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 83
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 48

    (50) conditional -> IF . uncontrolledSegment nodeBody conditionalTerminator
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (147) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 88
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 49

    (37) chance -> chanceHeader . actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (147) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 89
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 50

    (106) directiveName -> REPEAT .
    META            reduce using rule 106 (directiveName -> REPEAT .)
    LINESKIP        reduce using rule 106 (directiveName -> REPEAT .)


state 51

    (107) directiveName -> RESET .
    META            reduce using rule 107 (directiveName -> RESET .)
    LINESKIP        reduce using rule 107 (directiveName -> RESET .)


state 52

    (108) directiveName -> RETURN .
    META            reduce using rule 108 (directiveName -> RETURN .)
    LINESKIP        reduce using rule 108 (directiveName -> RETURN .)


state 53

    (59) maybeFunctionType -> functionType .
    DO_ACTION       reduce using rule 59 (maybeFunctionType -> functionType .)
    DO_CALL         reduce using rule 59 (maybeFunctionType -> functionType .)
    DO_DIRECTIVE    reduce using rule 59 (maybeFunctionType -> functionType .)
    META            reduce using rule 59 (maybeFunctionType -> functionType .)
    LINESKIP        reduce using rule 59 (maybeFunctionType -> functionType .)


state 54

    (44) chanceHeader -> RANDOM . ( id )
    (45) chanceHeader -> RANDOM . ( numeric )
    (               shift and go to state 90


state 55

    (68) functionType -> registerType .
    DO_ACTION       reduce using rule 68 (functionType -> registerType .)
    DO_CALL         reduce using rule 68 (functionType -> registerType .)
    DO_DIRECTIVE    reduce using rule 68 (functionType -> registerType .)
    META            reduce using rule 68 (functionType -> registerType .)
    LINESKIP        reduce using rule 68 (functionType -> registerType .)


state 56

    (69) functionType -> functionLiteral .
    DO_ACTION       reduce using rule 69 (functionType -> functionLiteral .)
    DO_CALL         reduce using rule 69 (functionType -> functionLiteral .)
    DO_DIRECTIVE    reduce using rule 69 (functionType -> functionLiteral .)
    META            reduce using rule 69 (functionType -> functionLiteral .)
    LINESKIP        reduce using rule 69 (functionType -> functionLiteral .)


state 57

    (70) functionType -> functionName .
    DO_ACTION       reduce using rule 70 (functionType -> functionName .)
    DO_CALL         reduce using rule 70 (functionType -> functionName .)
    DO_DIRECTIVE    reduce using rule 70 (functionType -> functionName .)
    META            reduce using rule 70 (functionType -> functionName .)
    LINESKIP        reduce using rule 70 (functionType -> functionName .)


state 58

    (112) registerType -> [ . registerContent ]
    (113) registerContent -> . regRef regComp regRef
    (114) registerContent -> . regRef regOp
    (134) regRef -> . numericSymbol
    (135) regRef -> . REG
    (136) numericSymbol -> . numeric
    (137) numericSymbol -> . id
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    (144) id -> . ID
    REG             shift and go to state 94
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 13

    registerContent                shift and go to state 91
    regRef                         shift and go to state 92
    numericSymbol                  shift and go to state 93
    numeric                        shift and go to state 95
    id                             shift and go to state 96

state 59

    (85) functionLiteral -> FUNCTION . maybeFuncLiteralParens
    (86) maybeFuncLiteralParens -> . funcParens
    (87) maybeFuncLiteralParens -> . ( )
    (88) maybeFuncLiteralParens -> . empty
    (89) funcParens -> . ( floatNumericSymbol commaPrefacedId )
    (90) funcParens -> . ( id . id commaPrefacedId )
    (147) empty -> .
    (               shift and go to state 99
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)

    maybeFuncLiteralParens         shift and go to state 97
    funcParens                     shift and go to state 98
    empty                          shift and go to state 100

state 60

    (76) functionName -> FUNCTION_START . id maybeParens maybeSubFunction
    (77) functionName -> FUNCTION_START . id parens
    (78) functionName -> FUNCTION_START . id
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 101

state 61

    (19) defHeader -> DEF id . nodeAlias nodeIndex skip
    (20) nodeAlias -> . empty
    (21) nodeAlias -> . & id nodeAlias
    (147) empty -> .
    &               shift and go to state 104
    META            reduce using rule 147 (empty -> .)
    :               reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)

    nodeAlias                      shift and go to state 102
    empty                          shift and go to state 103

state 62

    (15) assignment -> id ASSIGN numeric . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 105

state 63

    (13) registerDeclaration -> REGISTER id AS . REG skip
    REG             shift and go to state 106


state 64

    (14) registerDeclaration -> REGISTER id skip .
    REGISTER        reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    IMPORTACTIONS   reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    IMPORTLIBRARY   reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    ID              reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    DEF             reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    $end            reduce using rule 14 (registerDeclaration -> REGISTER id skip .)


state 65

    (11) actionImport -> IMPORTACTIONS ID AS . ID skip
    ID              shift and go to state 107


state 66

    (12) actionImport -> IMPORTACTIONS PATH AS . ID skip
    ID              shift and go to state 108


state 67

    (8) libraryImport -> IMPORTLIBRARY numeric AS . ID skip
    ID              shift and go to state 109


state 68

    (9) libraryImport -> IMPORTLIBRARY ID AS . ID skip
    ID              shift and go to state 110


state 69

    (10) libraryImport -> IMPORTLIBRARY PATH AS . ID skip
    ID              shift and go to state 111


state 70

    (18) node -> defHeader nodeBody nodeEnd .
    DEF             reduce using rule 18 (node -> defHeader nodeBody nodeEnd .)
    $end            reduce using rule 18 (node -> defHeader nodeBody nodeEnd .)


state 71

    (28) nodeEnd -> ENDFUNCTION . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (147) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 147 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 112
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 72

    (29) nodeEnd -> ENDDEF . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (147) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 147 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 113
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 73

    (30) nodeEnd -> ENDF . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (147) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 147 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 114
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 74

    (27) nodeBody -> segment nodeBody .
    ENDFUNCTION     reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDDEF          reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDF            reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDWITH         reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDIF           reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELSE            reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELIF            reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELSER           reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELSERANDOM      reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDRANDOMWITH   reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDRWITH        reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDRANDOM       reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDR            reduce using rule 27 (nodeBody -> segment nodeBody .)


state 75

    (31) segment -> DO_NOTHING skip .
    DO_NOTHING      reduce using rule 31 (segment -> DO_NOTHING skip .)
    UNSAFE          reduce using rule 31 (segment -> DO_NOTHING skip .)
    CONCLUDE        reduce using rule 31 (segment -> DO_NOTHING skip .)
    IF              reduce using rule 31 (segment -> DO_NOTHING skip .)
    REPEAT          reduce using rule 31 (segment -> DO_NOTHING skip .)
    RESET           reduce using rule 31 (segment -> DO_NOTHING skip .)
    RETURN          reduce using rule 31 (segment -> DO_NOTHING skip .)
    RANDOM          reduce using rule 31 (segment -> DO_NOTHING skip .)
    [               reduce using rule 31 (segment -> DO_NOTHING skip .)
    FUNCTION        reduce using rule 31 (segment -> DO_NOTHING skip .)
    FUNCTION_START  reduce using rule 31 (segment -> DO_NOTHING skip .)
    DO_ACTION       reduce using rule 31 (segment -> DO_NOTHING skip .)
    DO_CALL         reduce using rule 31 (segment -> DO_NOTHING skip .)
    DO_DIRECTIVE    reduce using rule 31 (segment -> DO_NOTHING skip .)
    META            reduce using rule 31 (segment -> DO_NOTHING skip .)
    LINESKIP        reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDFUNCTION     reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDDEF          reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDF            reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDWITH         reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDIF           reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELSE            reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELIF            reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELSER           reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELSERANDOM      reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDRANDOMWITH   reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDRWITH        reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDRANDOM       reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDR            reduce using rule 31 (segment -> DO_NOTHING skip .)


state 76

    (32) segment -> UNSAFE skip .
    DO_NOTHING      reduce using rule 32 (segment -> UNSAFE skip .)
    UNSAFE          reduce using rule 32 (segment -> UNSAFE skip .)
    CONCLUDE        reduce using rule 32 (segment -> UNSAFE skip .)
    IF              reduce using rule 32 (segment -> UNSAFE skip .)
    REPEAT          reduce using rule 32 (segment -> UNSAFE skip .)
    RESET           reduce using rule 32 (segment -> UNSAFE skip .)
    RETURN          reduce using rule 32 (segment -> UNSAFE skip .)
    RANDOM          reduce using rule 32 (segment -> UNSAFE skip .)
    [               reduce using rule 32 (segment -> UNSAFE skip .)
    FUNCTION        reduce using rule 32 (segment -> UNSAFE skip .)
    FUNCTION_START  reduce using rule 32 (segment -> UNSAFE skip .)
    DO_ACTION       reduce using rule 32 (segment -> UNSAFE skip .)
    DO_CALL         reduce using rule 32 (segment -> UNSAFE skip .)
    DO_DIRECTIVE    reduce using rule 32 (segment -> UNSAFE skip .)
    META            reduce using rule 32 (segment -> UNSAFE skip .)
    LINESKIP        reduce using rule 32 (segment -> UNSAFE skip .)
    ENDFUNCTION     reduce using rule 32 (segment -> UNSAFE skip .)
    ENDDEF          reduce using rule 32 (segment -> UNSAFE skip .)
    ENDF            reduce using rule 32 (segment -> UNSAFE skip .)
    ENDWITH         reduce using rule 32 (segment -> UNSAFE skip .)
    ENDIF           reduce using rule 32 (segment -> UNSAFE skip .)
    ELSE            reduce using rule 32 (segment -> UNSAFE skip .)
    ELIF            reduce using rule 32 (segment -> UNSAFE skip .)
    ELSER           reduce using rule 32 (segment -> UNSAFE skip .)
    ELSERANDOM      reduce using rule 32 (segment -> UNSAFE skip .)
    ENDRANDOMWITH   reduce using rule 32 (segment -> UNSAFE skip .)
    ENDRWITH        reduce using rule 32 (segment -> UNSAFE skip .)
    ENDRANDOM       reduce using rule 32 (segment -> UNSAFE skip .)
    ENDR            reduce using rule 32 (segment -> UNSAFE skip .)


state 77

    (34) segment -> CONCLUDE uncontrolledSegment .
    DO_NOTHING      reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    UNSAFE          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    CONCLUDE        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    IF              reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    REPEAT          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    RESET           reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    RETURN          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    RANDOM          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    [               reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    FUNCTION        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    FUNCTION_START  reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    DO_ACTION       reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    DO_CALL         reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    META            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    LINESKIP        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDDEF          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDF            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDWITH         reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDIF           reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELSE            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELIF            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELSER           reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELSERANDOM      reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDRANDOMWITH   reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDRWITH        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDRANDOM       reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDR            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)


state 78

    (58) maybeFunctionType -> empty .
    DO_ACTION       reduce using rule 58 (maybeFunctionType -> empty .)
    DO_CALL         reduce using rule 58 (maybeFunctionType -> empty .)
    DO_DIRECTIVE    reduce using rule 58 (maybeFunctionType -> empty .)
    META            reduce using rule 58 (maybeFunctionType -> empty .)
    LINESKIP        reduce using rule 58 (maybeFunctionType -> empty .)


state 79

    (55) uncontrolledSegment -> directiveName maybeMetaType . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 115

state 80

    (66) maybeMetaType -> empty .
    LINESKIP        reduce using rule 66 (maybeMetaType -> empty .)


state 81

    (67) maybeMetaType -> metaType .
    LINESKIP        reduce using rule 67 (maybeMetaType -> metaType .)


state 82

    (75) metaType -> META . metaparams
    (109) metaparams -> . metaparamPair , metaparams
    (110) metaparams -> . metaparamPair
    (111) metaparamPair -> . id : numericSymbol
    (144) id -> . ID
    ID              shift and go to state 13

    metaparams                     shift and go to state 116
    metaparamPair                  shift and go to state 117
    id                             shift and go to state 118

state 83

    (56) uncontrolledSegment -> maybeFunctionType actionTypeStart .
    DO_NOTHING      reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    UNSAFE          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    CONCLUDE        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    IF              reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    REPEAT          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RESET           reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RETURN          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RANDOM          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    [               reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    FUNCTION        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    FUNCTION_START  reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_ACTION       reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_CALL         reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_DIRECTIVE    reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    META            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    LINESKIP        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDFUNCTION     reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDDEF          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDF            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDWITH         reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDIF           reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSE            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELIF            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSER           reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSERANDOM      reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDRANDOMWITH   reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDRWITH        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDRANDOM       reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDR            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)


state 84

    (57) actionTypeStart -> maybeActionType . maybeCallType maybeDirectiveType maybeMetaType skip
    (62) maybeCallType -> . empty
    (63) maybeCallType -> . callType
    (147) empty -> .
    (73) callType -> . DO_CALL callName
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_CALL         shift and go to state 122

    maybeCallType                  shift and go to state 119
    empty                          shift and go to state 120
    callType                       shift and go to state 121

state 85

    (60) maybeActionType -> empty .
    DO_CALL         reduce using rule 60 (maybeActionType -> empty .)
    DO_DIRECTIVE    reduce using rule 60 (maybeActionType -> empty .)
    META            reduce using rule 60 (maybeActionType -> empty .)
    LINESKIP        reduce using rule 60 (maybeActionType -> empty .)


state 86

    (61) maybeActionType -> actionType .
    DO_CALL         reduce using rule 61 (maybeActionType -> actionType .)
    DO_DIRECTIVE    reduce using rule 61 (maybeActionType -> actionType .)
    META            reduce using rule 61 (maybeActionType -> actionType .)
    LINESKIP        reduce using rule 61 (maybeActionType -> actionType .)


state 87

    (71) actionType -> DO_ACTION . actionLiteral actionParens
    (72) actionType -> DO_ACTION . actionName actionParens
    (101) actionLiteral -> . ACTION
    (99) actionName -> . id
    (100) actionName -> . id . id
    (144) id -> . ID
    ACTION          shift and go to state 125
    ID              shift and go to state 13

    actionLiteral                  shift and go to state 123
    actionName                     shift and go to state 124
    id                             shift and go to state 126

state 88

    (50) conditional -> IF uncontrolledSegment . nodeBody conditionalTerminator
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 147 (empty -> .)
    ENDIF           reduce using rule 147 (empty -> .)
    ELSE            reduce using rule 147 (empty -> .)
    ELIF            reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 42
    nodeBody                       shift and go to state 127
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 89

    (37) chance -> chanceHeader actionTypeStart . nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ELSER           reduce using rule 147 (empty -> .)
    ELSERANDOM      reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    chanceHeader                   shift and go to state 49
    nodeBody                       shift and go to state 128
    uncontrolledSegment            shift and go to state 42
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 90

    (44) chanceHeader -> RANDOM ( . id )
    (45) chanceHeader -> RANDOM ( . numeric )
    (144) id -> . ID
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    id                             shift and go to state 129
    numeric                        shift and go to state 130

state 91

    (112) registerType -> [ registerContent . ]
    ]               shift and go to state 131


state 92

    (113) registerContent -> regRef . regComp regRef
    (114) registerContent -> regRef . regOp
    (120) regComp -> . ELAPLT
    (121) regComp -> . ELAPGT
    (122) regComp -> . MOD
    (123) regComp -> . DIV
    (124) regComp -> . MUL
    (125) regComp -> . SUB
    (126) regComp -> . ADD
    (127) regComp -> . SET
    (128) regComp -> . NEQ
    (129) regComp -> . GT
    (130) regComp -> . GEQ
    (131) regComp -> . LT
    (132) regComp -> . LEQ
    (133) regComp -> . EQ
    (115) regOp -> . ELAPSED
    (116) regOp -> . TIME
    (117) regOp -> . DECREMENT
    (118) regOp -> . CLEAR
    (119) regOp -> . INCREMENT
    ELAPLT          shift and go to state 134
    ELAPGT          shift and go to state 135
    MOD             shift and go to state 136
    DIV             shift and go to state 137
    MUL             shift and go to state 138
    SUB             shift and go to state 139
    ADD             shift and go to state 140
    SET             shift and go to state 141
    NEQ             shift and go to state 142
    GT              shift and go to state 143
    GEQ             shift and go to state 144
    LT              shift and go to state 145
    LEQ             shift and go to state 146
    EQ              shift and go to state 147
    ELAPSED         shift and go to state 148
    TIME            shift and go to state 149
    DECREMENT       shift and go to state 150
    CLEAR           shift and go to state 151
    INCREMENT       shift and go to state 152

    regComp                        shift and go to state 132
    regOp                          shift and go to state 133

state 93

    (134) regRef -> numericSymbol .
    ELAPLT          reduce using rule 134 (regRef -> numericSymbol .)
    ELAPGT          reduce using rule 134 (regRef -> numericSymbol .)
    MOD             reduce using rule 134 (regRef -> numericSymbol .)
    DIV             reduce using rule 134 (regRef -> numericSymbol .)
    MUL             reduce using rule 134 (regRef -> numericSymbol .)
    SUB             reduce using rule 134 (regRef -> numericSymbol .)
    ADD             reduce using rule 134 (regRef -> numericSymbol .)
    SET             reduce using rule 134 (regRef -> numericSymbol .)
    NEQ             reduce using rule 134 (regRef -> numericSymbol .)
    GT              reduce using rule 134 (regRef -> numericSymbol .)
    GEQ             reduce using rule 134 (regRef -> numericSymbol .)
    LT              reduce using rule 134 (regRef -> numericSymbol .)
    LEQ             reduce using rule 134 (regRef -> numericSymbol .)
    EQ              reduce using rule 134 (regRef -> numericSymbol .)
    ELAPSED         reduce using rule 134 (regRef -> numericSymbol .)
    TIME            reduce using rule 134 (regRef -> numericSymbol .)
    DECREMENT       reduce using rule 134 (regRef -> numericSymbol .)
    CLEAR           reduce using rule 134 (regRef -> numericSymbol .)
    INCREMENT       reduce using rule 134 (regRef -> numericSymbol .)
    ]               reduce using rule 134 (regRef -> numericSymbol .)


state 94

    (135) regRef -> REG .
    ELAPLT          reduce using rule 135 (regRef -> REG .)
    ELAPGT          reduce using rule 135 (regRef -> REG .)
    MOD             reduce using rule 135 (regRef -> REG .)
    DIV             reduce using rule 135 (regRef -> REG .)
    MUL             reduce using rule 135 (regRef -> REG .)
    SUB             reduce using rule 135 (regRef -> REG .)
    ADD             reduce using rule 135 (regRef -> REG .)
    SET             reduce using rule 135 (regRef -> REG .)
    NEQ             reduce using rule 135 (regRef -> REG .)
    GT              reduce using rule 135 (regRef -> REG .)
    GEQ             reduce using rule 135 (regRef -> REG .)
    LT              reduce using rule 135 (regRef -> REG .)
    LEQ             reduce using rule 135 (regRef -> REG .)
    EQ              reduce using rule 135 (regRef -> REG .)
    ELAPSED         reduce using rule 135 (regRef -> REG .)
    TIME            reduce using rule 135 (regRef -> REG .)
    DECREMENT       reduce using rule 135 (regRef -> REG .)
    CLEAR           reduce using rule 135 (regRef -> REG .)
    INCREMENT       reduce using rule 135 (regRef -> REG .)
    ]               reduce using rule 135 (regRef -> REG .)


state 95

    (136) numericSymbol -> numeric .
    ELAPLT          reduce using rule 136 (numericSymbol -> numeric .)
    ELAPGT          reduce using rule 136 (numericSymbol -> numeric .)
    MOD             reduce using rule 136 (numericSymbol -> numeric .)
    DIV             reduce using rule 136 (numericSymbol -> numeric .)
    MUL             reduce using rule 136 (numericSymbol -> numeric .)
    SUB             reduce using rule 136 (numericSymbol -> numeric .)
    ADD             reduce using rule 136 (numericSymbol -> numeric .)
    SET             reduce using rule 136 (numericSymbol -> numeric .)
    NEQ             reduce using rule 136 (numericSymbol -> numeric .)
    GT              reduce using rule 136 (numericSymbol -> numeric .)
    GEQ             reduce using rule 136 (numericSymbol -> numeric .)
    LT              reduce using rule 136 (numericSymbol -> numeric .)
    LEQ             reduce using rule 136 (numericSymbol -> numeric .)
    EQ              reduce using rule 136 (numericSymbol -> numeric .)
    ELAPSED         reduce using rule 136 (numericSymbol -> numeric .)
    TIME            reduce using rule 136 (numericSymbol -> numeric .)
    DECREMENT       reduce using rule 136 (numericSymbol -> numeric .)
    CLEAR           reduce using rule 136 (numericSymbol -> numeric .)
    INCREMENT       reduce using rule 136 (numericSymbol -> numeric .)
    ]               reduce using rule 136 (numericSymbol -> numeric .)
    ,               reduce using rule 136 (numericSymbol -> numeric .)
    LINESKIP        reduce using rule 136 (numericSymbol -> numeric .)


state 96

    (137) numericSymbol -> id .
    ELAPLT          reduce using rule 137 (numericSymbol -> id .)
    ELAPGT          reduce using rule 137 (numericSymbol -> id .)
    MOD             reduce using rule 137 (numericSymbol -> id .)
    DIV             reduce using rule 137 (numericSymbol -> id .)
    MUL             reduce using rule 137 (numericSymbol -> id .)
    SUB             reduce using rule 137 (numericSymbol -> id .)
    ADD             reduce using rule 137 (numericSymbol -> id .)
    SET             reduce using rule 137 (numericSymbol -> id .)
    NEQ             reduce using rule 137 (numericSymbol -> id .)
    GT              reduce using rule 137 (numericSymbol -> id .)
    GEQ             reduce using rule 137 (numericSymbol -> id .)
    LT              reduce using rule 137 (numericSymbol -> id .)
    LEQ             reduce using rule 137 (numericSymbol -> id .)
    EQ              reduce using rule 137 (numericSymbol -> id .)
    ELAPSED         reduce using rule 137 (numericSymbol -> id .)
    TIME            reduce using rule 137 (numericSymbol -> id .)
    DECREMENT       reduce using rule 137 (numericSymbol -> id .)
    CLEAR           reduce using rule 137 (numericSymbol -> id .)
    INCREMENT       reduce using rule 137 (numericSymbol -> id .)
    ]               reduce using rule 137 (numericSymbol -> id .)
    ,               reduce using rule 137 (numericSymbol -> id .)
    LINESKIP        reduce using rule 137 (numericSymbol -> id .)


state 97

    (85) functionLiteral -> FUNCTION maybeFuncLiteralParens .
    DO_ACTION       reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    DO_CALL         reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    DO_DIRECTIVE    reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    META            reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    LINESKIP        reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)


state 98

    (86) maybeFuncLiteralParens -> funcParens .
    DO_ACTION       reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    DO_CALL         reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    DO_DIRECTIVE    reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    META            reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    LINESKIP        reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)


state 99

    (87) maybeFuncLiteralParens -> ( . )
    (89) funcParens -> ( . floatNumericSymbol commaPrefacedId )
    (90) funcParens -> ( . id . id commaPrefacedId )
    (138) floatNumericSymbol -> . float
    (139) floatNumericSymbol -> . numeric
    (140) floatNumericSymbol -> . id
    (144) id -> . ID
    (141) float -> . FLOAT
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    )               shift and go to state 153
    ID              shift and go to state 13
    FLOAT           shift and go to state 158
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    floatNumericSymbol             shift and go to state 154
    id                             shift and go to state 155
    float                          shift and go to state 156
    numeric                        shift and go to state 157

state 100

    (88) maybeFuncLiteralParens -> empty .
    DO_ACTION       reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    DO_CALL         reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    DO_DIRECTIVE    reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    META            reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    LINESKIP        reduce using rule 88 (maybeFuncLiteralParens -> empty .)


state 101

    (76) functionName -> FUNCTION_START id . maybeParens maybeSubFunction
    (77) functionName -> FUNCTION_START id . parens
    (78) functionName -> FUNCTION_START id .
    (81) maybeParens -> . empty
    (82) maybeParens -> . parens
    (83) parens -> . funcParens
    (84) parens -> . ( )
    (147) empty -> .
    (89) funcParens -> . ( floatNumericSymbol commaPrefacedId )
    (90) funcParens -> . ( id . id commaPrefacedId )
    DO_ACTION       reduce using rule 78 (functionName -> FUNCTION_START id .)
    DO_CALL         reduce using rule 78 (functionName -> FUNCTION_START id .)
    DO_DIRECTIVE    reduce using rule 78 (functionName -> FUNCTION_START id .)
    META            reduce using rule 78 (functionName -> FUNCTION_START id .)
    LINESKIP        reduce using rule 78 (functionName -> FUNCTION_START id .)
    (               shift and go to state 163
    .               reduce using rule 147 (empty -> .)

    maybeParens                    shift and go to state 159
    parens                         shift and go to state 160
    empty                          shift and go to state 161
    funcParens                     shift and go to state 162

state 102

    (19) defHeader -> DEF id nodeAlias . nodeIndex skip
    (22) nodeIndex -> . empty
    (23) nodeIndex -> . META numeric
    (24) nodeIndex -> . : numeric META numeric
    (25) nodeIndex -> . : numeric
    (147) empty -> .
    META            shift and go to state 166
    :               shift and go to state 167
    LINESKIP        reduce using rule 147 (empty -> .)

    nodeIndex                      shift and go to state 164
    empty                          shift and go to state 165

state 103

    (20) nodeAlias -> empty .
    META            reduce using rule 20 (nodeAlias -> empty .)
    :               reduce using rule 20 (nodeAlias -> empty .)
    LINESKIP        reduce using rule 20 (nodeAlias -> empty .)


state 104

    (21) nodeAlias -> & . id nodeAlias
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 168

state 105

    (15) assignment -> id ASSIGN numeric skip .
    REGISTER        reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    IMPORTACTIONS   reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    IMPORTLIBRARY   reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    ID              reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    DEF             reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    $end            reduce using rule 15 (assignment -> id ASSIGN numeric skip .)


state 106

    (13) registerDeclaration -> REGISTER id AS REG . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 169

state 107

    (11) actionImport -> IMPORTACTIONS ID AS ID . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 170

state 108

    (12) actionImport -> IMPORTACTIONS PATH AS ID . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 171

state 109

    (8) libraryImport -> IMPORTLIBRARY numeric AS ID . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 172

state 110

    (9) libraryImport -> IMPORTLIBRARY ID AS ID . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 173

state 111

    (10) libraryImport -> IMPORTLIBRARY PATH AS ID . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 174

state 112

    (28) nodeEnd -> ENDFUNCTION maybeMetaType . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 175

state 113

    (29) nodeEnd -> ENDDEF maybeMetaType . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 176

state 114

    (30) nodeEnd -> ENDF maybeMetaType . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 177

state 115

    (55) uncontrolledSegment -> directiveName maybeMetaType skip .
    DO_NOTHING      reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    UNSAFE          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    CONCLUDE        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    IF              reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    REPEAT          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RESET           reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RETURN          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RANDOM          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    [               reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    FUNCTION        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    FUNCTION_START  reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_ACTION       reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_CALL         reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_DIRECTIVE    reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    META            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    LINESKIP        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDFUNCTION     reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDDEF          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDF            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDWITH         reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDIF           reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSE            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELIF            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSER           reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSERANDOM      reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDRANDOMWITH   reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDRWITH        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDRANDOM       reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDR            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)


state 116

    (75) metaType -> META metaparams .
    LINESKIP        reduce using rule 75 (metaType -> META metaparams .)


state 117

    (109) metaparams -> metaparamPair . , metaparams
    (110) metaparams -> metaparamPair .
    ,               shift and go to state 178
    LINESKIP        reduce using rule 110 (metaparams -> metaparamPair .)


state 118

    (111) metaparamPair -> id . : numericSymbol
    :               shift and go to state 179


state 119

    (57) actionTypeStart -> maybeActionType maybeCallType . maybeDirectiveType maybeMetaType skip
    (64) maybeDirectiveType -> . empty
    (65) maybeDirectiveType -> . directiveType
    (147) empty -> .
    (74) directiveType -> . DO_DIRECTIVE directiveName
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    shift and go to state 183

    maybeDirectiveType             shift and go to state 180
    empty                          shift and go to state 181
    directiveType                  shift and go to state 182

state 120

    (62) maybeCallType -> empty .
    DO_DIRECTIVE    reduce using rule 62 (maybeCallType -> empty .)
    META            reduce using rule 62 (maybeCallType -> empty .)
    LINESKIP        reduce using rule 62 (maybeCallType -> empty .)


state 121

    (63) maybeCallType -> callType .
    DO_DIRECTIVE    reduce using rule 63 (maybeCallType -> callType .)
    META            reduce using rule 63 (maybeCallType -> callType .)
    LINESKIP        reduce using rule 63 (maybeCallType -> callType .)


state 122

    (73) callType -> DO_CALL . callName
    (102) callName -> . CALL
    (103) callName -> . id
    (104) callName -> . id . CALL
    (105) callName -> . id . id
    (144) id -> . ID
    CALL            shift and go to state 185
    ID              shift and go to state 13

    callName                       shift and go to state 184
    id                             shift and go to state 186

state 123

    (71) actionType -> DO_ACTION actionLiteral . actionParens
    (94) actionParens -> . ( maybeActionParams )
    (               shift and go to state 188

    actionParens                   shift and go to state 187

state 124

    (72) actionType -> DO_ACTION actionName . actionParens
    (94) actionParens -> . ( maybeActionParams )
    (               shift and go to state 188

    actionParens                   shift and go to state 189

state 125

    (101) actionLiteral -> ACTION .
    (               reduce using rule 101 (actionLiteral -> ACTION .)


state 126

    (99) actionName -> id .
    (100) actionName -> id . . id
    (               reduce using rule 99 (actionName -> id .)
    .               shift and go to state 190


state 127

    (50) conditional -> IF uncontrolledSegment nodeBody . conditionalTerminator
    (51) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (52) conditionalTerminator -> . ENDIF skip
    (53) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (54) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 192
    ENDIF           shift and go to state 193
    ELSE            shift and go to state 194
    ELIF            shift and go to state 195

    conditionalTerminator          shift and go to state 191

state 128

    (37) chance -> chanceHeader actionTypeStart nodeBody . chanceBody uncontrolledSegment nodeBody optionalChance
    (46) chanceBody -> . elsechance ( id )
    (47) chanceBody -> . elsechance ( numeric )
    (48) elsechance -> . ELSER
    (49) elsechance -> . ELSERANDOM
    ELSER           shift and go to state 198
    ELSERANDOM      shift and go to state 199

    chanceBody                     shift and go to state 196
    elsechance                     shift and go to state 197

state 129

    (44) chanceHeader -> RANDOM ( id . )
    )               shift and go to state 200


state 130

    (45) chanceHeader -> RANDOM ( numeric . )
    )               shift and go to state 201


state 131

    (112) registerType -> [ registerContent ] .
    DO_ACTION       reduce using rule 112 (registerType -> [ registerContent ] .)
    DO_CALL         reduce using rule 112 (registerType -> [ registerContent ] .)
    DO_DIRECTIVE    reduce using rule 112 (registerType -> [ registerContent ] .)
    META            reduce using rule 112 (registerType -> [ registerContent ] .)
    LINESKIP        reduce using rule 112 (registerType -> [ registerContent ] .)


state 132

    (113) registerContent -> regRef regComp . regRef
    (134) regRef -> . numericSymbol
    (135) regRef -> . REG
    (136) numericSymbol -> . numeric
    (137) numericSymbol -> . id
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    (144) id -> . ID
    REG             shift and go to state 94
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 13

    regRef                         shift and go to state 202
    numericSymbol                  shift and go to state 93
    numeric                        shift and go to state 95
    id                             shift and go to state 96

state 133

    (114) registerContent -> regRef regOp .
    ]               reduce using rule 114 (registerContent -> regRef regOp .)


state 134

    (120) regComp -> ELAPLT .
    REG             reduce using rule 120 (regComp -> ELAPLT .)
    HEXNUMBER       reduce using rule 120 (regComp -> ELAPLT .)
    NUMBER          reduce using rule 120 (regComp -> ELAPLT .)
    ID              reduce using rule 120 (regComp -> ELAPLT .)


state 135

    (121) regComp -> ELAPGT .
    REG             reduce using rule 121 (regComp -> ELAPGT .)
    HEXNUMBER       reduce using rule 121 (regComp -> ELAPGT .)
    NUMBER          reduce using rule 121 (regComp -> ELAPGT .)
    ID              reduce using rule 121 (regComp -> ELAPGT .)


state 136

    (122) regComp -> MOD .
    REG             reduce using rule 122 (regComp -> MOD .)
    HEXNUMBER       reduce using rule 122 (regComp -> MOD .)
    NUMBER          reduce using rule 122 (regComp -> MOD .)
    ID              reduce using rule 122 (regComp -> MOD .)


state 137

    (123) regComp -> DIV .
    REG             reduce using rule 123 (regComp -> DIV .)
    HEXNUMBER       reduce using rule 123 (regComp -> DIV .)
    NUMBER          reduce using rule 123 (regComp -> DIV .)
    ID              reduce using rule 123 (regComp -> DIV .)


state 138

    (124) regComp -> MUL .
    REG             reduce using rule 124 (regComp -> MUL .)
    HEXNUMBER       reduce using rule 124 (regComp -> MUL .)
    NUMBER          reduce using rule 124 (regComp -> MUL .)
    ID              reduce using rule 124 (regComp -> MUL .)


state 139

    (125) regComp -> SUB .
    REG             reduce using rule 125 (regComp -> SUB .)
    HEXNUMBER       reduce using rule 125 (regComp -> SUB .)
    NUMBER          reduce using rule 125 (regComp -> SUB .)
    ID              reduce using rule 125 (regComp -> SUB .)


state 140

    (126) regComp -> ADD .
    REG             reduce using rule 126 (regComp -> ADD .)
    HEXNUMBER       reduce using rule 126 (regComp -> ADD .)
    NUMBER          reduce using rule 126 (regComp -> ADD .)
    ID              reduce using rule 126 (regComp -> ADD .)


state 141

    (127) regComp -> SET .
    REG             reduce using rule 127 (regComp -> SET .)
    HEXNUMBER       reduce using rule 127 (regComp -> SET .)
    NUMBER          reduce using rule 127 (regComp -> SET .)
    ID              reduce using rule 127 (regComp -> SET .)


state 142

    (128) regComp -> NEQ .
    REG             reduce using rule 128 (regComp -> NEQ .)
    HEXNUMBER       reduce using rule 128 (regComp -> NEQ .)
    NUMBER          reduce using rule 128 (regComp -> NEQ .)
    ID              reduce using rule 128 (regComp -> NEQ .)


state 143

    (129) regComp -> GT .
    REG             reduce using rule 129 (regComp -> GT .)
    HEXNUMBER       reduce using rule 129 (regComp -> GT .)
    NUMBER          reduce using rule 129 (regComp -> GT .)
    ID              reduce using rule 129 (regComp -> GT .)


state 144

    (130) regComp -> GEQ .
    REG             reduce using rule 130 (regComp -> GEQ .)
    HEXNUMBER       reduce using rule 130 (regComp -> GEQ .)
    NUMBER          reduce using rule 130 (regComp -> GEQ .)
    ID              reduce using rule 130 (regComp -> GEQ .)


state 145

    (131) regComp -> LT .
    REG             reduce using rule 131 (regComp -> LT .)
    HEXNUMBER       reduce using rule 131 (regComp -> LT .)
    NUMBER          reduce using rule 131 (regComp -> LT .)
    ID              reduce using rule 131 (regComp -> LT .)


state 146

    (132) regComp -> LEQ .
    REG             reduce using rule 132 (regComp -> LEQ .)
    HEXNUMBER       reduce using rule 132 (regComp -> LEQ .)
    NUMBER          reduce using rule 132 (regComp -> LEQ .)
    ID              reduce using rule 132 (regComp -> LEQ .)


state 147

    (133) regComp -> EQ .
    REG             reduce using rule 133 (regComp -> EQ .)
    HEXNUMBER       reduce using rule 133 (regComp -> EQ .)
    NUMBER          reduce using rule 133 (regComp -> EQ .)
    ID              reduce using rule 133 (regComp -> EQ .)


state 148

    (115) regOp -> ELAPSED .
    ]               reduce using rule 115 (regOp -> ELAPSED .)


state 149

    (116) regOp -> TIME .
    ]               reduce using rule 116 (regOp -> TIME .)


state 150

    (117) regOp -> DECREMENT .
    ]               reduce using rule 117 (regOp -> DECREMENT .)


state 151

    (118) regOp -> CLEAR .
    ]               reduce using rule 118 (regOp -> CLEAR .)


state 152

    (119) regOp -> INCREMENT .
    ]               reduce using rule 119 (regOp -> INCREMENT .)


state 153

    (87) maybeFuncLiteralParens -> ( ) .
    DO_ACTION       reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    DO_CALL         reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    DO_DIRECTIVE    reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    META            reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    LINESKIP        reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)


state 154

    (89) funcParens -> ( floatNumericSymbol . commaPrefacedId )
    (91) commaPrefacedId -> . , floatNumericSymbol commaPrefacedId
    (92) commaPrefacedId -> . , id . id commaPrefacedId
    (93) commaPrefacedId -> . empty
    (147) empty -> .
    ,               shift and go to state 204
    )               reduce using rule 147 (empty -> .)

    commaPrefacedId                shift and go to state 203
    empty                          shift and go to state 205

state 155

    (90) funcParens -> ( id . . id commaPrefacedId )
    (140) floatNumericSymbol -> id .
    .               shift and go to state 206
    ,               reduce using rule 140 (floatNumericSymbol -> id .)
    )               reduce using rule 140 (floatNumericSymbol -> id .)


state 156

    (138) floatNumericSymbol -> float .
    ,               reduce using rule 138 (floatNumericSymbol -> float .)
    )               reduce using rule 138 (floatNumericSymbol -> float .)


state 157

    (139) floatNumericSymbol -> numeric .
    ,               reduce using rule 139 (floatNumericSymbol -> numeric .)
    )               reduce using rule 139 (floatNumericSymbol -> numeric .)


state 158

    (141) float -> FLOAT .
    ,               reduce using rule 141 (float -> FLOAT .)
    )               reduce using rule 141 (float -> FLOAT .)


state 159

    (76) functionName -> FUNCTION_START id maybeParens . maybeSubFunction
    (79) maybeSubFunction -> . . id parens maybeSubFunction
    (80) maybeSubFunction -> . . id maybeParens
    .               shift and go to state 208

    maybeSubFunction               shift and go to state 207

state 160

    (77) functionName -> FUNCTION_START id parens .
    (82) maybeParens -> parens .
    DO_ACTION       reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    DO_CALL         reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    DO_DIRECTIVE    reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    META            reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    LINESKIP        reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    .               reduce using rule 82 (maybeParens -> parens .)


state 161

    (81) maybeParens -> empty .
    .               reduce using rule 81 (maybeParens -> empty .)
    DO_ACTION       reduce using rule 81 (maybeParens -> empty .)
    DO_CALL         reduce using rule 81 (maybeParens -> empty .)
    DO_DIRECTIVE    reduce using rule 81 (maybeParens -> empty .)
    META            reduce using rule 81 (maybeParens -> empty .)
    LINESKIP        reduce using rule 81 (maybeParens -> empty .)


state 162

    (83) parens -> funcParens .
    DO_ACTION       reduce using rule 83 (parens -> funcParens .)
    DO_CALL         reduce using rule 83 (parens -> funcParens .)
    DO_DIRECTIVE    reduce using rule 83 (parens -> funcParens .)
    META            reduce using rule 83 (parens -> funcParens .)
    LINESKIP        reduce using rule 83 (parens -> funcParens .)
    .               reduce using rule 83 (parens -> funcParens .)


state 163

    (84) parens -> ( . )
    (89) funcParens -> ( . floatNumericSymbol commaPrefacedId )
    (90) funcParens -> ( . id . id commaPrefacedId )
    (138) floatNumericSymbol -> . float
    (139) floatNumericSymbol -> . numeric
    (140) floatNumericSymbol -> . id
    (144) id -> . ID
    (141) float -> . FLOAT
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    )               shift and go to state 209
    ID              shift and go to state 13
    FLOAT           shift and go to state 158
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    floatNumericSymbol             shift and go to state 154
    id                             shift and go to state 155
    float                          shift and go to state 156
    numeric                        shift and go to state 157

state 164

    (19) defHeader -> DEF id nodeAlias nodeIndex . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 210

state 165

    (22) nodeIndex -> empty .
    LINESKIP        reduce using rule 22 (nodeIndex -> empty .)


state 166

    (23) nodeIndex -> META . numeric
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 211

state 167

    (24) nodeIndex -> : . numeric META numeric
    (25) nodeIndex -> : . numeric
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 212

state 168

    (21) nodeAlias -> & id . nodeAlias
    (20) nodeAlias -> . empty
    (21) nodeAlias -> . & id nodeAlias
    (147) empty -> .
    &               shift and go to state 104
    META            reduce using rule 147 (empty -> .)
    :               reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)

    nodeAlias                      shift and go to state 213
    empty                          shift and go to state 103

state 169

    (13) registerDeclaration -> REGISTER id AS REG skip .
    REGISTER        reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    IMPORTACTIONS   reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    IMPORTLIBRARY   reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    ID              reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    DEF             reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    $end            reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)


state 170

    (11) actionImport -> IMPORTACTIONS ID AS ID skip .
    REGISTER        reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    IMPORTACTIONS   reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    IMPORTLIBRARY   reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    ID              reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    DEF             reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    $end            reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)


state 171

    (12) actionImport -> IMPORTACTIONS PATH AS ID skip .
    REGISTER        reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    IMPORTACTIONS   reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    IMPORTLIBRARY   reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    ID              reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    DEF             reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    $end            reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)


state 172

    (8) libraryImport -> IMPORTLIBRARY numeric AS ID skip .
    REGISTER        reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    IMPORTACTIONS   reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    IMPORTLIBRARY   reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    ID              reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    DEF             reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    $end            reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)


state 173

    (9) libraryImport -> IMPORTLIBRARY ID AS ID skip .
    REGISTER        reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    IMPORTACTIONS   reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    IMPORTLIBRARY   reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    ID              reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    DEF             reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    $end            reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)


state 174

    (10) libraryImport -> IMPORTLIBRARY PATH AS ID skip .
    REGISTER        reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    IMPORTACTIONS   reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    IMPORTLIBRARY   reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    ID              reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    DEF             reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    $end            reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)


state 175

    (28) nodeEnd -> ENDFUNCTION maybeMetaType skip .
    DEF             reduce using rule 28 (nodeEnd -> ENDFUNCTION maybeMetaType skip .)
    $end            reduce using rule 28 (nodeEnd -> ENDFUNCTION maybeMetaType skip .)


state 176

    (29) nodeEnd -> ENDDEF maybeMetaType skip .
    DEF             reduce using rule 29 (nodeEnd -> ENDDEF maybeMetaType skip .)
    $end            reduce using rule 29 (nodeEnd -> ENDDEF maybeMetaType skip .)


state 177

    (30) nodeEnd -> ENDF maybeMetaType skip .
    DEF             reduce using rule 30 (nodeEnd -> ENDF maybeMetaType skip .)
    $end            reduce using rule 30 (nodeEnd -> ENDF maybeMetaType skip .)


state 178

    (109) metaparams -> metaparamPair , . metaparams
    (109) metaparams -> . metaparamPair , metaparams
    (110) metaparams -> . metaparamPair
    (111) metaparamPair -> . id : numericSymbol
    (144) id -> . ID
    ID              shift and go to state 13

    metaparamPair                  shift and go to state 117
    metaparams                     shift and go to state 214
    id                             shift and go to state 118

state 179

    (111) metaparamPair -> id : . numericSymbol
    (136) numericSymbol -> . numeric
    (137) numericSymbol -> . id
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    (144) id -> . ID
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 13

    id                             shift and go to state 96
    numericSymbol                  shift and go to state 215
    numeric                        shift and go to state 95

state 180

    (57) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (147) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 147 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 216
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 181

    (64) maybeDirectiveType -> empty .
    META            reduce using rule 64 (maybeDirectiveType -> empty .)
    LINESKIP        reduce using rule 64 (maybeDirectiveType -> empty .)


state 182

    (65) maybeDirectiveType -> directiveType .
    META            reduce using rule 65 (maybeDirectiveType -> directiveType .)
    LINESKIP        reduce using rule 65 (maybeDirectiveType -> directiveType .)


state 183

    (74) directiveType -> DO_DIRECTIVE . directiveName
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52

    directiveName                  shift and go to state 217

state 184

    (73) callType -> DO_CALL callName .
    DO_DIRECTIVE    reduce using rule 73 (callType -> DO_CALL callName .)
    META            reduce using rule 73 (callType -> DO_CALL callName .)
    LINESKIP        reduce using rule 73 (callType -> DO_CALL callName .)


state 185

    (102) callName -> CALL .
    DO_DIRECTIVE    reduce using rule 102 (callName -> CALL .)
    META            reduce using rule 102 (callName -> CALL .)
    LINESKIP        reduce using rule 102 (callName -> CALL .)


state 186

    (103) callName -> id .
    (104) callName -> id . . CALL
    (105) callName -> id . . id
    DO_DIRECTIVE    reduce using rule 103 (callName -> id .)
    META            reduce using rule 103 (callName -> id .)
    LINESKIP        reduce using rule 103 (callName -> id .)
    .               shift and go to state 218


state 187

    (71) actionType -> DO_ACTION actionLiteral actionParens .
    DO_CALL         reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)
    DO_DIRECTIVE    reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)
    META            reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)
    LINESKIP        reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)


state 188

    (94) actionParens -> ( . maybeActionParams )
    (95) maybeActionParams -> . numeric maybeMoreActionParams
    (96) maybeActionParams -> . empty
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    (147) empty -> .
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    )               reduce using rule 147 (empty -> .)

    maybeActionParams              shift and go to state 219
    numeric                        shift and go to state 220
    empty                          shift and go to state 221

state 189

    (72) actionType -> DO_ACTION actionName actionParens .
    DO_CALL         reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)
    DO_DIRECTIVE    reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)
    META            reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)
    LINESKIP        reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)


state 190

    (100) actionName -> id . . id
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 222

state 191

    (50) conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    IF              reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RESET           reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RETURN          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RANDOM          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    [               reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    META            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDF            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSE            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELIF            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSER           reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSERANDOM      reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDRANDOMWITH   reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDRWITH        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDRANDOM       reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDR            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)


state 192

    (51) conditionalTerminator -> ENDWITH . uncontrolledSegment
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (147) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 223
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 193

    (52) conditionalTerminator -> ENDIF . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 224

state 194

    (53) conditionalTerminator -> ELSE . actionTypeStart nodeBody conditionalTerminator
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (147) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 225
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 195

    (54) conditionalTerminator -> ELIF . functionType actionTypeStart nodeBody conditionalTerminator
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    functionType                   shift and go to state 226
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 196

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody . uncontrolledSegment nodeBody optionalChance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (147) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 227
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 197

    (46) chanceBody -> elsechance . ( id )
    (47) chanceBody -> elsechance . ( numeric )
    (               shift and go to state 228


state 198

    (48) elsechance -> ELSER .
    (               reduce using rule 48 (elsechance -> ELSER .)


state 199

    (49) elsechance -> ELSERANDOM .
    (               reduce using rule 49 (elsechance -> ELSERANDOM .)


state 200

    (44) chanceHeader -> RANDOM ( id ) .
    DO_ACTION       reduce using rule 44 (chanceHeader -> RANDOM ( id ) .)
    DO_CALL         reduce using rule 44 (chanceHeader -> RANDOM ( id ) .)
    DO_DIRECTIVE    reduce using rule 44 (chanceHeader -> RANDOM ( id ) .)
    META            reduce using rule 44 (chanceHeader -> RANDOM ( id ) .)
    LINESKIP        reduce using rule 44 (chanceHeader -> RANDOM ( id ) .)


state 201

    (45) chanceHeader -> RANDOM ( numeric ) .
    DO_ACTION       reduce using rule 45 (chanceHeader -> RANDOM ( numeric ) .)
    DO_CALL         reduce using rule 45 (chanceHeader -> RANDOM ( numeric ) .)
    DO_DIRECTIVE    reduce using rule 45 (chanceHeader -> RANDOM ( numeric ) .)
    META            reduce using rule 45 (chanceHeader -> RANDOM ( numeric ) .)
    LINESKIP        reduce using rule 45 (chanceHeader -> RANDOM ( numeric ) .)


state 202

    (113) registerContent -> regRef regComp regRef .
    ]               reduce using rule 113 (registerContent -> regRef regComp regRef .)


state 203

    (89) funcParens -> ( floatNumericSymbol commaPrefacedId . )
    )               shift and go to state 229


state 204

    (91) commaPrefacedId -> , . floatNumericSymbol commaPrefacedId
    (92) commaPrefacedId -> , . id . id commaPrefacedId
    (138) floatNumericSymbol -> . float
    (139) floatNumericSymbol -> . numeric
    (140) floatNumericSymbol -> . id
    (144) id -> . ID
    (141) float -> . FLOAT
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    ID              shift and go to state 13
    FLOAT           shift and go to state 158
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    floatNumericSymbol             shift and go to state 230
    id                             shift and go to state 231
    float                          shift and go to state 156
    numeric                        shift and go to state 157

state 205

    (93) commaPrefacedId -> empty .
    )               reduce using rule 93 (commaPrefacedId -> empty .)


state 206

    (90) funcParens -> ( id . . id commaPrefacedId )
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 232

state 207

    (76) functionName -> FUNCTION_START id maybeParens maybeSubFunction .
    DO_ACTION       reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    DO_CALL         reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    DO_DIRECTIVE    reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    META            reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    LINESKIP        reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)


state 208

    (79) maybeSubFunction -> . . id parens maybeSubFunction
    (80) maybeSubFunction -> . . id maybeParens
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 233

state 209

    (84) parens -> ( ) .
    DO_ACTION       reduce using rule 84 (parens -> ( ) .)
    DO_CALL         reduce using rule 84 (parens -> ( ) .)
    DO_DIRECTIVE    reduce using rule 84 (parens -> ( ) .)
    META            reduce using rule 84 (parens -> ( ) .)
    LINESKIP        reduce using rule 84 (parens -> ( ) .)
    .               reduce using rule 84 (parens -> ( ) .)


state 210

    (19) defHeader -> DEF id nodeAlias nodeIndex skip .
    DO_NOTHING      reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    UNSAFE          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    CONCLUDE        reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    IF              reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    REPEAT          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RESET           reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RETURN          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RANDOM          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    [               reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    FUNCTION        reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    FUNCTION_START  reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDFUNCTION     reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDDEF          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDF            reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_ACTION       reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_CALL         reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_DIRECTIVE    reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    META            reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    LINESKIP        reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)


state 211

    (23) nodeIndex -> META numeric .
    LINESKIP        reduce using rule 23 (nodeIndex -> META numeric .)


state 212

    (24) nodeIndex -> : numeric . META numeric
    (25) nodeIndex -> : numeric .
    META            shift and go to state 234
    LINESKIP        reduce using rule 25 (nodeIndex -> : numeric .)


state 213

    (21) nodeAlias -> & id nodeAlias .
    META            reduce using rule 21 (nodeAlias -> & id nodeAlias .)
    :               reduce using rule 21 (nodeAlias -> & id nodeAlias .)
    LINESKIP        reduce using rule 21 (nodeAlias -> & id nodeAlias .)


state 214

    (109) metaparams -> metaparamPair , metaparams .
    LINESKIP        reduce using rule 109 (metaparams -> metaparamPair , metaparams .)


state 215

    (111) metaparamPair -> id : numericSymbol .
    ,               reduce using rule 111 (metaparamPair -> id : numericSymbol .)
    LINESKIP        reduce using rule 111 (metaparamPair -> id : numericSymbol .)


state 216

    (57) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 235

state 217

    (74) directiveType -> DO_DIRECTIVE directiveName .
    META            reduce using rule 74 (directiveType -> DO_DIRECTIVE directiveName .)
    LINESKIP        reduce using rule 74 (directiveType -> DO_DIRECTIVE directiveName .)


state 218

    (104) callName -> id . . CALL
    (105) callName -> id . . id
    (144) id -> . ID
    CALL            shift and go to state 237
    ID              shift and go to state 13

    id                             shift and go to state 236

state 219

    (94) actionParens -> ( maybeActionParams . )
    )               shift and go to state 238


state 220

    (95) maybeActionParams -> numeric . maybeMoreActionParams
    (97) maybeMoreActionParams -> . , numeric maybeMoreActionParams
    (98) maybeMoreActionParams -> . empty
    (147) empty -> .
    ,               shift and go to state 240
    )               reduce using rule 147 (empty -> .)

    maybeMoreActionParams          shift and go to state 239
    empty                          shift and go to state 241

state 221

    (96) maybeActionParams -> empty .
    )               reduce using rule 96 (maybeActionParams -> empty .)


state 222

    (100) actionName -> id . id .
    (               reduce using rule 100 (actionName -> id . id .)


state 223

    (51) conditionalTerminator -> ENDWITH uncontrolledSegment .
    DO_NOTHING      reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    UNSAFE          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    CONCLUDE        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    IF              reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    REPEAT          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RESET           reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RETURN          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RANDOM          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    [               reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    FUNCTION        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    FUNCTION_START  reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_ACTION       reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_CALL         reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    META            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    LINESKIP        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDDEF          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDF            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDWITH         reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDIF           reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSE            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELIF            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSER           reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSERANDOM      reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDRANDOMWITH   reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDRWITH        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDRANDOM       reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDR            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)


state 224

    (52) conditionalTerminator -> ENDIF skip .
    DO_NOTHING      reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    UNSAFE          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    CONCLUDE        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    IF              reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    REPEAT          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    RESET           reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    RETURN          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    RANDOM          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    [               reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    FUNCTION        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    FUNCTION_START  reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    DO_ACTION       reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    DO_CALL         reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    DO_DIRECTIVE    reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    META            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    LINESKIP        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDFUNCTION     reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDDEF          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDF            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDWITH         reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDIF           reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELSE            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELIF            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELSER           reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELSERANDOM      reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDRANDOMWITH   reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDRWITH        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDRANDOM       reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDR            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)


state 225

    (53) conditionalTerminator -> ELSE actionTypeStart . nodeBody conditionalTerminator
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 147 (empty -> .)
    ENDIF           reduce using rule 147 (empty -> .)
    ELSE            reduce using rule 147 (empty -> .)
    ELIF            reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    nodeBody                       shift and go to state 242
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 226

    (54) conditionalTerminator -> ELIF functionType . actionTypeStart nodeBody conditionalTerminator
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (147) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 243
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 227

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment . nodeBody optionalChance
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDRANDOMWITH   reduce using rule 147 (empty -> .)
    ENDRWITH        reduce using rule 147 (empty -> .)
    ENDRANDOM       reduce using rule 147 (empty -> .)
    ENDR            reduce using rule 147 (empty -> .)
    ELSER           reduce using rule 147 (empty -> .)
    ELSERANDOM      reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    chanceHeader                   shift and go to state 49
    nodeBody                       shift and go to state 244
    uncontrolledSegment            shift and go to state 42
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 228

    (46) chanceBody -> elsechance ( . id )
    (47) chanceBody -> elsechance ( . numeric )
    (144) id -> . ID
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    id                             shift and go to state 245
    numeric                        shift and go to state 246

state 229

    (89) funcParens -> ( floatNumericSymbol commaPrefacedId ) .
    DO_ACTION       reduce using rule 89 (funcParens -> ( floatNumericSymbol commaPrefacedId ) .)
    DO_CALL         reduce using rule 89 (funcParens -> ( floatNumericSymbol commaPrefacedId ) .)
    DO_DIRECTIVE    reduce using rule 89 (funcParens -> ( floatNumericSymbol commaPrefacedId ) .)
    META            reduce using rule 89 (funcParens -> ( floatNumericSymbol commaPrefacedId ) .)
    LINESKIP        reduce using rule 89 (funcParens -> ( floatNumericSymbol commaPrefacedId ) .)
    .               reduce using rule 89 (funcParens -> ( floatNumericSymbol commaPrefacedId ) .)


state 230

    (91) commaPrefacedId -> , floatNumericSymbol . commaPrefacedId
    (91) commaPrefacedId -> . , floatNumericSymbol commaPrefacedId
    (92) commaPrefacedId -> . , id . id commaPrefacedId
    (93) commaPrefacedId -> . empty
    (147) empty -> .
    ,               shift and go to state 204
    )               reduce using rule 147 (empty -> .)

    commaPrefacedId                shift and go to state 247
    empty                          shift and go to state 205

state 231

    (92) commaPrefacedId -> , id . . id commaPrefacedId
    (140) floatNumericSymbol -> id .
    .               shift and go to state 248
    ,               reduce using rule 140 (floatNumericSymbol -> id .)
    )               reduce using rule 140 (floatNumericSymbol -> id .)


state 232

    (90) funcParens -> ( id . id . commaPrefacedId )
    (91) commaPrefacedId -> . , floatNumericSymbol commaPrefacedId
    (92) commaPrefacedId -> . , id . id commaPrefacedId
    (93) commaPrefacedId -> . empty
    (147) empty -> .
    ,               shift and go to state 204
    )               reduce using rule 147 (empty -> .)

    commaPrefacedId                shift and go to state 249
    empty                          shift and go to state 205

state 233

    (79) maybeSubFunction -> . id . parens maybeSubFunction
    (80) maybeSubFunction -> . id . maybeParens
    (83) parens -> . funcParens
    (84) parens -> . ( )
    (81) maybeParens -> . empty
    (82) maybeParens -> . parens
    (89) funcParens -> . ( floatNumericSymbol commaPrefacedId )
    (90) funcParens -> . ( id . id commaPrefacedId )
    (147) empty -> .
    (               shift and go to state 163
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)

    parens                         shift and go to state 250
    maybeParens                    shift and go to state 251
    funcParens                     shift and go to state 162
    empty                          shift and go to state 161

state 234

    (24) nodeIndex -> : numeric META . numeric
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 252

state 235

    (57) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .
    DO_NOTHING      reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    UNSAFE          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    CONCLUDE        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    IF              reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    REPEAT          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RESET           reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RETURN          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RANDOM          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    [               reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    FUNCTION        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    FUNCTION_START  reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_ACTION       reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_CALL         reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_DIRECTIVE    reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    META            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    LINESKIP        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDFUNCTION     reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDDEF          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDF            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDWITH         reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDIF           reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSE            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELIF            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSER           reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSERANDOM      reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDRANDOMWITH   reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDRWITH        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDRANDOM       reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDR            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)


state 236

    (105) callName -> id . id .
    DO_DIRECTIVE    reduce using rule 105 (callName -> id . id .)
    META            reduce using rule 105 (callName -> id . id .)
    LINESKIP        reduce using rule 105 (callName -> id . id .)


state 237

    (104) callName -> id . CALL .
    DO_DIRECTIVE    reduce using rule 104 (callName -> id . CALL .)
    META            reduce using rule 104 (callName -> id . CALL .)
    LINESKIP        reduce using rule 104 (callName -> id . CALL .)


state 238

    (94) actionParens -> ( maybeActionParams ) .
    DO_CALL         reduce using rule 94 (actionParens -> ( maybeActionParams ) .)
    DO_DIRECTIVE    reduce using rule 94 (actionParens -> ( maybeActionParams ) .)
    META            reduce using rule 94 (actionParens -> ( maybeActionParams ) .)
    LINESKIP        reduce using rule 94 (actionParens -> ( maybeActionParams ) .)


state 239

    (95) maybeActionParams -> numeric maybeMoreActionParams .
    )               reduce using rule 95 (maybeActionParams -> numeric maybeMoreActionParams .)


state 240

    (97) maybeMoreActionParams -> , . numeric maybeMoreActionParams
    (142) numeric -> . HEXNUMBER
    (143) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 253

state 241

    (98) maybeMoreActionParams -> empty .
    )               reduce using rule 98 (maybeMoreActionParams -> empty .)


state 242

    (53) conditionalTerminator -> ELSE actionTypeStart nodeBody . conditionalTerminator
    (51) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (52) conditionalTerminator -> . ENDIF skip
    (53) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (54) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 192
    ENDIF           shift and go to state 193
    ELSE            shift and go to state 194
    ELIF            shift and go to state 195

    conditionalTerminator          shift and go to state 254

state 243

    (54) conditionalTerminator -> ELIF functionType actionTypeStart . nodeBody conditionalTerminator
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 147 (empty -> .)
    ENDIF           reduce using rule 147 (empty -> .)
    ELSE            reduce using rule 147 (empty -> .)
    ELIF            reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    functionType                   shift and go to state 53
    nodeBody                       shift and go to state 255
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 244

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody . optionalChance
    (38) optionalChance -> . optionalTerminator
    (39) optionalChance -> . chanceBody actionTypeStart nodeBody optionalChance
    (40) optionalTerminator -> . ENDRANDOMWITH uncontrolledSegment
    (41) optionalTerminator -> . ENDRWITH uncontrolledSegment
    (42) optionalTerminator -> . ENDRANDOM skip
    (43) optionalTerminator -> . ENDR skip
    (46) chanceBody -> . elsechance ( id )
    (47) chanceBody -> . elsechance ( numeric )
    (48) elsechance -> . ELSER
    (49) elsechance -> . ELSERANDOM
    ENDRANDOMWITH   shift and go to state 259
    ENDRWITH        shift and go to state 260
    ENDRANDOM       shift and go to state 261
    ENDR            shift and go to state 262
    ELSER           shift and go to state 198
    ELSERANDOM      shift and go to state 199

    chanceBody                     shift and go to state 256
    optionalChance                 shift and go to state 257
    optionalTerminator             shift and go to state 258
    elsechance                     shift and go to state 197

state 245

    (46) chanceBody -> elsechance ( id . )
    )               shift and go to state 263


state 246

    (47) chanceBody -> elsechance ( numeric . )
    )               shift and go to state 264


state 247

    (91) commaPrefacedId -> , floatNumericSymbol commaPrefacedId .
    )               reduce using rule 91 (commaPrefacedId -> , floatNumericSymbol commaPrefacedId .)


state 248

    (92) commaPrefacedId -> , id . . id commaPrefacedId
    (144) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 265

state 249

    (90) funcParens -> ( id . id commaPrefacedId . )
    )               shift and go to state 266


state 250

    (79) maybeSubFunction -> . id parens . maybeSubFunction
    (82) maybeParens -> parens .
    (79) maybeSubFunction -> . . id parens maybeSubFunction
    (80) maybeSubFunction -> . . id maybeParens
    DO_ACTION       reduce using rule 82 (maybeParens -> parens .)
    DO_CALL         reduce using rule 82 (maybeParens -> parens .)
    DO_DIRECTIVE    reduce using rule 82 (maybeParens -> parens .)
    META            reduce using rule 82 (maybeParens -> parens .)
    LINESKIP        reduce using rule 82 (maybeParens -> parens .)
    .               shift and go to state 208

    maybeSubFunction               shift and go to state 267

state 251

    (80) maybeSubFunction -> . id maybeParens .
    DO_ACTION       reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    DO_CALL         reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    DO_DIRECTIVE    reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    META            reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    LINESKIP        reduce using rule 80 (maybeSubFunction -> . id maybeParens .)


state 252

    (24) nodeIndex -> : numeric META numeric .
    LINESKIP        reduce using rule 24 (nodeIndex -> : numeric META numeric .)


state 253

    (97) maybeMoreActionParams -> , numeric . maybeMoreActionParams
    (97) maybeMoreActionParams -> . , numeric maybeMoreActionParams
    (98) maybeMoreActionParams -> . empty
    (147) empty -> .
    ,               shift and go to state 240
    )               reduce using rule 147 (empty -> .)

    maybeMoreActionParams          shift and go to state 268
    empty                          shift and go to state 241

state 254

    (53) conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    IF              reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RESET           reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RETURN          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RANDOM          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    [               reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    META            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDF            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSE            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELIF            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSER           reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSERANDOM      reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDRANDOMWITH   reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDRWITH        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDRANDOM       reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDR            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)


state 255

    (54) conditionalTerminator -> ELIF functionType actionTypeStart nodeBody . conditionalTerminator
    (51) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (52) conditionalTerminator -> . ENDIF skip
    (53) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (54) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 192
    ENDIF           shift and go to state 193
    ELSE            shift and go to state 194
    ELIF            shift and go to state 195

    conditionalTerminator          shift and go to state 269

state 256

    (39) optionalChance -> chanceBody . actionTypeStart nodeBody optionalChance
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (147) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 270
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 257

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .
    DO_NOTHING      reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    UNSAFE          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    CONCLUDE        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    IF              reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    REPEAT          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RESET           reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RETURN          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RANDOM          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    [               reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    FUNCTION        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    FUNCTION_START  reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_ACTION       reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_CALL         reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_DIRECTIVE    reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    META            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    LINESKIP        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDFUNCTION     reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDDEF          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDF            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDWITH         reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDIF           reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSE            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELIF            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSER           reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSERANDOM      reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDRANDOMWITH   reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDRWITH        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDRANDOM       reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDR            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)


state 258

    (38) optionalChance -> optionalTerminator .
    DO_NOTHING      reduce using rule 38 (optionalChance -> optionalTerminator .)
    UNSAFE          reduce using rule 38 (optionalChance -> optionalTerminator .)
    CONCLUDE        reduce using rule 38 (optionalChance -> optionalTerminator .)
    IF              reduce using rule 38 (optionalChance -> optionalTerminator .)
    REPEAT          reduce using rule 38 (optionalChance -> optionalTerminator .)
    RESET           reduce using rule 38 (optionalChance -> optionalTerminator .)
    RETURN          reduce using rule 38 (optionalChance -> optionalTerminator .)
    RANDOM          reduce using rule 38 (optionalChance -> optionalTerminator .)
    [               reduce using rule 38 (optionalChance -> optionalTerminator .)
    FUNCTION        reduce using rule 38 (optionalChance -> optionalTerminator .)
    FUNCTION_START  reduce using rule 38 (optionalChance -> optionalTerminator .)
    DO_ACTION       reduce using rule 38 (optionalChance -> optionalTerminator .)
    DO_CALL         reduce using rule 38 (optionalChance -> optionalTerminator .)
    DO_DIRECTIVE    reduce using rule 38 (optionalChance -> optionalTerminator .)
    META            reduce using rule 38 (optionalChance -> optionalTerminator .)
    LINESKIP        reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDFUNCTION     reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDDEF          reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDF            reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDWITH         reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDIF           reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELSE            reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELIF            reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELSER           reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELSERANDOM      reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDRANDOMWITH   reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDRWITH        reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDRANDOM       reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDR            reduce using rule 38 (optionalChance -> optionalTerminator .)


state 259

    (40) optionalTerminator -> ENDRANDOMWITH . uncontrolledSegment
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (147) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 271
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 260

    (41) optionalTerminator -> ENDRWITH . uncontrolledSegment
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (147) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 272
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 261

    (42) optionalTerminator -> ENDRANDOM . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 273

state 262

    (43) optionalTerminator -> ENDR . skip
    (145) skip -> . LINESKIP skip
    (146) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 274

state 263

    (46) chanceBody -> elsechance ( id ) .
    REPEAT          reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    RESET           reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    RETURN          reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    [               reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    FUNCTION        reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    FUNCTION_START  reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    DO_ACTION       reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    DO_CALL         reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    DO_DIRECTIVE    reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    META            reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    LINESKIP        reduce using rule 46 (chanceBody -> elsechance ( id ) .)


state 264

    (47) chanceBody -> elsechance ( numeric ) .
    REPEAT          reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    RESET           reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    RETURN          reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    [               reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    FUNCTION        reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    FUNCTION_START  reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    DO_ACTION       reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    DO_CALL         reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    DO_DIRECTIVE    reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    META            reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    LINESKIP        reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)


state 265

    (92) commaPrefacedId -> , id . id . commaPrefacedId
    (91) commaPrefacedId -> . , floatNumericSymbol commaPrefacedId
    (92) commaPrefacedId -> . , id . id commaPrefacedId
    (93) commaPrefacedId -> . empty
    (147) empty -> .
    ,               shift and go to state 204
    )               reduce using rule 147 (empty -> .)

    commaPrefacedId                shift and go to state 275
    empty                          shift and go to state 205

state 266

    (90) funcParens -> ( id . id commaPrefacedId ) .
    DO_ACTION       reduce using rule 90 (funcParens -> ( id . id commaPrefacedId ) .)
    DO_CALL         reduce using rule 90 (funcParens -> ( id . id commaPrefacedId ) .)
    DO_DIRECTIVE    reduce using rule 90 (funcParens -> ( id . id commaPrefacedId ) .)
    META            reduce using rule 90 (funcParens -> ( id . id commaPrefacedId ) .)
    LINESKIP        reduce using rule 90 (funcParens -> ( id . id commaPrefacedId ) .)
    .               reduce using rule 90 (funcParens -> ( id . id commaPrefacedId ) .)


state 267

    (79) maybeSubFunction -> . id parens maybeSubFunction .
    DO_ACTION       reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    DO_CALL         reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    DO_DIRECTIVE    reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    META            reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    LINESKIP        reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)


state 268

    (97) maybeMoreActionParams -> , numeric maybeMoreActionParams .
    )               reduce using rule 97 (maybeMoreActionParams -> , numeric maybeMoreActionParams .)


state 269

    (54) conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    IF              reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RESET           reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RETURN          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RANDOM          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    [               reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    META            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDF            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSE            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELIF            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSER           reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSERANDOM      reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDRANDOMWITH   reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDRWITH        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDRANDOM       reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDR            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)


state 270

    (39) optionalChance -> chanceBody actionTypeStart . nodeBody optionalChance
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (147) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (106) directiveName -> . REPEAT
    (107) directiveName -> . RESET
    (108) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . RANDOM ( id )
    (45) chanceHeader -> . RANDOM ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (112) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDRANDOMWITH   reduce using rule 147 (empty -> .)
    ENDRWITH        reduce using rule 147 (empty -> .)
    ENDRANDOM       reduce using rule 147 (empty -> .)
    ENDR            reduce using rule 147 (empty -> .)
    ELSER           reduce using rule 147 (empty -> .)
    ELSERANDOM      reduce using rule 147 (empty -> .)
    DO_ACTION       reduce using rule 147 (empty -> .)
    DO_CALL         reduce using rule 147 (empty -> .)
    DO_DIRECTIVE    reduce using rule 147 (empty -> .)
    META            reduce using rule 147 (empty -> .)
    LINESKIP        reduce using rule 147 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    RANDOM          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    nodeBody                       shift and go to state 276
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 271

    (40) optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .
    DO_NOTHING      reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    UNSAFE          reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    CONCLUDE        reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    IF              reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    REPEAT          reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    RESET           reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    RETURN          reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    RANDOM          reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    [               reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    FUNCTION        reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    FUNCTION_START  reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    DO_ACTION       reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    DO_CALL         reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    META            reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    LINESKIP        reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDDEF          reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDF            reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDWITH         reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDIF           reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ELSE            reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ELIF            reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ELSER           reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ELSERANDOM      reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDRANDOMWITH   reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDRWITH        reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDRANDOM       reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)
    ENDR            reduce using rule 40 (optionalTerminator -> ENDRANDOMWITH uncontrolledSegment .)


state 272

    (41) optionalTerminator -> ENDRWITH uncontrolledSegment .
    DO_NOTHING      reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    UNSAFE          reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    CONCLUDE        reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    IF              reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    REPEAT          reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    RESET           reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    RETURN          reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    RANDOM          reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    [               reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    FUNCTION        reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    FUNCTION_START  reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    DO_ACTION       reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    DO_CALL         reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    META            reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    LINESKIP        reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDDEF          reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDF            reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDWITH         reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDIF           reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ELSE            reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ELIF            reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ELSER           reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ELSERANDOM      reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDRANDOMWITH   reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDRWITH        reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDRANDOM       reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)
    ENDR            reduce using rule 41 (optionalTerminator -> ENDRWITH uncontrolledSegment .)


state 273

    (42) optionalTerminator -> ENDRANDOM skip .
    DO_NOTHING      reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    UNSAFE          reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    CONCLUDE        reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    IF              reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    REPEAT          reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    RESET           reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    RETURN          reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    RANDOM          reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    [               reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    FUNCTION        reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    FUNCTION_START  reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    DO_ACTION       reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    DO_CALL         reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    DO_DIRECTIVE    reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    META            reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    LINESKIP        reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDFUNCTION     reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDDEF          reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDF            reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDWITH         reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDIF           reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ELSE            reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ELIF            reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ELSER           reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ELSERANDOM      reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDRANDOMWITH   reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDRWITH        reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDRANDOM       reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)
    ENDR            reduce using rule 42 (optionalTerminator -> ENDRANDOM skip .)


state 274

    (43) optionalTerminator -> ENDR skip .
    DO_NOTHING      reduce using rule 43 (optionalTerminator -> ENDR skip .)
    UNSAFE          reduce using rule 43 (optionalTerminator -> ENDR skip .)
    CONCLUDE        reduce using rule 43 (optionalTerminator -> ENDR skip .)
    IF              reduce using rule 43 (optionalTerminator -> ENDR skip .)
    REPEAT          reduce using rule 43 (optionalTerminator -> ENDR skip .)
    RESET           reduce using rule 43 (optionalTerminator -> ENDR skip .)
    RETURN          reduce using rule 43 (optionalTerminator -> ENDR skip .)
    RANDOM          reduce using rule 43 (optionalTerminator -> ENDR skip .)
    [               reduce using rule 43 (optionalTerminator -> ENDR skip .)
    FUNCTION        reduce using rule 43 (optionalTerminator -> ENDR skip .)
    FUNCTION_START  reduce using rule 43 (optionalTerminator -> ENDR skip .)
    DO_ACTION       reduce using rule 43 (optionalTerminator -> ENDR skip .)
    DO_CALL         reduce using rule 43 (optionalTerminator -> ENDR skip .)
    DO_DIRECTIVE    reduce using rule 43 (optionalTerminator -> ENDR skip .)
    META            reduce using rule 43 (optionalTerminator -> ENDR skip .)
    LINESKIP        reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDFUNCTION     reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDDEF          reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDF            reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDWITH         reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDIF           reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ELSE            reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ELIF            reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ELSER           reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ELSERANDOM      reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDRANDOMWITH   reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDRWITH        reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDRANDOM       reduce using rule 43 (optionalTerminator -> ENDR skip .)
    ENDR            reduce using rule 43 (optionalTerminator -> ENDR skip .)


state 275

    (92) commaPrefacedId -> , id . id commaPrefacedId .
    )               reduce using rule 92 (commaPrefacedId -> , id . id commaPrefacedId .)


state 276

    (39) optionalChance -> chanceBody actionTypeStart nodeBody . optionalChance
    (38) optionalChance -> . optionalTerminator
    (39) optionalChance -> . chanceBody actionTypeStart nodeBody optionalChance
    (40) optionalTerminator -> . ENDRANDOMWITH uncontrolledSegment
    (41) optionalTerminator -> . ENDRWITH uncontrolledSegment
    (42) optionalTerminator -> . ENDRANDOM skip
    (43) optionalTerminator -> . ENDR skip
    (46) chanceBody -> . elsechance ( id )
    (47) chanceBody -> . elsechance ( numeric )
    (48) elsechance -> . ELSER
    (49) elsechance -> . ELSERANDOM
    ENDRANDOMWITH   shift and go to state 259
    ENDRWITH        shift and go to state 260
    ENDRANDOM       shift and go to state 261
    ENDR            shift and go to state 262
    ELSER           shift and go to state 198
    ELSERANDOM      shift and go to state 199

    chanceBody                     shift and go to state 256
    optionalChance                 shift and go to state 277
    optionalTerminator             shift and go to state 258
    elsechance                     shift and go to state 197

state 277

    (39) optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .
    DO_NOTHING      reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    UNSAFE          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    CONCLUDE        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    IF              reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    REPEAT          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RESET           reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RETURN          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RANDOM          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    [               reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    FUNCTION        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    FUNCTION_START  reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_ACTION       reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_CALL         reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_DIRECTIVE    reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    META            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    LINESKIP        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDFUNCTION     reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDDEF          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDF            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDWITH         reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDIF           reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSE            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELIF            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSER           reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSERANDOM      reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDRANDOMWITH   reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDRWITH        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDRANDOM       reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDR            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)


Conflicts:

shift/reduce conflict for LINESKIP in state 4 resolved as shift