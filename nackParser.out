Grammar:

Rule 0     S' -> nackFile
Rule 1     nackFile -> nackHeader nackBody
Rule 2     nackHeader -> registerDeclaration nackHeader
Rule 3     nackHeader -> actionImport nackHeader
Rule 4     nackHeader -> libraryImport nackHeader
Rule 5     nackHeader -> empty
Rule 6     libraryImport -> IMPORTLIBRARY numeric AS ID skip
Rule 7     libraryImport -> IMPORTLIBRARY ID AS ID skip
Rule 8     libraryImport -> IMPORTLIBRARY PATH AS ID skip
Rule 9     actionImport -> IMPORTACTIONS ID AS ID skip
Rule 10    actionImport -> IMPORTACTIONS PATH AS ID skip
Rule 11    registerDeclaration -> REGISTER id AS REG skip
Rule 12    registerDeclaration -> REGISTER id skip
Rule 13    nackBody -> empty
Rule 14    nackBody -> node nackBody
Rule 15    node -> defHeader nodeBody nodeEnd
Rule 16    defHeader -> DEF id nodeAlias nodeIndex skip
Rule 17    nodeAlias -> empty
Rule 18    nodeAlias -> & id nodeAlias
Rule 19    nodeIndex -> empty
Rule 20    nodeIndex -> META numeric
Rule 21    nodeIndex -> : numeric META numeric
Rule 22    nodeIndex -> : numeric
Rule 23    nodeBody -> empty
Rule 24    nodeBody -> segment nodeBody
Rule 25    nodeEnd -> ENDFUNCTION maybeMetaType skip
Rule 26    nodeEnd -> ENDDEF maybeMetaType skip
Rule 27    nodeEnd -> ENDF maybeMetaType skip
Rule 28    segment -> DO_NOTHING skip
Rule 29    segment -> UNSAFE skip
Rule 30    segment -> uncontrolledSegment
Rule 31    segment -> CONCLUDE uncontrolledSegment
Rule 32    segment -> conditional
Rule 33    segment -> chance
Rule 34    chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
Rule 35    optionalChance -> optionalTerminator
Rule 36    optionalChance -> chanceBody actionTypeStart nodeBody optionalChance
Rule 37    optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip
Rule 38    optionalTerminator -> ENDCWITH uncontrolledSegment skip
Rule 39    optionalTerminator -> ENDCHANCE skip
Rule 40    optionalTerminator -> ENDC skip
Rule 41    chanceHeader -> CHANCE ( id )
Rule 42    chanceHeader -> CHANCE ( numeric )
Rule 43    chanceBody -> elsechance ( id )
Rule 44    chanceBody -> elsechance ( numeric )
Rule 45    elsechance -> ELSEC
Rule 46    elsechance -> ELSECHANCE
Rule 47    conditional -> IF uncontrolledSegment nodeBody conditionalTerminator
Rule 48    conditionalTerminator -> ENDWITH uncontrolledSegment
Rule 49    conditionalTerminator -> ENDIF skip
Rule 50    conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator
Rule 51    conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator
Rule 52    uncontrolledSegment -> directiveName maybeMetaType skip
Rule 53    uncontrolledSegment -> maybeFunctionType actionTypeStart
Rule 54    actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
Rule 55    maybeFunctionType -> empty
Rule 56    maybeFunctionType -> functionType
Rule 57    maybeActionType -> empty
Rule 58    maybeActionType -> actionType
Rule 59    maybeCallType -> empty
Rule 60    maybeCallType -> callType
Rule 61    maybeDirectiveType -> empty
Rule 62    maybeDirectiveType -> directiveType
Rule 63    maybeMetaType -> empty
Rule 64    maybeMetaType -> metaType
Rule 65    functionType -> registerType
Rule 66    functionType -> functionLiteral
Rule 67    functionType -> functionName
Rule 68    actionType -> DO_ACTION actionLiteral actionParens
Rule 69    actionType -> DO_ACTION actionName actionParens
Rule 70    callType -> DO_CALL callName
Rule 71    directiveType -> DO_DIRECTIVE directiveName
Rule 72    metaType -> META metaparams
Rule 73    functionName -> FUNCTION_START id maybeParens maybeSubFunction
Rule 74    functionName -> FUNCTION_START id parens
Rule 75    functionName -> FUNCTION_START id
Rule 76    maybeSubFunction -> . id parens maybeSubFunction
Rule 77    maybeSubFunction -> . id maybeParens
Rule 78    maybeParens -> empty
Rule 79    maybeParens -> parens
Rule 80    parens -> funcParens
Rule 81    parens -> ( )
Rule 82    functionLiteral -> FUNCTION maybeFuncParens
Rule 83    maybeFuncParens -> funcParens
Rule 84    maybeFuncParens -> empty
Rule 85    maybeDotID -> . id maybeDotID
Rule 86    maybeDotID -> empty
Rule 87    funcParens -> ( numericSymbol commaPrefacedId )
Rule 88    funcParens -> ( id . id maybeDotID )
Rule 89    commaPrefacedId -> , numericSymbol commaPrefacedId
Rule 90    commaPrefacedId -> empty
Rule 91    actionParens -> ( maybeActionParams )
Rule 92    maybeActionParams -> numeric maybeMoreActionParams
Rule 93    maybeActionParams -> empty
Rule 94    maybeMoreActionParams -> , numeric maybeMoreActionParams
Rule 95    maybeMoreActionParams -> empty
Rule 96    actionName -> id
Rule 97    actionName -> id . id
Rule 98    actionLiteral -> ACTION
Rule 99    callName -> CALL
Rule 100   callName -> id
Rule 101   callName -> id . CALL
Rule 102   callName -> id . id
Rule 103   directiveName -> REPEAT
Rule 104   directiveName -> RESET
Rule 105   directiveName -> RETURN
Rule 106   metaparams -> metaparamPair , metaparams
Rule 107   metaparams -> metaparamPair
Rule 108   metaparamPair -> id : numericSymbol
Rule 109   registerType -> [ registerContent ]
Rule 110   registerContent -> regRef regComp regVal
Rule 111   registerContent -> regRef regOp
Rule 112   regOp -> RESET
Rule 113   regOp -> INCREMENT
Rule 114   regComp -> NEQ
Rule 115   regComp -> GT
Rule 116   regComp -> GEQ
Rule 117   regComp -> LT
Rule 118   regComp -> LEQ
Rule 119   regComp -> EQ
Rule 120   regRef -> REG
Rule 121   regRef -> id
Rule 122   regVal -> numericSymbol
Rule 123   numericSymbol -> numeric
Rule 124   numericSymbol -> id
Rule 125   numeric -> HEXNUMBER
Rule 126   numeric -> NUMBER
Rule 127   id -> ID
Rule 128   skip -> LINESKIP skip
Rule 129   skip -> LINESKIP
Rule 130   empty -> <empty>

Unused terminals:

    COMMENTS
    LINECONTINUE

Terminals, with rules where they appear:

&                    : 18
(                    : 41 42 43 44 81 87 88 91
)                    : 41 42 43 44 81 87 88 91
,                    : 89 94 106
.                    : 76 77 85 88 97 101 102
:                    : 21 22 108
ACTION               : 98
AS                   : 6 7 8 9 10 11
CALL                 : 99 101
CHANCE               : 41 42
COMMENTS             : 
CONCLUDE             : 31
DEF                  : 16
DO_ACTION            : 68 69
DO_CALL              : 70
DO_DIRECTIVE         : 71
DO_NOTHING           : 28
ELIF                 : 51
ELSE                 : 50
ELSEC                : 45
ELSECHANCE           : 46
ENDC                 : 40
ENDCHANCE            : 39
ENDCHANCEWITH        : 37
ENDCWITH             : 38
ENDDEF               : 26
ENDF                 : 27
ENDFUNCTION          : 25
ENDIF                : 49
ENDWITH              : 48
EQ                   : 119
FUNCTION             : 82
FUNCTION_START       : 73 74 75
GEQ                  : 116
GT                   : 115
HEXNUMBER            : 125
ID                   : 6 7 7 8 9 9 10 127
IF                   : 47
IMPORTACTIONS        : 9 10
IMPORTLIBRARY        : 6 7 8
INCREMENT            : 113
LEQ                  : 118
LINECONTINUE         : 
LINESKIP             : 128 129
LT                   : 117
META                 : 20 21 72
NEQ                  : 114
NUMBER               : 126
PATH                 : 8 10
REG                  : 11 120
REGISTER             : 11 12
REPEAT               : 103
RESET                : 104 112
RETURN               : 105
UNSAFE               : 29
[                    : 109
]                    : 109
error                : 

Nonterminals, with rules where they appear:

actionImport         : 3
actionLiteral        : 68
actionName           : 69
actionParens         : 68 69
actionType           : 58
actionTypeStart      : 34 36 50 51 53
callName             : 70
callType             : 60
chance               : 33
chanceBody           : 34 36
chanceHeader         : 34
commaPrefacedId      : 87 89
conditional          : 32
conditionalTerminator : 47 50 51
defHeader            : 15
directiveName        : 52 71
directiveType        : 62
elsechance           : 43 44
empty                : 5 13 17 19 23 55 57 59 61 63 78 84 86 90 93 95
funcParens           : 80 83
functionLiteral      : 66
functionName         : 67
functionType         : 51 56
id                   : 11 12 16 18 41 43 73 74 75 76 77 85 88 88 96 97 97 100 101 102 102 108 121 124
libraryImport        : 4
maybeActionParams    : 91
maybeActionType      : 54
maybeCallType        : 54
maybeDirectiveType   : 54
maybeDotID           : 85 88
maybeFuncParens      : 82
maybeFunctionType    : 53
maybeMetaType        : 25 26 27 52 54
maybeMoreActionParams : 92 94
maybeParens          : 73 77
maybeSubFunction     : 73 76
metaType             : 64
metaparamPair        : 106 107
metaparams           : 72 106
nackBody             : 1 14
nackFile             : 0
nackHeader           : 1 2 3 4
node                 : 14
nodeAlias            : 16 18
nodeBody             : 15 24 34 34 36 47 50 51
nodeEnd              : 15
nodeIndex            : 16
numeric              : 6 20 21 21 22 42 44 92 94 123
numericSymbol        : 87 89 108 122
optionalChance       : 34 36
optionalTerminator   : 35
parens               : 74 76 79
regComp              : 110
regOp                : 111
regRef               : 110 111
regVal               : 110
registerContent      : 109
registerDeclaration  : 2
registerType         : 65
segment              : 24
skip                 : 6 7 8 9 10 11 12 16 25 26 27 28 29 37 38 39 40 49 52 54 128
uncontrolledSegment  : 30 31 34 37 38 47 48


state 0

    (0) S' -> . nackFile
    (1) nackFile -> . nackHeader nackBody
    (2) nackHeader -> . registerDeclaration nackHeader
    (3) nackHeader -> . actionImport nackHeader
    (4) nackHeader -> . libraryImport nackHeader
    (5) nackHeader -> . empty
    (11) registerDeclaration -> . REGISTER id AS REG skip
    (12) registerDeclaration -> . REGISTER id skip
    (9) actionImport -> . IMPORTACTIONS ID AS ID skip
    (10) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (6) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (7) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (130) empty -> .
    REGISTER        shift and go to state 7
    IMPORTACTIONS   shift and go to state 8
    IMPORTLIBRARY   shift and go to state 9
    DEF             reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    nackFile                       shift and go to state 1
    nackHeader                     shift and go to state 2
    registerDeclaration            shift and go to state 3
    actionImport                   shift and go to state 4
    libraryImport                  shift and go to state 5
    empty                          shift and go to state 6

state 1

    (0) S' -> nackFile .


state 2

    (1) nackFile -> nackHeader . nackBody
    (13) nackBody -> . empty
    (14) nackBody -> . node nackBody
    (130) empty -> .
    (15) node -> . defHeader nodeBody nodeEnd
    (16) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 130 (empty -> .)
    DEF             shift and go to state 14

    nackBody                       shift and go to state 10
    empty                          shift and go to state 11
    node                           shift and go to state 12
    defHeader                      shift and go to state 13

state 3

    (2) nackHeader -> registerDeclaration . nackHeader
    (2) nackHeader -> . registerDeclaration nackHeader
    (3) nackHeader -> . actionImport nackHeader
    (4) nackHeader -> . libraryImport nackHeader
    (5) nackHeader -> . empty
    (11) registerDeclaration -> . REGISTER id AS REG skip
    (12) registerDeclaration -> . REGISTER id skip
    (9) actionImport -> . IMPORTACTIONS ID AS ID skip
    (10) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (6) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (7) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (130) empty -> .
    REGISTER        shift and go to state 7
    IMPORTACTIONS   shift and go to state 8
    IMPORTLIBRARY   shift and go to state 9
    DEF             reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    registerDeclaration            shift and go to state 3
    nackHeader                     shift and go to state 15
    actionImport                   shift and go to state 4
    libraryImport                  shift and go to state 5
    empty                          shift and go to state 6

state 4

    (3) nackHeader -> actionImport . nackHeader
    (2) nackHeader -> . registerDeclaration nackHeader
    (3) nackHeader -> . actionImport nackHeader
    (4) nackHeader -> . libraryImport nackHeader
    (5) nackHeader -> . empty
    (11) registerDeclaration -> . REGISTER id AS REG skip
    (12) registerDeclaration -> . REGISTER id skip
    (9) actionImport -> . IMPORTACTIONS ID AS ID skip
    (10) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (6) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (7) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (130) empty -> .
    REGISTER        shift and go to state 7
    IMPORTACTIONS   shift and go to state 8
    IMPORTLIBRARY   shift and go to state 9
    DEF             reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    actionImport                   shift and go to state 4
    nackHeader                     shift and go to state 16
    registerDeclaration            shift and go to state 3
    libraryImport                  shift and go to state 5
    empty                          shift and go to state 6

state 5

    (4) nackHeader -> libraryImport . nackHeader
    (2) nackHeader -> . registerDeclaration nackHeader
    (3) nackHeader -> . actionImport nackHeader
    (4) nackHeader -> . libraryImport nackHeader
    (5) nackHeader -> . empty
    (11) registerDeclaration -> . REGISTER id AS REG skip
    (12) registerDeclaration -> . REGISTER id skip
    (9) actionImport -> . IMPORTACTIONS ID AS ID skip
    (10) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (6) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (7) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (130) empty -> .
    REGISTER        shift and go to state 7
    IMPORTACTIONS   shift and go to state 8
    IMPORTLIBRARY   shift and go to state 9
    DEF             reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)

    libraryImport                  shift and go to state 5
    nackHeader                     shift and go to state 17
    registerDeclaration            shift and go to state 3
    actionImport                   shift and go to state 4
    empty                          shift and go to state 6

state 6

    (5) nackHeader -> empty .
    DEF             reduce using rule 5 (nackHeader -> empty .)
    $end            reduce using rule 5 (nackHeader -> empty .)


state 7

    (11) registerDeclaration -> REGISTER . id AS REG skip
    (12) registerDeclaration -> REGISTER . id skip
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 18

state 8

    (9) actionImport -> IMPORTACTIONS . ID AS ID skip
    (10) actionImport -> IMPORTACTIONS . PATH AS ID skip
    ID              shift and go to state 20
    PATH            shift and go to state 21


state 9

    (6) libraryImport -> IMPORTLIBRARY . numeric AS ID skip
    (7) libraryImport -> IMPORTLIBRARY . ID AS ID skip
    (8) libraryImport -> IMPORTLIBRARY . PATH AS ID skip
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    ID              shift and go to state 23
    PATH            shift and go to state 24
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numeric                        shift and go to state 22

state 10

    (1) nackFile -> nackHeader nackBody .
    $end            reduce using rule 1 (nackFile -> nackHeader nackBody .)


state 11

    (13) nackBody -> empty .
    $end            reduce using rule 13 (nackBody -> empty .)


state 12

    (14) nackBody -> node . nackBody
    (13) nackBody -> . empty
    (14) nackBody -> . node nackBody
    (130) empty -> .
    (15) node -> . defHeader nodeBody nodeEnd
    (16) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 130 (empty -> .)
    DEF             shift and go to state 14

    node                           shift and go to state 12
    nackBody                       shift and go to state 27
    empty                          shift and go to state 11
    defHeader                      shift and go to state 13

state 13

    (15) node -> defHeader . nodeBody nodeEnd
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDFUNCTION     reduce using rule 130 (empty -> .)
    ENDDEF          reduce using rule 130 (empty -> .)
    ENDF            reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    nodeBody                       shift and go to state 28
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    uncontrolledSegment            shift and go to state 33
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    chanceHeader                   shift and go to state 40
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 14

    (16) defHeader -> DEF . id nodeAlias nodeIndex skip
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 52

state 15

    (2) nackHeader -> registerDeclaration nackHeader .
    DEF             reduce using rule 2 (nackHeader -> registerDeclaration nackHeader .)
    $end            reduce using rule 2 (nackHeader -> registerDeclaration nackHeader .)


state 16

    (3) nackHeader -> actionImport nackHeader .
    DEF             reduce using rule 3 (nackHeader -> actionImport nackHeader .)
    $end            reduce using rule 3 (nackHeader -> actionImport nackHeader .)


state 17

    (4) nackHeader -> libraryImport nackHeader .
    DEF             reduce using rule 4 (nackHeader -> libraryImport nackHeader .)
    $end            reduce using rule 4 (nackHeader -> libraryImport nackHeader .)


state 18

    (11) registerDeclaration -> REGISTER id . AS REG skip
    (12) registerDeclaration -> REGISTER id . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    AS              shift and go to state 53
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 54

state 19

    (127) id -> ID .
    AS              reduce using rule 127 (id -> ID .)
    LINESKIP        reduce using rule 127 (id -> ID .)
    &               reduce using rule 127 (id -> ID .)
    META            reduce using rule 127 (id -> ID .)
    :               reduce using rule 127 (id -> ID .)
    NEQ             reduce using rule 127 (id -> ID .)
    GT              reduce using rule 127 (id -> ID .)
    GEQ             reduce using rule 127 (id -> ID .)
    LT              reduce using rule 127 (id -> ID .)
    LEQ             reduce using rule 127 (id -> ID .)
    EQ              reduce using rule 127 (id -> ID .)
    RESET           reduce using rule 127 (id -> ID .)
    INCREMENT       reduce using rule 127 (id -> ID .)
    (               reduce using rule 127 (id -> ID .)
    .               reduce using rule 127 (id -> ID .)
    DO_ACTION       reduce using rule 127 (id -> ID .)
    DO_CALL         reduce using rule 127 (id -> ID .)
    DO_DIRECTIVE    reduce using rule 127 (id -> ID .)
    )               reduce using rule 127 (id -> ID .)
    ,               reduce using rule 127 (id -> ID .)
    ]               reduce using rule 127 (id -> ID .)


state 20

    (9) actionImport -> IMPORTACTIONS ID . AS ID skip
    AS              shift and go to state 56


state 21

    (10) actionImport -> IMPORTACTIONS PATH . AS ID skip
    AS              shift and go to state 57


state 22

    (6) libraryImport -> IMPORTLIBRARY numeric . AS ID skip
    AS              shift and go to state 58


state 23

    (7) libraryImport -> IMPORTLIBRARY ID . AS ID skip
    AS              shift and go to state 59


state 24

    (8) libraryImport -> IMPORTLIBRARY PATH . AS ID skip
    AS              shift and go to state 60


state 25

    (125) numeric -> HEXNUMBER .
    AS              reduce using rule 125 (numeric -> HEXNUMBER .)
    )               reduce using rule 125 (numeric -> HEXNUMBER .)
    ,               reduce using rule 125 (numeric -> HEXNUMBER .)
    ]               reduce using rule 125 (numeric -> HEXNUMBER .)
    LINESKIP        reduce using rule 125 (numeric -> HEXNUMBER .)
    META            reduce using rule 125 (numeric -> HEXNUMBER .)


state 26

    (126) numeric -> NUMBER .
    AS              reduce using rule 126 (numeric -> NUMBER .)
    )               reduce using rule 126 (numeric -> NUMBER .)
    ,               reduce using rule 126 (numeric -> NUMBER .)
    ]               reduce using rule 126 (numeric -> NUMBER .)
    LINESKIP        reduce using rule 126 (numeric -> NUMBER .)
    META            reduce using rule 126 (numeric -> NUMBER .)


state 27

    (14) nackBody -> node nackBody .
    $end            reduce using rule 14 (nackBody -> node nackBody .)


state 28

    (15) node -> defHeader nodeBody . nodeEnd
    (25) nodeEnd -> . ENDFUNCTION maybeMetaType skip
    (26) nodeEnd -> . ENDDEF maybeMetaType skip
    (27) nodeEnd -> . ENDF maybeMetaType skip
    ENDFUNCTION     shift and go to state 62
    ENDDEF          shift and go to state 63
    ENDF            shift and go to state 64

    nodeEnd                        shift and go to state 61

state 29

    (23) nodeBody -> empty .
    (55) maybeFunctionType -> empty .
    ENDFUNCTION     reduce using rule 23 (nodeBody -> empty .)
    ENDDEF          reduce using rule 23 (nodeBody -> empty .)
    ENDF            reduce using rule 23 (nodeBody -> empty .)
    ENDWITH         reduce using rule 23 (nodeBody -> empty .)
    ENDIF           reduce using rule 23 (nodeBody -> empty .)
    ELSE            reduce using rule 23 (nodeBody -> empty .)
    ELIF            reduce using rule 23 (nodeBody -> empty .)
    ELSEC           reduce using rule 23 (nodeBody -> empty .)
    ELSECHANCE      reduce using rule 23 (nodeBody -> empty .)
    ENDCHANCEWITH   reduce using rule 23 (nodeBody -> empty .)
    ENDCWITH        reduce using rule 23 (nodeBody -> empty .)
    ENDCHANCE       reduce using rule 23 (nodeBody -> empty .)
    ENDC            reduce using rule 23 (nodeBody -> empty .)
    DO_ACTION       reduce using rule 55 (maybeFunctionType -> empty .)
    DO_CALL         reduce using rule 55 (maybeFunctionType -> empty .)
    DO_DIRECTIVE    reduce using rule 55 (maybeFunctionType -> empty .)
    META            reduce using rule 55 (maybeFunctionType -> empty .)
    LINESKIP        reduce using rule 55 (maybeFunctionType -> empty .)


state 30

    (24) nodeBody -> segment . nodeBody
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDFUNCTION     reduce using rule 130 (empty -> .)
    ENDDEF          reduce using rule 130 (empty -> .)
    ENDF            reduce using rule 130 (empty -> .)
    ENDWITH         reduce using rule 130 (empty -> .)
    ENDIF           reduce using rule 130 (empty -> .)
    ELSE            reduce using rule 130 (empty -> .)
    ELIF            reduce using rule 130 (empty -> .)
    ELSEC           reduce using rule 130 (empty -> .)
    ELSECHANCE      reduce using rule 130 (empty -> .)
    ENDCHANCEWITH   reduce using rule 130 (empty -> .)
    ENDCWITH        reduce using rule 130 (empty -> .)
    ENDCHANCE       reduce using rule 130 (empty -> .)
    ENDC            reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    segment                        shift and go to state 30
    nodeBody                       shift and go to state 65
    empty                          shift and go to state 29
    uncontrolledSegment            shift and go to state 33
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    chanceHeader                   shift and go to state 40
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 31

    (28) segment -> DO_NOTHING . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 66

state 32

    (29) segment -> UNSAFE . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 67

state 33

    (30) segment -> uncontrolledSegment .
    DO_NOTHING      reduce using rule 30 (segment -> uncontrolledSegment .)
    UNSAFE          reduce using rule 30 (segment -> uncontrolledSegment .)
    CONCLUDE        reduce using rule 30 (segment -> uncontrolledSegment .)
    IF              reduce using rule 30 (segment -> uncontrolledSegment .)
    REPEAT          reduce using rule 30 (segment -> uncontrolledSegment .)
    RESET           reduce using rule 30 (segment -> uncontrolledSegment .)
    RETURN          reduce using rule 30 (segment -> uncontrolledSegment .)
    CHANCE          reduce using rule 30 (segment -> uncontrolledSegment .)
    [               reduce using rule 30 (segment -> uncontrolledSegment .)
    FUNCTION        reduce using rule 30 (segment -> uncontrolledSegment .)
    FUNCTION_START  reduce using rule 30 (segment -> uncontrolledSegment .)
    DO_ACTION       reduce using rule 30 (segment -> uncontrolledSegment .)
    DO_CALL         reduce using rule 30 (segment -> uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 30 (segment -> uncontrolledSegment .)
    META            reduce using rule 30 (segment -> uncontrolledSegment .)
    LINESKIP        reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDDEF          reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDF            reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDWITH         reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDIF           reduce using rule 30 (segment -> uncontrolledSegment .)
    ELSE            reduce using rule 30 (segment -> uncontrolledSegment .)
    ELIF            reduce using rule 30 (segment -> uncontrolledSegment .)
    ELSEC           reduce using rule 30 (segment -> uncontrolledSegment .)
    ELSECHANCE      reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDCHANCEWITH   reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDCWITH        reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDCHANCE       reduce using rule 30 (segment -> uncontrolledSegment .)
    ENDC            reduce using rule 30 (segment -> uncontrolledSegment .)


state 34

    (31) segment -> CONCLUDE . uncontrolledSegment
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (130) empty -> .
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 68
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    empty                          shift and go to state 69
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 35

    (32) segment -> conditional .
    DO_NOTHING      reduce using rule 32 (segment -> conditional .)
    UNSAFE          reduce using rule 32 (segment -> conditional .)
    CONCLUDE        reduce using rule 32 (segment -> conditional .)
    IF              reduce using rule 32 (segment -> conditional .)
    REPEAT          reduce using rule 32 (segment -> conditional .)
    RESET           reduce using rule 32 (segment -> conditional .)
    RETURN          reduce using rule 32 (segment -> conditional .)
    CHANCE          reduce using rule 32 (segment -> conditional .)
    [               reduce using rule 32 (segment -> conditional .)
    FUNCTION        reduce using rule 32 (segment -> conditional .)
    FUNCTION_START  reduce using rule 32 (segment -> conditional .)
    DO_ACTION       reduce using rule 32 (segment -> conditional .)
    DO_CALL         reduce using rule 32 (segment -> conditional .)
    DO_DIRECTIVE    reduce using rule 32 (segment -> conditional .)
    META            reduce using rule 32 (segment -> conditional .)
    LINESKIP        reduce using rule 32 (segment -> conditional .)
    ENDFUNCTION     reduce using rule 32 (segment -> conditional .)
    ENDDEF          reduce using rule 32 (segment -> conditional .)
    ENDF            reduce using rule 32 (segment -> conditional .)
    ENDWITH         reduce using rule 32 (segment -> conditional .)
    ENDIF           reduce using rule 32 (segment -> conditional .)
    ELSE            reduce using rule 32 (segment -> conditional .)
    ELIF            reduce using rule 32 (segment -> conditional .)
    ELSEC           reduce using rule 32 (segment -> conditional .)
    ELSECHANCE      reduce using rule 32 (segment -> conditional .)
    ENDCHANCEWITH   reduce using rule 32 (segment -> conditional .)
    ENDCWITH        reduce using rule 32 (segment -> conditional .)
    ENDCHANCE       reduce using rule 32 (segment -> conditional .)
    ENDC            reduce using rule 32 (segment -> conditional .)


state 36

    (33) segment -> chance .
    DO_NOTHING      reduce using rule 33 (segment -> chance .)
    UNSAFE          reduce using rule 33 (segment -> chance .)
    CONCLUDE        reduce using rule 33 (segment -> chance .)
    IF              reduce using rule 33 (segment -> chance .)
    REPEAT          reduce using rule 33 (segment -> chance .)
    RESET           reduce using rule 33 (segment -> chance .)
    RETURN          reduce using rule 33 (segment -> chance .)
    CHANCE          reduce using rule 33 (segment -> chance .)
    [               reduce using rule 33 (segment -> chance .)
    FUNCTION        reduce using rule 33 (segment -> chance .)
    FUNCTION_START  reduce using rule 33 (segment -> chance .)
    DO_ACTION       reduce using rule 33 (segment -> chance .)
    DO_CALL         reduce using rule 33 (segment -> chance .)
    DO_DIRECTIVE    reduce using rule 33 (segment -> chance .)
    META            reduce using rule 33 (segment -> chance .)
    LINESKIP        reduce using rule 33 (segment -> chance .)
    ENDFUNCTION     reduce using rule 33 (segment -> chance .)
    ENDDEF          reduce using rule 33 (segment -> chance .)
    ENDF            reduce using rule 33 (segment -> chance .)
    ENDWITH         reduce using rule 33 (segment -> chance .)
    ENDIF           reduce using rule 33 (segment -> chance .)
    ELSE            reduce using rule 33 (segment -> chance .)
    ELIF            reduce using rule 33 (segment -> chance .)
    ELSEC           reduce using rule 33 (segment -> chance .)
    ELSECHANCE      reduce using rule 33 (segment -> chance .)
    ENDCHANCEWITH   reduce using rule 33 (segment -> chance .)
    ENDCWITH        reduce using rule 33 (segment -> chance .)
    ENDCHANCE       reduce using rule 33 (segment -> chance .)
    ENDC            reduce using rule 33 (segment -> chance .)


state 37

    (52) uncontrolledSegment -> directiveName . maybeMetaType skip
    (63) maybeMetaType -> . empty
    (64) maybeMetaType -> . metaType
    (130) empty -> .
    (72) metaType -> . META metaparams
    LINESKIP        reduce using rule 130 (empty -> .)
    META            shift and go to state 73

    maybeMetaType                  shift and go to state 70
    empty                          shift and go to state 71
    metaType                       shift and go to state 72

state 38

    (53) uncontrolledSegment -> maybeFunctionType . actionTypeStart
    (54) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (57) maybeActionType -> . empty
    (58) maybeActionType -> . actionType
    (130) empty -> .
    (68) actionType -> . DO_ACTION actionLiteral actionParens
    (69) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_ACTION       shift and go to state 78

    actionTypeStart                shift and go to state 74
    maybeActionType                shift and go to state 75
    empty                          shift and go to state 76
    actionType                     shift and go to state 77

state 39

    (47) conditional -> IF . uncontrolledSegment nodeBody conditionalTerminator
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (130) empty -> .
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 79
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    empty                          shift and go to state 69
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 40

    (34) chance -> chanceHeader . actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (54) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (57) maybeActionType -> . empty
    (58) maybeActionType -> . actionType
    (130) empty -> .
    (68) actionType -> . DO_ACTION actionLiteral actionParens
    (69) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_ACTION       shift and go to state 78

    actionTypeStart                shift and go to state 80
    maybeActionType                shift and go to state 75
    empty                          shift and go to state 76
    actionType                     shift and go to state 77

state 41

    (103) directiveName -> REPEAT .
    META            reduce using rule 103 (directiveName -> REPEAT .)
    LINESKIP        reduce using rule 103 (directiveName -> REPEAT .)


state 42

    (104) directiveName -> RESET .
    META            reduce using rule 104 (directiveName -> RESET .)
    LINESKIP        reduce using rule 104 (directiveName -> RESET .)


state 43

    (105) directiveName -> RETURN .
    META            reduce using rule 105 (directiveName -> RETURN .)
    LINESKIP        reduce using rule 105 (directiveName -> RETURN .)


state 44

    (56) maybeFunctionType -> functionType .
    DO_ACTION       reduce using rule 56 (maybeFunctionType -> functionType .)
    DO_CALL         reduce using rule 56 (maybeFunctionType -> functionType .)
    DO_DIRECTIVE    reduce using rule 56 (maybeFunctionType -> functionType .)
    META            reduce using rule 56 (maybeFunctionType -> functionType .)
    LINESKIP        reduce using rule 56 (maybeFunctionType -> functionType .)


state 45

    (41) chanceHeader -> CHANCE . ( id )
    (42) chanceHeader -> CHANCE . ( numeric )
    (               shift and go to state 81


state 46

    (65) functionType -> registerType .
    DO_ACTION       reduce using rule 65 (functionType -> registerType .)
    DO_CALL         reduce using rule 65 (functionType -> registerType .)
    DO_DIRECTIVE    reduce using rule 65 (functionType -> registerType .)
    META            reduce using rule 65 (functionType -> registerType .)
    LINESKIP        reduce using rule 65 (functionType -> registerType .)


state 47

    (66) functionType -> functionLiteral .
    DO_ACTION       reduce using rule 66 (functionType -> functionLiteral .)
    DO_CALL         reduce using rule 66 (functionType -> functionLiteral .)
    DO_DIRECTIVE    reduce using rule 66 (functionType -> functionLiteral .)
    META            reduce using rule 66 (functionType -> functionLiteral .)
    LINESKIP        reduce using rule 66 (functionType -> functionLiteral .)


state 48

    (67) functionType -> functionName .
    DO_ACTION       reduce using rule 67 (functionType -> functionName .)
    DO_CALL         reduce using rule 67 (functionType -> functionName .)
    DO_DIRECTIVE    reduce using rule 67 (functionType -> functionName .)
    META            reduce using rule 67 (functionType -> functionName .)
    LINESKIP        reduce using rule 67 (functionType -> functionName .)


state 49

    (109) registerType -> [ . registerContent ]
    (110) registerContent -> . regRef regComp regVal
    (111) registerContent -> . regRef regOp
    (120) regRef -> . REG
    (121) regRef -> . id
    (127) id -> . ID
    REG             shift and go to state 84
    ID              shift and go to state 19

    registerContent                shift and go to state 82
    regRef                         shift and go to state 83
    id                             shift and go to state 85

state 50

    (82) functionLiteral -> FUNCTION . maybeFuncParens
    (83) maybeFuncParens -> . funcParens
    (84) maybeFuncParens -> . empty
    (87) funcParens -> . ( numericSymbol commaPrefacedId )
    (88) funcParens -> . ( id . id maybeDotID )
    (130) empty -> .
    (               shift and go to state 89
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)

    maybeFuncParens                shift and go to state 86
    funcParens                     shift and go to state 87
    empty                          shift and go to state 88

state 51

    (73) functionName -> FUNCTION_START . id maybeParens maybeSubFunction
    (74) functionName -> FUNCTION_START . id parens
    (75) functionName -> FUNCTION_START . id
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 90

state 52

    (16) defHeader -> DEF id . nodeAlias nodeIndex skip
    (17) nodeAlias -> . empty
    (18) nodeAlias -> . & id nodeAlias
    (130) empty -> .
    &               shift and go to state 93
    META            reduce using rule 130 (empty -> .)
    :               reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)

    nodeAlias                      shift and go to state 91
    empty                          shift and go to state 92

state 53

    (11) registerDeclaration -> REGISTER id AS . REG skip
    REG             shift and go to state 94


state 54

    (12) registerDeclaration -> REGISTER id skip .
    REGISTER        reduce using rule 12 (registerDeclaration -> REGISTER id skip .)
    IMPORTACTIONS   reduce using rule 12 (registerDeclaration -> REGISTER id skip .)
    IMPORTLIBRARY   reduce using rule 12 (registerDeclaration -> REGISTER id skip .)
    DEF             reduce using rule 12 (registerDeclaration -> REGISTER id skip .)
    $end            reduce using rule 12 (registerDeclaration -> REGISTER id skip .)


state 55

    (128) skip -> LINESKIP . skip
    (129) skip -> LINESKIP .
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
  ! shift/reduce conflict for LINESKIP resolved as shift
    REGISTER        reduce using rule 129 (skip -> LINESKIP .)
    IMPORTACTIONS   reduce using rule 129 (skip -> LINESKIP .)
    IMPORTLIBRARY   reduce using rule 129 (skip -> LINESKIP .)
    DEF             reduce using rule 129 (skip -> LINESKIP .)
    $end            reduce using rule 129 (skip -> LINESKIP .)
    DO_NOTHING      reduce using rule 129 (skip -> LINESKIP .)
    UNSAFE          reduce using rule 129 (skip -> LINESKIP .)
    CONCLUDE        reduce using rule 129 (skip -> LINESKIP .)
    IF              reduce using rule 129 (skip -> LINESKIP .)
    REPEAT          reduce using rule 129 (skip -> LINESKIP .)
    RESET           reduce using rule 129 (skip -> LINESKIP .)
    RETURN          reduce using rule 129 (skip -> LINESKIP .)
    CHANCE          reduce using rule 129 (skip -> LINESKIP .)
    [               reduce using rule 129 (skip -> LINESKIP .)
    FUNCTION        reduce using rule 129 (skip -> LINESKIP .)
    FUNCTION_START  reduce using rule 129 (skip -> LINESKIP .)
    DO_ACTION       reduce using rule 129 (skip -> LINESKIP .)
    DO_CALL         reduce using rule 129 (skip -> LINESKIP .)
    DO_DIRECTIVE    reduce using rule 129 (skip -> LINESKIP .)
    META            reduce using rule 129 (skip -> LINESKIP .)
    ENDFUNCTION     reduce using rule 129 (skip -> LINESKIP .)
    ENDDEF          reduce using rule 129 (skip -> LINESKIP .)
    ENDF            reduce using rule 129 (skip -> LINESKIP .)
    ENDWITH         reduce using rule 129 (skip -> LINESKIP .)
    ENDIF           reduce using rule 129 (skip -> LINESKIP .)
    ELSE            reduce using rule 129 (skip -> LINESKIP .)
    ELIF            reduce using rule 129 (skip -> LINESKIP .)
    ELSEC           reduce using rule 129 (skip -> LINESKIP .)
    ELSECHANCE      reduce using rule 129 (skip -> LINESKIP .)
    ENDCHANCEWITH   reduce using rule 129 (skip -> LINESKIP .)
    ENDCWITH        reduce using rule 129 (skip -> LINESKIP .)
    ENDCHANCE       reduce using rule 129 (skip -> LINESKIP .)
    ENDC            reduce using rule 129 (skip -> LINESKIP .)
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 95

state 56

    (9) actionImport -> IMPORTACTIONS ID AS . ID skip
    ID              shift and go to state 96


state 57

    (10) actionImport -> IMPORTACTIONS PATH AS . ID skip
    ID              shift and go to state 97


state 58

    (6) libraryImport -> IMPORTLIBRARY numeric AS . ID skip
    ID              shift and go to state 98


state 59

    (7) libraryImport -> IMPORTLIBRARY ID AS . ID skip
    ID              shift and go to state 99


state 60

    (8) libraryImport -> IMPORTLIBRARY PATH AS . ID skip
    ID              shift and go to state 100


state 61

    (15) node -> defHeader nodeBody nodeEnd .
    DEF             reduce using rule 15 (node -> defHeader nodeBody nodeEnd .)
    $end            reduce using rule 15 (node -> defHeader nodeBody nodeEnd .)


state 62

    (25) nodeEnd -> ENDFUNCTION . maybeMetaType skip
    (63) maybeMetaType -> . empty
    (64) maybeMetaType -> . metaType
    (130) empty -> .
    (72) metaType -> . META metaparams
    LINESKIP        reduce using rule 130 (empty -> .)
    META            shift and go to state 73

    maybeMetaType                  shift and go to state 101
    empty                          shift and go to state 71
    metaType                       shift and go to state 72

state 63

    (26) nodeEnd -> ENDDEF . maybeMetaType skip
    (63) maybeMetaType -> . empty
    (64) maybeMetaType -> . metaType
    (130) empty -> .
    (72) metaType -> . META metaparams
    LINESKIP        reduce using rule 130 (empty -> .)
    META            shift and go to state 73

    maybeMetaType                  shift and go to state 102
    empty                          shift and go to state 71
    metaType                       shift and go to state 72

state 64

    (27) nodeEnd -> ENDF . maybeMetaType skip
    (63) maybeMetaType -> . empty
    (64) maybeMetaType -> . metaType
    (130) empty -> .
    (72) metaType -> . META metaparams
    LINESKIP        reduce using rule 130 (empty -> .)
    META            shift and go to state 73

    maybeMetaType                  shift and go to state 103
    empty                          shift and go to state 71
    metaType                       shift and go to state 72

state 65

    (24) nodeBody -> segment nodeBody .
    ENDFUNCTION     reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDDEF          reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDF            reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDWITH         reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDIF           reduce using rule 24 (nodeBody -> segment nodeBody .)
    ELSE            reduce using rule 24 (nodeBody -> segment nodeBody .)
    ELIF            reduce using rule 24 (nodeBody -> segment nodeBody .)
    ELSEC           reduce using rule 24 (nodeBody -> segment nodeBody .)
    ELSECHANCE      reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDCHANCEWITH   reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDCWITH        reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDCHANCE       reduce using rule 24 (nodeBody -> segment nodeBody .)
    ENDC            reduce using rule 24 (nodeBody -> segment nodeBody .)


state 66

    (28) segment -> DO_NOTHING skip .
    DO_NOTHING      reduce using rule 28 (segment -> DO_NOTHING skip .)
    UNSAFE          reduce using rule 28 (segment -> DO_NOTHING skip .)
    CONCLUDE        reduce using rule 28 (segment -> DO_NOTHING skip .)
    IF              reduce using rule 28 (segment -> DO_NOTHING skip .)
    REPEAT          reduce using rule 28 (segment -> DO_NOTHING skip .)
    RESET           reduce using rule 28 (segment -> DO_NOTHING skip .)
    RETURN          reduce using rule 28 (segment -> DO_NOTHING skip .)
    CHANCE          reduce using rule 28 (segment -> DO_NOTHING skip .)
    [               reduce using rule 28 (segment -> DO_NOTHING skip .)
    FUNCTION        reduce using rule 28 (segment -> DO_NOTHING skip .)
    FUNCTION_START  reduce using rule 28 (segment -> DO_NOTHING skip .)
    DO_ACTION       reduce using rule 28 (segment -> DO_NOTHING skip .)
    DO_CALL         reduce using rule 28 (segment -> DO_NOTHING skip .)
    DO_DIRECTIVE    reduce using rule 28 (segment -> DO_NOTHING skip .)
    META            reduce using rule 28 (segment -> DO_NOTHING skip .)
    LINESKIP        reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDFUNCTION     reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDDEF          reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDF            reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDWITH         reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDIF           reduce using rule 28 (segment -> DO_NOTHING skip .)
    ELSE            reduce using rule 28 (segment -> DO_NOTHING skip .)
    ELIF            reduce using rule 28 (segment -> DO_NOTHING skip .)
    ELSEC           reduce using rule 28 (segment -> DO_NOTHING skip .)
    ELSECHANCE      reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDCHANCEWITH   reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDCWITH        reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDCHANCE       reduce using rule 28 (segment -> DO_NOTHING skip .)
    ENDC            reduce using rule 28 (segment -> DO_NOTHING skip .)


state 67

    (29) segment -> UNSAFE skip .
    DO_NOTHING      reduce using rule 29 (segment -> UNSAFE skip .)
    UNSAFE          reduce using rule 29 (segment -> UNSAFE skip .)
    CONCLUDE        reduce using rule 29 (segment -> UNSAFE skip .)
    IF              reduce using rule 29 (segment -> UNSAFE skip .)
    REPEAT          reduce using rule 29 (segment -> UNSAFE skip .)
    RESET           reduce using rule 29 (segment -> UNSAFE skip .)
    RETURN          reduce using rule 29 (segment -> UNSAFE skip .)
    CHANCE          reduce using rule 29 (segment -> UNSAFE skip .)
    [               reduce using rule 29 (segment -> UNSAFE skip .)
    FUNCTION        reduce using rule 29 (segment -> UNSAFE skip .)
    FUNCTION_START  reduce using rule 29 (segment -> UNSAFE skip .)
    DO_ACTION       reduce using rule 29 (segment -> UNSAFE skip .)
    DO_CALL         reduce using rule 29 (segment -> UNSAFE skip .)
    DO_DIRECTIVE    reduce using rule 29 (segment -> UNSAFE skip .)
    META            reduce using rule 29 (segment -> UNSAFE skip .)
    LINESKIP        reduce using rule 29 (segment -> UNSAFE skip .)
    ENDFUNCTION     reduce using rule 29 (segment -> UNSAFE skip .)
    ENDDEF          reduce using rule 29 (segment -> UNSAFE skip .)
    ENDF            reduce using rule 29 (segment -> UNSAFE skip .)
    ENDWITH         reduce using rule 29 (segment -> UNSAFE skip .)
    ENDIF           reduce using rule 29 (segment -> UNSAFE skip .)
    ELSE            reduce using rule 29 (segment -> UNSAFE skip .)
    ELIF            reduce using rule 29 (segment -> UNSAFE skip .)
    ELSEC           reduce using rule 29 (segment -> UNSAFE skip .)
    ELSECHANCE      reduce using rule 29 (segment -> UNSAFE skip .)
    ENDCHANCEWITH   reduce using rule 29 (segment -> UNSAFE skip .)
    ENDCWITH        reduce using rule 29 (segment -> UNSAFE skip .)
    ENDCHANCE       reduce using rule 29 (segment -> UNSAFE skip .)
    ENDC            reduce using rule 29 (segment -> UNSAFE skip .)


state 68

    (31) segment -> CONCLUDE uncontrolledSegment .
    DO_NOTHING      reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    UNSAFE          reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    CONCLUDE        reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    IF              reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    REPEAT          reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    RESET           reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    RETURN          reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    CHANCE          reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    [               reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    FUNCTION        reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    FUNCTION_START  reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    DO_ACTION       reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    DO_CALL         reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    META            reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    LINESKIP        reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDDEF          reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDF            reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDWITH         reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDIF           reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ELSE            reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ELIF            reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ELSEC           reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ELSECHANCE      reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDCHANCEWITH   reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDCWITH        reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDCHANCE       reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)
    ENDC            reduce using rule 31 (segment -> CONCLUDE uncontrolledSegment .)


state 69

    (55) maybeFunctionType -> empty .
    DO_ACTION       reduce using rule 55 (maybeFunctionType -> empty .)
    DO_CALL         reduce using rule 55 (maybeFunctionType -> empty .)
    DO_DIRECTIVE    reduce using rule 55 (maybeFunctionType -> empty .)
    META            reduce using rule 55 (maybeFunctionType -> empty .)
    LINESKIP        reduce using rule 55 (maybeFunctionType -> empty .)


state 70

    (52) uncontrolledSegment -> directiveName maybeMetaType . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 104

state 71

    (63) maybeMetaType -> empty .
    LINESKIP        reduce using rule 63 (maybeMetaType -> empty .)


state 72

    (64) maybeMetaType -> metaType .
    LINESKIP        reduce using rule 64 (maybeMetaType -> metaType .)


state 73

    (72) metaType -> META . metaparams
    (106) metaparams -> . metaparamPair , metaparams
    (107) metaparams -> . metaparamPair
    (108) metaparamPair -> . id : numericSymbol
    (127) id -> . ID
    ID              shift and go to state 19

    metaparams                     shift and go to state 105
    metaparamPair                  shift and go to state 106
    id                             shift and go to state 107

state 74

    (53) uncontrolledSegment -> maybeFunctionType actionTypeStart .
    DO_NOTHING      reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    UNSAFE          reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    CONCLUDE        reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    IF              reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    REPEAT          reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RESET           reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RETURN          reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    CHANCE          reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    [               reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    FUNCTION        reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    FUNCTION_START  reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_ACTION       reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_CALL         reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_DIRECTIVE    reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    META            reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    LINESKIP        reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDFUNCTION     reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDDEF          reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDF            reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDWITH         reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDIF           reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSE            reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELIF            reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSEC           reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSECHANCE      reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDCHANCEWITH   reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDCWITH        reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDCHANCE       reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDC            reduce using rule 53 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)


state 75

    (54) actionTypeStart -> maybeActionType . maybeCallType maybeDirectiveType maybeMetaType skip
    (59) maybeCallType -> . empty
    (60) maybeCallType -> . callType
    (130) empty -> .
    (70) callType -> . DO_CALL callName
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_CALL         shift and go to state 111

    maybeCallType                  shift and go to state 108
    empty                          shift and go to state 109
    callType                       shift and go to state 110

state 76

    (57) maybeActionType -> empty .
    DO_CALL         reduce using rule 57 (maybeActionType -> empty .)
    DO_DIRECTIVE    reduce using rule 57 (maybeActionType -> empty .)
    META            reduce using rule 57 (maybeActionType -> empty .)
    LINESKIP        reduce using rule 57 (maybeActionType -> empty .)


state 77

    (58) maybeActionType -> actionType .
    DO_CALL         reduce using rule 58 (maybeActionType -> actionType .)
    DO_DIRECTIVE    reduce using rule 58 (maybeActionType -> actionType .)
    META            reduce using rule 58 (maybeActionType -> actionType .)
    LINESKIP        reduce using rule 58 (maybeActionType -> actionType .)


state 78

    (68) actionType -> DO_ACTION . actionLiteral actionParens
    (69) actionType -> DO_ACTION . actionName actionParens
    (98) actionLiteral -> . ACTION
    (96) actionName -> . id
    (97) actionName -> . id . id
    (127) id -> . ID
    ACTION          shift and go to state 114
    ID              shift and go to state 19

    actionLiteral                  shift and go to state 112
    actionName                     shift and go to state 113
    id                             shift and go to state 115

state 79

    (47) conditional -> IF uncontrolledSegment . nodeBody conditionalTerminator
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 130 (empty -> .)
    ENDIF           reduce using rule 130 (empty -> .)
    ELSE            reduce using rule 130 (empty -> .)
    ELIF            reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 33
    nodeBody                       shift and go to state 116
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    chanceHeader                   shift and go to state 40
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 80

    (34) chance -> chanceHeader actionTypeStart . nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ELSEC           reduce using rule 130 (empty -> .)
    ELSECHANCE      reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    chanceHeader                   shift and go to state 40
    nodeBody                       shift and go to state 117
    uncontrolledSegment            shift and go to state 33
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 81

    (41) chanceHeader -> CHANCE ( . id )
    (42) chanceHeader -> CHANCE ( . numeric )
    (127) id -> . ID
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    ID              shift and go to state 19
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    id                             shift and go to state 118
    numeric                        shift and go to state 119

state 82

    (109) registerType -> [ registerContent . ]
    ]               shift and go to state 120


state 83

    (110) registerContent -> regRef . regComp regVal
    (111) registerContent -> regRef . regOp
    (114) regComp -> . NEQ
    (115) regComp -> . GT
    (116) regComp -> . GEQ
    (117) regComp -> . LT
    (118) regComp -> . LEQ
    (119) regComp -> . EQ
    (112) regOp -> . RESET
    (113) regOp -> . INCREMENT
    NEQ             shift and go to state 123
    GT              shift and go to state 124
    GEQ             shift and go to state 125
    LT              shift and go to state 126
    LEQ             shift and go to state 127
    EQ              shift and go to state 128
    RESET           shift and go to state 129
    INCREMENT       shift and go to state 130

    regComp                        shift and go to state 121
    regOp                          shift and go to state 122

state 84

    (120) regRef -> REG .
    NEQ             reduce using rule 120 (regRef -> REG .)
    GT              reduce using rule 120 (regRef -> REG .)
    GEQ             reduce using rule 120 (regRef -> REG .)
    LT              reduce using rule 120 (regRef -> REG .)
    LEQ             reduce using rule 120 (regRef -> REG .)
    EQ              reduce using rule 120 (regRef -> REG .)
    RESET           reduce using rule 120 (regRef -> REG .)
    INCREMENT       reduce using rule 120 (regRef -> REG .)


state 85

    (121) regRef -> id .
    NEQ             reduce using rule 121 (regRef -> id .)
    GT              reduce using rule 121 (regRef -> id .)
    GEQ             reduce using rule 121 (regRef -> id .)
    LT              reduce using rule 121 (regRef -> id .)
    LEQ             reduce using rule 121 (regRef -> id .)
    EQ              reduce using rule 121 (regRef -> id .)
    RESET           reduce using rule 121 (regRef -> id .)
    INCREMENT       reduce using rule 121 (regRef -> id .)


state 86

    (82) functionLiteral -> FUNCTION maybeFuncParens .
    DO_ACTION       reduce using rule 82 (functionLiteral -> FUNCTION maybeFuncParens .)
    DO_CALL         reduce using rule 82 (functionLiteral -> FUNCTION maybeFuncParens .)
    DO_DIRECTIVE    reduce using rule 82 (functionLiteral -> FUNCTION maybeFuncParens .)
    META            reduce using rule 82 (functionLiteral -> FUNCTION maybeFuncParens .)
    LINESKIP        reduce using rule 82 (functionLiteral -> FUNCTION maybeFuncParens .)


state 87

    (83) maybeFuncParens -> funcParens .
    DO_ACTION       reduce using rule 83 (maybeFuncParens -> funcParens .)
    DO_CALL         reduce using rule 83 (maybeFuncParens -> funcParens .)
    DO_DIRECTIVE    reduce using rule 83 (maybeFuncParens -> funcParens .)
    META            reduce using rule 83 (maybeFuncParens -> funcParens .)
    LINESKIP        reduce using rule 83 (maybeFuncParens -> funcParens .)


state 88

    (84) maybeFuncParens -> empty .
    DO_ACTION       reduce using rule 84 (maybeFuncParens -> empty .)
    DO_CALL         reduce using rule 84 (maybeFuncParens -> empty .)
    DO_DIRECTIVE    reduce using rule 84 (maybeFuncParens -> empty .)
    META            reduce using rule 84 (maybeFuncParens -> empty .)
    LINESKIP        reduce using rule 84 (maybeFuncParens -> empty .)


state 89

    (87) funcParens -> ( . numericSymbol commaPrefacedId )
    (88) funcParens -> ( . id . id maybeDotID )
    (123) numericSymbol -> . numeric
    (124) numericSymbol -> . id
    (127) id -> . ID
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    ID              shift and go to state 19
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numericSymbol                  shift and go to state 131
    id                             shift and go to state 132
    numeric                        shift and go to state 133

state 90

    (73) functionName -> FUNCTION_START id . maybeParens maybeSubFunction
    (74) functionName -> FUNCTION_START id . parens
    (75) functionName -> FUNCTION_START id .
    (78) maybeParens -> . empty
    (79) maybeParens -> . parens
    (80) parens -> . funcParens
    (81) parens -> . ( )
    (130) empty -> .
    (87) funcParens -> . ( numericSymbol commaPrefacedId )
    (88) funcParens -> . ( id . id maybeDotID )
    DO_ACTION       reduce using rule 75 (functionName -> FUNCTION_START id .)
    DO_CALL         reduce using rule 75 (functionName -> FUNCTION_START id .)
    DO_DIRECTIVE    reduce using rule 75 (functionName -> FUNCTION_START id .)
    META            reduce using rule 75 (functionName -> FUNCTION_START id .)
    LINESKIP        reduce using rule 75 (functionName -> FUNCTION_START id .)
    (               shift and go to state 138
    .               reduce using rule 130 (empty -> .)

    maybeParens                    shift and go to state 134
    parens                         shift and go to state 135
    empty                          shift and go to state 136
    funcParens                     shift and go to state 137

state 91

    (16) defHeader -> DEF id nodeAlias . nodeIndex skip
    (19) nodeIndex -> . empty
    (20) nodeIndex -> . META numeric
    (21) nodeIndex -> . : numeric META numeric
    (22) nodeIndex -> . : numeric
    (130) empty -> .
    META            shift and go to state 141
    :               shift and go to state 142
    LINESKIP        reduce using rule 130 (empty -> .)

    nodeIndex                      shift and go to state 139
    empty                          shift and go to state 140

state 92

    (17) nodeAlias -> empty .
    META            reduce using rule 17 (nodeAlias -> empty .)
    :               reduce using rule 17 (nodeAlias -> empty .)
    LINESKIP        reduce using rule 17 (nodeAlias -> empty .)


state 93

    (18) nodeAlias -> & . id nodeAlias
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 143

state 94

    (11) registerDeclaration -> REGISTER id AS REG . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 144

state 95

    (128) skip -> LINESKIP skip .
    REGISTER        reduce using rule 128 (skip -> LINESKIP skip .)
    IMPORTACTIONS   reduce using rule 128 (skip -> LINESKIP skip .)
    IMPORTLIBRARY   reduce using rule 128 (skip -> LINESKIP skip .)
    DEF             reduce using rule 128 (skip -> LINESKIP skip .)
    $end            reduce using rule 128 (skip -> LINESKIP skip .)
    DO_NOTHING      reduce using rule 128 (skip -> LINESKIP skip .)
    UNSAFE          reduce using rule 128 (skip -> LINESKIP skip .)
    CONCLUDE        reduce using rule 128 (skip -> LINESKIP skip .)
    IF              reduce using rule 128 (skip -> LINESKIP skip .)
    REPEAT          reduce using rule 128 (skip -> LINESKIP skip .)
    RESET           reduce using rule 128 (skip -> LINESKIP skip .)
    RETURN          reduce using rule 128 (skip -> LINESKIP skip .)
    CHANCE          reduce using rule 128 (skip -> LINESKIP skip .)
    [               reduce using rule 128 (skip -> LINESKIP skip .)
    FUNCTION        reduce using rule 128 (skip -> LINESKIP skip .)
    FUNCTION_START  reduce using rule 128 (skip -> LINESKIP skip .)
    DO_ACTION       reduce using rule 128 (skip -> LINESKIP skip .)
    DO_CALL         reduce using rule 128 (skip -> LINESKIP skip .)
    DO_DIRECTIVE    reduce using rule 128 (skip -> LINESKIP skip .)
    META            reduce using rule 128 (skip -> LINESKIP skip .)
    LINESKIP        reduce using rule 128 (skip -> LINESKIP skip .)
    ENDFUNCTION     reduce using rule 128 (skip -> LINESKIP skip .)
    ENDDEF          reduce using rule 128 (skip -> LINESKIP skip .)
    ENDF            reduce using rule 128 (skip -> LINESKIP skip .)
    ENDWITH         reduce using rule 128 (skip -> LINESKIP skip .)
    ENDIF           reduce using rule 128 (skip -> LINESKIP skip .)
    ELSE            reduce using rule 128 (skip -> LINESKIP skip .)
    ELIF            reduce using rule 128 (skip -> LINESKIP skip .)
    ELSEC           reduce using rule 128 (skip -> LINESKIP skip .)
    ELSECHANCE      reduce using rule 128 (skip -> LINESKIP skip .)
    ENDCHANCEWITH   reduce using rule 128 (skip -> LINESKIP skip .)
    ENDCWITH        reduce using rule 128 (skip -> LINESKIP skip .)
    ENDCHANCE       reduce using rule 128 (skip -> LINESKIP skip .)
    ENDC            reduce using rule 128 (skip -> LINESKIP skip .)


state 96

    (9) actionImport -> IMPORTACTIONS ID AS ID . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 145

state 97

    (10) actionImport -> IMPORTACTIONS PATH AS ID . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 146

state 98

    (6) libraryImport -> IMPORTLIBRARY numeric AS ID . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 147

state 99

    (7) libraryImport -> IMPORTLIBRARY ID AS ID . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 148

state 100

    (8) libraryImport -> IMPORTLIBRARY PATH AS ID . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 149

state 101

    (25) nodeEnd -> ENDFUNCTION maybeMetaType . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 150

state 102

    (26) nodeEnd -> ENDDEF maybeMetaType . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 151

state 103

    (27) nodeEnd -> ENDF maybeMetaType . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 152

state 104

    (52) uncontrolledSegment -> directiveName maybeMetaType skip .
    DO_NOTHING      reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    UNSAFE          reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    CONCLUDE        reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    IF              reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    REPEAT          reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RESET           reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RETURN          reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    CHANCE          reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    [               reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    FUNCTION        reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    FUNCTION_START  reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_ACTION       reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_CALL         reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_DIRECTIVE    reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    META            reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    LINESKIP        reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDFUNCTION     reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDDEF          reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDF            reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDWITH         reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDIF           reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSE            reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELIF            reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSEC           reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSECHANCE      reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDCHANCEWITH   reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDCWITH        reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDCHANCE       reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDC            reduce using rule 52 (uncontrolledSegment -> directiveName maybeMetaType skip .)


state 105

    (72) metaType -> META metaparams .
    LINESKIP        reduce using rule 72 (metaType -> META metaparams .)


state 106

    (106) metaparams -> metaparamPair . , metaparams
    (107) metaparams -> metaparamPair .
    ,               shift and go to state 153
    LINESKIP        reduce using rule 107 (metaparams -> metaparamPair .)


state 107

    (108) metaparamPair -> id . : numericSymbol
    :               shift and go to state 154


state 108

    (54) actionTypeStart -> maybeActionType maybeCallType . maybeDirectiveType maybeMetaType skip
    (61) maybeDirectiveType -> . empty
    (62) maybeDirectiveType -> . directiveType
    (130) empty -> .
    (71) directiveType -> . DO_DIRECTIVE directiveName
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    shift and go to state 158

    maybeDirectiveType             shift and go to state 155
    empty                          shift and go to state 156
    directiveType                  shift and go to state 157

state 109

    (59) maybeCallType -> empty .
    DO_DIRECTIVE    reduce using rule 59 (maybeCallType -> empty .)
    META            reduce using rule 59 (maybeCallType -> empty .)
    LINESKIP        reduce using rule 59 (maybeCallType -> empty .)


state 110

    (60) maybeCallType -> callType .
    DO_DIRECTIVE    reduce using rule 60 (maybeCallType -> callType .)
    META            reduce using rule 60 (maybeCallType -> callType .)
    LINESKIP        reduce using rule 60 (maybeCallType -> callType .)


state 111

    (70) callType -> DO_CALL . callName
    (99) callName -> . CALL
    (100) callName -> . id
    (101) callName -> . id . CALL
    (102) callName -> . id . id
    (127) id -> . ID
    CALL            shift and go to state 160
    ID              shift and go to state 19

    callName                       shift and go to state 159
    id                             shift and go to state 161

state 112

    (68) actionType -> DO_ACTION actionLiteral . actionParens
    (91) actionParens -> . ( maybeActionParams )
    (               shift and go to state 163

    actionParens                   shift and go to state 162

state 113

    (69) actionType -> DO_ACTION actionName . actionParens
    (91) actionParens -> . ( maybeActionParams )
    (               shift and go to state 163

    actionParens                   shift and go to state 164

state 114

    (98) actionLiteral -> ACTION .
    (               reduce using rule 98 (actionLiteral -> ACTION .)


state 115

    (96) actionName -> id .
    (97) actionName -> id . . id
    (               reduce using rule 96 (actionName -> id .)
    .               shift and go to state 165


state 116

    (47) conditional -> IF uncontrolledSegment nodeBody . conditionalTerminator
    (48) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (49) conditionalTerminator -> . ENDIF skip
    (50) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (51) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 167
    ENDIF           shift and go to state 168
    ELSE            shift and go to state 169
    ELIF            shift and go to state 170

    conditionalTerminator          shift and go to state 166

state 117

    (34) chance -> chanceHeader actionTypeStart nodeBody . chanceBody uncontrolledSegment nodeBody optionalChance
    (43) chanceBody -> . elsechance ( id )
    (44) chanceBody -> . elsechance ( numeric )
    (45) elsechance -> . ELSEC
    (46) elsechance -> . ELSECHANCE
    ELSEC           shift and go to state 173
    ELSECHANCE      shift and go to state 174

    chanceBody                     shift and go to state 171
    elsechance                     shift and go to state 172

state 118

    (41) chanceHeader -> CHANCE ( id . )
    )               shift and go to state 175


state 119

    (42) chanceHeader -> CHANCE ( numeric . )
    )               shift and go to state 176


state 120

    (109) registerType -> [ registerContent ] .
    DO_ACTION       reduce using rule 109 (registerType -> [ registerContent ] .)
    DO_CALL         reduce using rule 109 (registerType -> [ registerContent ] .)
    DO_DIRECTIVE    reduce using rule 109 (registerType -> [ registerContent ] .)
    META            reduce using rule 109 (registerType -> [ registerContent ] .)
    LINESKIP        reduce using rule 109 (registerType -> [ registerContent ] .)


state 121

    (110) registerContent -> regRef regComp . regVal
    (122) regVal -> . numericSymbol
    (123) numericSymbol -> . numeric
    (124) numericSymbol -> . id
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    (127) id -> . ID
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 19

    regVal                         shift and go to state 177
    numericSymbol                  shift and go to state 178
    numeric                        shift and go to state 133
    id                             shift and go to state 179

state 122

    (111) registerContent -> regRef regOp .
    ]               reduce using rule 111 (registerContent -> regRef regOp .)


state 123

    (114) regComp -> NEQ .
    HEXNUMBER       reduce using rule 114 (regComp -> NEQ .)
    NUMBER          reduce using rule 114 (regComp -> NEQ .)
    ID              reduce using rule 114 (regComp -> NEQ .)


state 124

    (115) regComp -> GT .
    HEXNUMBER       reduce using rule 115 (regComp -> GT .)
    NUMBER          reduce using rule 115 (regComp -> GT .)
    ID              reduce using rule 115 (regComp -> GT .)


state 125

    (116) regComp -> GEQ .
    HEXNUMBER       reduce using rule 116 (regComp -> GEQ .)
    NUMBER          reduce using rule 116 (regComp -> GEQ .)
    ID              reduce using rule 116 (regComp -> GEQ .)


state 126

    (117) regComp -> LT .
    HEXNUMBER       reduce using rule 117 (regComp -> LT .)
    NUMBER          reduce using rule 117 (regComp -> LT .)
    ID              reduce using rule 117 (regComp -> LT .)


state 127

    (118) regComp -> LEQ .
    HEXNUMBER       reduce using rule 118 (regComp -> LEQ .)
    NUMBER          reduce using rule 118 (regComp -> LEQ .)
    ID              reduce using rule 118 (regComp -> LEQ .)


state 128

    (119) regComp -> EQ .
    HEXNUMBER       reduce using rule 119 (regComp -> EQ .)
    NUMBER          reduce using rule 119 (regComp -> EQ .)
    ID              reduce using rule 119 (regComp -> EQ .)


state 129

    (112) regOp -> RESET .
    ]               reduce using rule 112 (regOp -> RESET .)


state 130

    (113) regOp -> INCREMENT .
    ]               reduce using rule 113 (regOp -> INCREMENT .)


state 131

    (87) funcParens -> ( numericSymbol . commaPrefacedId )
    (89) commaPrefacedId -> . , numericSymbol commaPrefacedId
    (90) commaPrefacedId -> . empty
    (130) empty -> .
    ,               shift and go to state 181
    )               reduce using rule 130 (empty -> .)

    commaPrefacedId                shift and go to state 180
    empty                          shift and go to state 182

state 132

    (88) funcParens -> ( id . . id maybeDotID )
    (124) numericSymbol -> id .
    .               shift and go to state 183
    ,               reduce using rule 124 (numericSymbol -> id .)
    )               reduce using rule 124 (numericSymbol -> id .)


state 133

    (123) numericSymbol -> numeric .
    ,               reduce using rule 123 (numericSymbol -> numeric .)
    )               reduce using rule 123 (numericSymbol -> numeric .)
    ]               reduce using rule 123 (numericSymbol -> numeric .)
    LINESKIP        reduce using rule 123 (numericSymbol -> numeric .)


state 134

    (73) functionName -> FUNCTION_START id maybeParens . maybeSubFunction
    (76) maybeSubFunction -> . . id parens maybeSubFunction
    (77) maybeSubFunction -> . . id maybeParens
    .               shift and go to state 185

    maybeSubFunction               shift and go to state 184

state 135

    (74) functionName -> FUNCTION_START id parens .
    (79) maybeParens -> parens .
    DO_ACTION       reduce using rule 74 (functionName -> FUNCTION_START id parens .)
    DO_CALL         reduce using rule 74 (functionName -> FUNCTION_START id parens .)
    DO_DIRECTIVE    reduce using rule 74 (functionName -> FUNCTION_START id parens .)
    META            reduce using rule 74 (functionName -> FUNCTION_START id parens .)
    LINESKIP        reduce using rule 74 (functionName -> FUNCTION_START id parens .)
    .               reduce using rule 79 (maybeParens -> parens .)


state 136

    (78) maybeParens -> empty .
    .               reduce using rule 78 (maybeParens -> empty .)
    DO_ACTION       reduce using rule 78 (maybeParens -> empty .)
    DO_CALL         reduce using rule 78 (maybeParens -> empty .)
    DO_DIRECTIVE    reduce using rule 78 (maybeParens -> empty .)
    META            reduce using rule 78 (maybeParens -> empty .)
    LINESKIP        reduce using rule 78 (maybeParens -> empty .)


state 137

    (80) parens -> funcParens .
    DO_ACTION       reduce using rule 80 (parens -> funcParens .)
    DO_CALL         reduce using rule 80 (parens -> funcParens .)
    DO_DIRECTIVE    reduce using rule 80 (parens -> funcParens .)
    META            reduce using rule 80 (parens -> funcParens .)
    LINESKIP        reduce using rule 80 (parens -> funcParens .)
    .               reduce using rule 80 (parens -> funcParens .)


state 138

    (81) parens -> ( . )
    (87) funcParens -> ( . numericSymbol commaPrefacedId )
    (88) funcParens -> ( . id . id maybeDotID )
    (123) numericSymbol -> . numeric
    (124) numericSymbol -> . id
    (127) id -> . ID
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    )               shift and go to state 186
    ID              shift and go to state 19
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numericSymbol                  shift and go to state 131
    id                             shift and go to state 132
    numeric                        shift and go to state 133

state 139

    (16) defHeader -> DEF id nodeAlias nodeIndex . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 187

state 140

    (19) nodeIndex -> empty .
    LINESKIP        reduce using rule 19 (nodeIndex -> empty .)


state 141

    (20) nodeIndex -> META . numeric
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numeric                        shift and go to state 188

state 142

    (21) nodeIndex -> : . numeric META numeric
    (22) nodeIndex -> : . numeric
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numeric                        shift and go to state 189

state 143

    (18) nodeAlias -> & id . nodeAlias
    (17) nodeAlias -> . empty
    (18) nodeAlias -> . & id nodeAlias
    (130) empty -> .
    &               shift and go to state 93
    META            reduce using rule 130 (empty -> .)
    :               reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)

    nodeAlias                      shift and go to state 190
    empty                          shift and go to state 92

state 144

    (11) registerDeclaration -> REGISTER id AS REG skip .
    REGISTER        reduce using rule 11 (registerDeclaration -> REGISTER id AS REG skip .)
    IMPORTACTIONS   reduce using rule 11 (registerDeclaration -> REGISTER id AS REG skip .)
    IMPORTLIBRARY   reduce using rule 11 (registerDeclaration -> REGISTER id AS REG skip .)
    DEF             reduce using rule 11 (registerDeclaration -> REGISTER id AS REG skip .)
    $end            reduce using rule 11 (registerDeclaration -> REGISTER id AS REG skip .)


state 145

    (9) actionImport -> IMPORTACTIONS ID AS ID skip .
    REGISTER        reduce using rule 9 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    IMPORTACTIONS   reduce using rule 9 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    IMPORTLIBRARY   reduce using rule 9 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    DEF             reduce using rule 9 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    $end            reduce using rule 9 (actionImport -> IMPORTACTIONS ID AS ID skip .)


state 146

    (10) actionImport -> IMPORTACTIONS PATH AS ID skip .
    REGISTER        reduce using rule 10 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    IMPORTACTIONS   reduce using rule 10 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    IMPORTLIBRARY   reduce using rule 10 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    DEF             reduce using rule 10 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    $end            reduce using rule 10 (actionImport -> IMPORTACTIONS PATH AS ID skip .)


state 147

    (6) libraryImport -> IMPORTLIBRARY numeric AS ID skip .
    REGISTER        reduce using rule 6 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    IMPORTACTIONS   reduce using rule 6 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    IMPORTLIBRARY   reduce using rule 6 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    DEF             reduce using rule 6 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    $end            reduce using rule 6 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)


state 148

    (7) libraryImport -> IMPORTLIBRARY ID AS ID skip .
    REGISTER        reduce using rule 7 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    IMPORTACTIONS   reduce using rule 7 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    IMPORTLIBRARY   reduce using rule 7 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    DEF             reduce using rule 7 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    $end            reduce using rule 7 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)


state 149

    (8) libraryImport -> IMPORTLIBRARY PATH AS ID skip .
    REGISTER        reduce using rule 8 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    IMPORTACTIONS   reduce using rule 8 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    IMPORTLIBRARY   reduce using rule 8 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    DEF             reduce using rule 8 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    $end            reduce using rule 8 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)


state 150

    (25) nodeEnd -> ENDFUNCTION maybeMetaType skip .
    DEF             reduce using rule 25 (nodeEnd -> ENDFUNCTION maybeMetaType skip .)
    $end            reduce using rule 25 (nodeEnd -> ENDFUNCTION maybeMetaType skip .)


state 151

    (26) nodeEnd -> ENDDEF maybeMetaType skip .
    DEF             reduce using rule 26 (nodeEnd -> ENDDEF maybeMetaType skip .)
    $end            reduce using rule 26 (nodeEnd -> ENDDEF maybeMetaType skip .)


state 152

    (27) nodeEnd -> ENDF maybeMetaType skip .
    DEF             reduce using rule 27 (nodeEnd -> ENDF maybeMetaType skip .)
    $end            reduce using rule 27 (nodeEnd -> ENDF maybeMetaType skip .)


state 153

    (106) metaparams -> metaparamPair , . metaparams
    (106) metaparams -> . metaparamPair , metaparams
    (107) metaparams -> . metaparamPair
    (108) metaparamPair -> . id : numericSymbol
    (127) id -> . ID
    ID              shift and go to state 19

    metaparamPair                  shift and go to state 106
    metaparams                     shift and go to state 191
    id                             shift and go to state 107

state 154

    (108) metaparamPair -> id : . numericSymbol
    (123) numericSymbol -> . numeric
    (124) numericSymbol -> . id
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    (127) id -> . ID
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 19

    id                             shift and go to state 179
    numericSymbol                  shift and go to state 192
    numeric                        shift and go to state 133

state 155

    (54) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType . maybeMetaType skip
    (63) maybeMetaType -> . empty
    (64) maybeMetaType -> . metaType
    (130) empty -> .
    (72) metaType -> . META metaparams
    LINESKIP        reduce using rule 130 (empty -> .)
    META            shift and go to state 73

    maybeMetaType                  shift and go to state 193
    empty                          shift and go to state 71
    metaType                       shift and go to state 72

state 156

    (61) maybeDirectiveType -> empty .
    META            reduce using rule 61 (maybeDirectiveType -> empty .)
    LINESKIP        reduce using rule 61 (maybeDirectiveType -> empty .)


state 157

    (62) maybeDirectiveType -> directiveType .
    META            reduce using rule 62 (maybeDirectiveType -> directiveType .)
    LINESKIP        reduce using rule 62 (maybeDirectiveType -> directiveType .)


state 158

    (71) directiveType -> DO_DIRECTIVE . directiveName
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43

    directiveName                  shift and go to state 194

state 159

    (70) callType -> DO_CALL callName .
    DO_DIRECTIVE    reduce using rule 70 (callType -> DO_CALL callName .)
    META            reduce using rule 70 (callType -> DO_CALL callName .)
    LINESKIP        reduce using rule 70 (callType -> DO_CALL callName .)


state 160

    (99) callName -> CALL .
    DO_DIRECTIVE    reduce using rule 99 (callName -> CALL .)
    META            reduce using rule 99 (callName -> CALL .)
    LINESKIP        reduce using rule 99 (callName -> CALL .)


state 161

    (100) callName -> id .
    (101) callName -> id . . CALL
    (102) callName -> id . . id
    DO_DIRECTIVE    reduce using rule 100 (callName -> id .)
    META            reduce using rule 100 (callName -> id .)
    LINESKIP        reduce using rule 100 (callName -> id .)
    .               shift and go to state 195


state 162

    (68) actionType -> DO_ACTION actionLiteral actionParens .
    DO_CALL         reduce using rule 68 (actionType -> DO_ACTION actionLiteral actionParens .)
    DO_DIRECTIVE    reduce using rule 68 (actionType -> DO_ACTION actionLiteral actionParens .)
    META            reduce using rule 68 (actionType -> DO_ACTION actionLiteral actionParens .)
    LINESKIP        reduce using rule 68 (actionType -> DO_ACTION actionLiteral actionParens .)


state 163

    (91) actionParens -> ( . maybeActionParams )
    (92) maybeActionParams -> . numeric maybeMoreActionParams
    (93) maybeActionParams -> . empty
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    (130) empty -> .
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26
    )               reduce using rule 130 (empty -> .)

    maybeActionParams              shift and go to state 196
    numeric                        shift and go to state 197
    empty                          shift and go to state 198

state 164

    (69) actionType -> DO_ACTION actionName actionParens .
    DO_CALL         reduce using rule 69 (actionType -> DO_ACTION actionName actionParens .)
    DO_DIRECTIVE    reduce using rule 69 (actionType -> DO_ACTION actionName actionParens .)
    META            reduce using rule 69 (actionType -> DO_ACTION actionName actionParens .)
    LINESKIP        reduce using rule 69 (actionType -> DO_ACTION actionName actionParens .)


state 165

    (97) actionName -> id . . id
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 199

state 166

    (47) conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    IF              reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RESET           reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RETURN          reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    CHANCE          reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    [               reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    META            reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDF            reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSE            reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELIF            reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSEC           reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSECHANCE      reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDCHANCEWITH   reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDCWITH        reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDCHANCE       reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDC            reduce using rule 47 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)


state 167

    (48) conditionalTerminator -> ENDWITH . uncontrolledSegment
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (130) empty -> .
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 200
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    empty                          shift and go to state 69
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 168

    (49) conditionalTerminator -> ENDIF . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 201

state 169

    (50) conditionalTerminator -> ELSE . actionTypeStart nodeBody conditionalTerminator
    (54) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (57) maybeActionType -> . empty
    (58) maybeActionType -> . actionType
    (130) empty -> .
    (68) actionType -> . DO_ACTION actionLiteral actionParens
    (69) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_ACTION       shift and go to state 78

    actionTypeStart                shift and go to state 202
    maybeActionType                shift and go to state 75
    empty                          shift and go to state 76
    actionType                     shift and go to state 77

state 170

    (51) conditionalTerminator -> ELIF . functionType actionTypeStart nodeBody conditionalTerminator
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    functionType                   shift and go to state 203
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 171

    (34) chance -> chanceHeader actionTypeStart nodeBody chanceBody . uncontrolledSegment nodeBody optionalChance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (130) empty -> .
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 204
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    empty                          shift and go to state 69
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 172

    (43) chanceBody -> elsechance . ( id )
    (44) chanceBody -> elsechance . ( numeric )
    (               shift and go to state 205


state 173

    (45) elsechance -> ELSEC .
    (               reduce using rule 45 (elsechance -> ELSEC .)


state 174

    (46) elsechance -> ELSECHANCE .
    (               reduce using rule 46 (elsechance -> ELSECHANCE .)


state 175

    (41) chanceHeader -> CHANCE ( id ) .
    DO_ACTION       reduce using rule 41 (chanceHeader -> CHANCE ( id ) .)
    DO_CALL         reduce using rule 41 (chanceHeader -> CHANCE ( id ) .)
    DO_DIRECTIVE    reduce using rule 41 (chanceHeader -> CHANCE ( id ) .)
    META            reduce using rule 41 (chanceHeader -> CHANCE ( id ) .)
    LINESKIP        reduce using rule 41 (chanceHeader -> CHANCE ( id ) .)


state 176

    (42) chanceHeader -> CHANCE ( numeric ) .
    DO_ACTION       reduce using rule 42 (chanceHeader -> CHANCE ( numeric ) .)
    DO_CALL         reduce using rule 42 (chanceHeader -> CHANCE ( numeric ) .)
    DO_DIRECTIVE    reduce using rule 42 (chanceHeader -> CHANCE ( numeric ) .)
    META            reduce using rule 42 (chanceHeader -> CHANCE ( numeric ) .)
    LINESKIP        reduce using rule 42 (chanceHeader -> CHANCE ( numeric ) .)


state 177

    (110) registerContent -> regRef regComp regVal .
    ]               reduce using rule 110 (registerContent -> regRef regComp regVal .)


state 178

    (122) regVal -> numericSymbol .
    ]               reduce using rule 122 (regVal -> numericSymbol .)


state 179

    (124) numericSymbol -> id .
    ]               reduce using rule 124 (numericSymbol -> id .)
    ,               reduce using rule 124 (numericSymbol -> id .)
    LINESKIP        reduce using rule 124 (numericSymbol -> id .)
    )               reduce using rule 124 (numericSymbol -> id .)


state 180

    (87) funcParens -> ( numericSymbol commaPrefacedId . )
    )               shift and go to state 206


state 181

    (89) commaPrefacedId -> , . numericSymbol commaPrefacedId
    (123) numericSymbol -> . numeric
    (124) numericSymbol -> . id
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    (127) id -> . ID
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26
    ID              shift and go to state 19

    numericSymbol                  shift and go to state 207
    numeric                        shift and go to state 133
    id                             shift and go to state 179

state 182

    (90) commaPrefacedId -> empty .
    )               reduce using rule 90 (commaPrefacedId -> empty .)


state 183

    (88) funcParens -> ( id . . id maybeDotID )
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 208

state 184

    (73) functionName -> FUNCTION_START id maybeParens maybeSubFunction .
    DO_ACTION       reduce using rule 73 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    DO_CALL         reduce using rule 73 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    DO_DIRECTIVE    reduce using rule 73 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    META            reduce using rule 73 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    LINESKIP        reduce using rule 73 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)


state 185

    (76) maybeSubFunction -> . . id parens maybeSubFunction
    (77) maybeSubFunction -> . . id maybeParens
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 209

state 186

    (81) parens -> ( ) .
    DO_ACTION       reduce using rule 81 (parens -> ( ) .)
    DO_CALL         reduce using rule 81 (parens -> ( ) .)
    DO_DIRECTIVE    reduce using rule 81 (parens -> ( ) .)
    META            reduce using rule 81 (parens -> ( ) .)
    LINESKIP        reduce using rule 81 (parens -> ( ) .)
    .               reduce using rule 81 (parens -> ( ) .)


state 187

    (16) defHeader -> DEF id nodeAlias nodeIndex skip .
    DO_NOTHING      reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    UNSAFE          reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    CONCLUDE        reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    IF              reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    REPEAT          reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RESET           reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RETURN          reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    CHANCE          reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    [               reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    FUNCTION        reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    FUNCTION_START  reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDFUNCTION     reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDDEF          reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDF            reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_ACTION       reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_CALL         reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_DIRECTIVE    reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    META            reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    LINESKIP        reduce using rule 16 (defHeader -> DEF id nodeAlias nodeIndex skip .)


state 188

    (20) nodeIndex -> META numeric .
    LINESKIP        reduce using rule 20 (nodeIndex -> META numeric .)


state 189

    (21) nodeIndex -> : numeric . META numeric
    (22) nodeIndex -> : numeric .
    META            shift and go to state 210
    LINESKIP        reduce using rule 22 (nodeIndex -> : numeric .)


state 190

    (18) nodeAlias -> & id nodeAlias .
    META            reduce using rule 18 (nodeAlias -> & id nodeAlias .)
    :               reduce using rule 18 (nodeAlias -> & id nodeAlias .)
    LINESKIP        reduce using rule 18 (nodeAlias -> & id nodeAlias .)


state 191

    (106) metaparams -> metaparamPair , metaparams .
    LINESKIP        reduce using rule 106 (metaparams -> metaparamPair , metaparams .)


state 192

    (108) metaparamPair -> id : numericSymbol .
    ,               reduce using rule 108 (metaparamPair -> id : numericSymbol .)
    LINESKIP        reduce using rule 108 (metaparamPair -> id : numericSymbol .)


state 193

    (54) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 211

state 194

    (71) directiveType -> DO_DIRECTIVE directiveName .
    META            reduce using rule 71 (directiveType -> DO_DIRECTIVE directiveName .)
    LINESKIP        reduce using rule 71 (directiveType -> DO_DIRECTIVE directiveName .)


state 195

    (101) callName -> id . . CALL
    (102) callName -> id . . id
    (127) id -> . ID
    CALL            shift and go to state 213
    ID              shift and go to state 19

    id                             shift and go to state 212

state 196

    (91) actionParens -> ( maybeActionParams . )
    )               shift and go to state 214


state 197

    (92) maybeActionParams -> numeric . maybeMoreActionParams
    (94) maybeMoreActionParams -> . , numeric maybeMoreActionParams
    (95) maybeMoreActionParams -> . empty
    (130) empty -> .
    ,               shift and go to state 216
    )               reduce using rule 130 (empty -> .)

    maybeMoreActionParams          shift and go to state 215
    empty                          shift and go to state 217

state 198

    (93) maybeActionParams -> empty .
    )               reduce using rule 93 (maybeActionParams -> empty .)


state 199

    (97) actionName -> id . id .
    (               reduce using rule 97 (actionName -> id . id .)


state 200

    (48) conditionalTerminator -> ENDWITH uncontrolledSegment .
    DO_NOTHING      reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    UNSAFE          reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    CONCLUDE        reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    IF              reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    REPEAT          reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RESET           reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RETURN          reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    CHANCE          reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    [               reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    FUNCTION        reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    FUNCTION_START  reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_ACTION       reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_CALL         reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    META            reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    LINESKIP        reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDDEF          reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDF            reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDWITH         reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDIF           reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSE            reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELIF            reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSEC           reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSECHANCE      reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDCHANCEWITH   reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDCWITH        reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDCHANCE       reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDC            reduce using rule 48 (conditionalTerminator -> ENDWITH uncontrolledSegment .)


state 201

    (49) conditionalTerminator -> ENDIF skip .
    DO_NOTHING      reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    UNSAFE          reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    CONCLUDE        reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    IF              reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    REPEAT          reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    RESET           reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    RETURN          reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    CHANCE          reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    [               reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    FUNCTION        reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    FUNCTION_START  reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    DO_ACTION       reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    DO_CALL         reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    DO_DIRECTIVE    reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    META            reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    LINESKIP        reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDFUNCTION     reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDDEF          reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDF            reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDWITH         reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDIF           reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ELSE            reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ELIF            reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ELSEC           reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ELSECHANCE      reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDCHANCEWITH   reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDCWITH        reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDCHANCE       reduce using rule 49 (conditionalTerminator -> ENDIF skip .)
    ENDC            reduce using rule 49 (conditionalTerminator -> ENDIF skip .)


state 202

    (50) conditionalTerminator -> ELSE actionTypeStart . nodeBody conditionalTerminator
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 130 (empty -> .)
    ENDIF           reduce using rule 130 (empty -> .)
    ELSE            reduce using rule 130 (empty -> .)
    ELIF            reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    nodeBody                       shift and go to state 218
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    uncontrolledSegment            shift and go to state 33
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    chanceHeader                   shift and go to state 40
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 203

    (51) conditionalTerminator -> ELIF functionType . actionTypeStart nodeBody conditionalTerminator
    (54) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (57) maybeActionType -> . empty
    (58) maybeActionType -> . actionType
    (130) empty -> .
    (68) actionType -> . DO_ACTION actionLiteral actionParens
    (69) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_ACTION       shift and go to state 78

    actionTypeStart                shift and go to state 219
    maybeActionType                shift and go to state 75
    empty                          shift and go to state 76
    actionType                     shift and go to state 77

state 204

    (34) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment . nodeBody optionalChance
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDCHANCEWITH   reduce using rule 130 (empty -> .)
    ENDCWITH        reduce using rule 130 (empty -> .)
    ENDCHANCE       reduce using rule 130 (empty -> .)
    ENDC            reduce using rule 130 (empty -> .)
    ELSEC           reduce using rule 130 (empty -> .)
    ELSECHANCE      reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    chanceHeader                   shift and go to state 40
    nodeBody                       shift and go to state 220
    uncontrolledSegment            shift and go to state 33
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 205

    (43) chanceBody -> elsechance ( . id )
    (44) chanceBody -> elsechance ( . numeric )
    (127) id -> . ID
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    ID              shift and go to state 19
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    id                             shift and go to state 221
    numeric                        shift and go to state 222

state 206

    (87) funcParens -> ( numericSymbol commaPrefacedId ) .
    DO_ACTION       reduce using rule 87 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    DO_CALL         reduce using rule 87 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    DO_DIRECTIVE    reduce using rule 87 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    META            reduce using rule 87 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    LINESKIP        reduce using rule 87 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    .               reduce using rule 87 (funcParens -> ( numericSymbol commaPrefacedId ) .)


state 207

    (89) commaPrefacedId -> , numericSymbol . commaPrefacedId
    (89) commaPrefacedId -> . , numericSymbol commaPrefacedId
    (90) commaPrefacedId -> . empty
    (130) empty -> .
    ,               shift and go to state 181
    )               reduce using rule 130 (empty -> .)

    commaPrefacedId                shift and go to state 223
    empty                          shift and go to state 182

state 208

    (88) funcParens -> ( id . id . maybeDotID )
    (85) maybeDotID -> . . id maybeDotID
    (86) maybeDotID -> . empty
    (130) empty -> .
    .               shift and go to state 224
    )               reduce using rule 130 (empty -> .)

    maybeDotID                     shift and go to state 225
    empty                          shift and go to state 226

state 209

    (76) maybeSubFunction -> . id . parens maybeSubFunction
    (77) maybeSubFunction -> . id . maybeParens
    (80) parens -> . funcParens
    (81) parens -> . ( )
    (78) maybeParens -> . empty
    (79) maybeParens -> . parens
    (87) funcParens -> . ( numericSymbol commaPrefacedId )
    (88) funcParens -> . ( id . id maybeDotID )
    (130) empty -> .
    (               shift and go to state 138
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)

    parens                         shift and go to state 227
    maybeParens                    shift and go to state 228
    funcParens                     shift and go to state 137
    empty                          shift and go to state 136

state 210

    (21) nodeIndex -> : numeric META . numeric
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numeric                        shift and go to state 229

state 211

    (54) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .
    DO_NOTHING      reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    UNSAFE          reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    CONCLUDE        reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    IF              reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    REPEAT          reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RESET           reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RETURN          reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    CHANCE          reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    [               reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    FUNCTION        reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    FUNCTION_START  reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_ACTION       reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_CALL         reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_DIRECTIVE    reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    META            reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    LINESKIP        reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDFUNCTION     reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDDEF          reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDF            reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDWITH         reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDIF           reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSE            reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELIF            reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSEC           reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSECHANCE      reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDCHANCEWITH   reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDCWITH        reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDCHANCE       reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDC            reduce using rule 54 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)


state 212

    (102) callName -> id . id .
    DO_DIRECTIVE    reduce using rule 102 (callName -> id . id .)
    META            reduce using rule 102 (callName -> id . id .)
    LINESKIP        reduce using rule 102 (callName -> id . id .)


state 213

    (101) callName -> id . CALL .
    DO_DIRECTIVE    reduce using rule 101 (callName -> id . CALL .)
    META            reduce using rule 101 (callName -> id . CALL .)
    LINESKIP        reduce using rule 101 (callName -> id . CALL .)


state 214

    (91) actionParens -> ( maybeActionParams ) .
    DO_CALL         reduce using rule 91 (actionParens -> ( maybeActionParams ) .)
    DO_DIRECTIVE    reduce using rule 91 (actionParens -> ( maybeActionParams ) .)
    META            reduce using rule 91 (actionParens -> ( maybeActionParams ) .)
    LINESKIP        reduce using rule 91 (actionParens -> ( maybeActionParams ) .)


state 215

    (92) maybeActionParams -> numeric maybeMoreActionParams .
    )               reduce using rule 92 (maybeActionParams -> numeric maybeMoreActionParams .)


state 216

    (94) maybeMoreActionParams -> , . numeric maybeMoreActionParams
    (125) numeric -> . HEXNUMBER
    (126) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 25
    NUMBER          shift and go to state 26

    numeric                        shift and go to state 230

state 217

    (95) maybeMoreActionParams -> empty .
    )               reduce using rule 95 (maybeMoreActionParams -> empty .)


state 218

    (50) conditionalTerminator -> ELSE actionTypeStart nodeBody . conditionalTerminator
    (48) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (49) conditionalTerminator -> . ENDIF skip
    (50) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (51) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 167
    ENDIF           shift and go to state 168
    ELSE            shift and go to state 169
    ELIF            shift and go to state 170

    conditionalTerminator          shift and go to state 231

state 219

    (51) conditionalTerminator -> ELIF functionType actionTypeStart . nodeBody conditionalTerminator
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 130 (empty -> .)
    ENDIF           reduce using rule 130 (empty -> .)
    ELSE            reduce using rule 130 (empty -> .)
    ELIF            reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    functionType                   shift and go to state 44
    nodeBody                       shift and go to state 232
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    uncontrolledSegment            shift and go to state 33
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    chanceHeader                   shift and go to state 40
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 220

    (34) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody . optionalChance
    (35) optionalChance -> . optionalTerminator
    (36) optionalChance -> . chanceBody actionTypeStart nodeBody optionalChance
    (37) optionalTerminator -> . ENDCHANCEWITH uncontrolledSegment skip
    (38) optionalTerminator -> . ENDCWITH uncontrolledSegment skip
    (39) optionalTerminator -> . ENDCHANCE skip
    (40) optionalTerminator -> . ENDC skip
    (43) chanceBody -> . elsechance ( id )
    (44) chanceBody -> . elsechance ( numeric )
    (45) elsechance -> . ELSEC
    (46) elsechance -> . ELSECHANCE
    ENDCHANCEWITH   shift and go to state 236
    ENDCWITH        shift and go to state 237
    ENDCHANCE       shift and go to state 238
    ENDC            shift and go to state 239
    ELSEC           shift and go to state 173
    ELSECHANCE      shift and go to state 174

    chanceBody                     shift and go to state 233
    optionalChance                 shift and go to state 234
    optionalTerminator             shift and go to state 235
    elsechance                     shift and go to state 172

state 221

    (43) chanceBody -> elsechance ( id . )
    )               shift and go to state 240


state 222

    (44) chanceBody -> elsechance ( numeric . )
    )               shift and go to state 241


state 223

    (89) commaPrefacedId -> , numericSymbol commaPrefacedId .
    )               reduce using rule 89 (commaPrefacedId -> , numericSymbol commaPrefacedId .)


state 224

    (85) maybeDotID -> . . id maybeDotID
    (127) id -> . ID
    ID              shift and go to state 19

    id                             shift and go to state 242

state 225

    (88) funcParens -> ( id . id maybeDotID . )
    )               shift and go to state 243


state 226

    (86) maybeDotID -> empty .
    )               reduce using rule 86 (maybeDotID -> empty .)


state 227

    (76) maybeSubFunction -> . id parens . maybeSubFunction
    (79) maybeParens -> parens .
    (76) maybeSubFunction -> . . id parens maybeSubFunction
    (77) maybeSubFunction -> . . id maybeParens
    DO_ACTION       reduce using rule 79 (maybeParens -> parens .)
    DO_CALL         reduce using rule 79 (maybeParens -> parens .)
    DO_DIRECTIVE    reduce using rule 79 (maybeParens -> parens .)
    META            reduce using rule 79 (maybeParens -> parens .)
    LINESKIP        reduce using rule 79 (maybeParens -> parens .)
    .               shift and go to state 185

    maybeSubFunction               shift and go to state 244

state 228

    (77) maybeSubFunction -> . id maybeParens .
    DO_ACTION       reduce using rule 77 (maybeSubFunction -> . id maybeParens .)
    DO_CALL         reduce using rule 77 (maybeSubFunction -> . id maybeParens .)
    DO_DIRECTIVE    reduce using rule 77 (maybeSubFunction -> . id maybeParens .)
    META            reduce using rule 77 (maybeSubFunction -> . id maybeParens .)
    LINESKIP        reduce using rule 77 (maybeSubFunction -> . id maybeParens .)


state 229

    (21) nodeIndex -> : numeric META numeric .
    LINESKIP        reduce using rule 21 (nodeIndex -> : numeric META numeric .)


state 230

    (94) maybeMoreActionParams -> , numeric . maybeMoreActionParams
    (94) maybeMoreActionParams -> . , numeric maybeMoreActionParams
    (95) maybeMoreActionParams -> . empty
    (130) empty -> .
    ,               shift and go to state 216
    )               reduce using rule 130 (empty -> .)

    maybeMoreActionParams          shift and go to state 245
    empty                          shift and go to state 217

state 231

    (50) conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    IF              reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RESET           reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RETURN          reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    CHANCE          reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    [               reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    META            reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDF            reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSE            reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELIF            reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSEC           reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSECHANCE      reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCEWITH   reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDCWITH        reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCE       reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDC            reduce using rule 50 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)


state 232

    (51) conditionalTerminator -> ELIF functionType actionTypeStart nodeBody . conditionalTerminator
    (48) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (49) conditionalTerminator -> . ENDIF skip
    (50) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (51) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 167
    ENDIF           shift and go to state 168
    ELSE            shift and go to state 169
    ELIF            shift and go to state 170

    conditionalTerminator          shift and go to state 246

state 233

    (36) optionalChance -> chanceBody . actionTypeStart nodeBody optionalChance
    (54) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (57) maybeActionType -> . empty
    (58) maybeActionType -> . actionType
    (130) empty -> .
    (68) actionType -> . DO_ACTION actionLiteral actionParens
    (69) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_ACTION       shift and go to state 78

    actionTypeStart                shift and go to state 247
    maybeActionType                shift and go to state 75
    empty                          shift and go to state 76
    actionType                     shift and go to state 77

state 234

    (34) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .
    DO_NOTHING      reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    UNSAFE          reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    CONCLUDE        reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    IF              reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    REPEAT          reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RESET           reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RETURN          reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    CHANCE          reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    [               reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    FUNCTION        reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    FUNCTION_START  reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_ACTION       reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_CALL         reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_DIRECTIVE    reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    META            reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    LINESKIP        reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDFUNCTION     reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDDEF          reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDF            reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDWITH         reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDIF           reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSE            reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELIF            reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSEC           reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSECHANCE      reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDCHANCEWITH   reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDCWITH        reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDCHANCE       reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDC            reduce using rule 34 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)


state 235

    (35) optionalChance -> optionalTerminator .
    DO_NOTHING      reduce using rule 35 (optionalChance -> optionalTerminator .)
    UNSAFE          reduce using rule 35 (optionalChance -> optionalTerminator .)
    CONCLUDE        reduce using rule 35 (optionalChance -> optionalTerminator .)
    IF              reduce using rule 35 (optionalChance -> optionalTerminator .)
    REPEAT          reduce using rule 35 (optionalChance -> optionalTerminator .)
    RESET           reduce using rule 35 (optionalChance -> optionalTerminator .)
    RETURN          reduce using rule 35 (optionalChance -> optionalTerminator .)
    CHANCE          reduce using rule 35 (optionalChance -> optionalTerminator .)
    [               reduce using rule 35 (optionalChance -> optionalTerminator .)
    FUNCTION        reduce using rule 35 (optionalChance -> optionalTerminator .)
    FUNCTION_START  reduce using rule 35 (optionalChance -> optionalTerminator .)
    DO_ACTION       reduce using rule 35 (optionalChance -> optionalTerminator .)
    DO_CALL         reduce using rule 35 (optionalChance -> optionalTerminator .)
    DO_DIRECTIVE    reduce using rule 35 (optionalChance -> optionalTerminator .)
    META            reduce using rule 35 (optionalChance -> optionalTerminator .)
    LINESKIP        reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDFUNCTION     reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDDEF          reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDF            reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDWITH         reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDIF           reduce using rule 35 (optionalChance -> optionalTerminator .)
    ELSE            reduce using rule 35 (optionalChance -> optionalTerminator .)
    ELIF            reduce using rule 35 (optionalChance -> optionalTerminator .)
    ELSEC           reduce using rule 35 (optionalChance -> optionalTerminator .)
    ELSECHANCE      reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDCHANCEWITH   reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDCWITH        reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDCHANCE       reduce using rule 35 (optionalChance -> optionalTerminator .)
    ENDC            reduce using rule 35 (optionalChance -> optionalTerminator .)


state 236

    (37) optionalTerminator -> ENDCHANCEWITH . uncontrolledSegment skip
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (130) empty -> .
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 248
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    empty                          shift and go to state 69
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 237

    (38) optionalTerminator -> ENDCWITH . uncontrolledSegment skip
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (130) empty -> .
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    uncontrolledSegment            shift and go to state 249
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    empty                          shift and go to state 69
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 238

    (39) optionalTerminator -> ENDCHANCE . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 250

state 239

    (40) optionalTerminator -> ENDC . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 251

state 240

    (43) chanceBody -> elsechance ( id ) .
    REPEAT          reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    RESET           reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    RETURN          reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    [               reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    FUNCTION        reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    FUNCTION_START  reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    DO_ACTION       reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    DO_CALL         reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    DO_DIRECTIVE    reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    META            reduce using rule 43 (chanceBody -> elsechance ( id ) .)
    LINESKIP        reduce using rule 43 (chanceBody -> elsechance ( id ) .)


state 241

    (44) chanceBody -> elsechance ( numeric ) .
    REPEAT          reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    RESET           reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    RETURN          reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    [               reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    FUNCTION        reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    FUNCTION_START  reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    DO_ACTION       reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    DO_CALL         reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    DO_DIRECTIVE    reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    META            reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)
    LINESKIP        reduce using rule 44 (chanceBody -> elsechance ( numeric ) .)


state 242

    (85) maybeDotID -> . id . maybeDotID
    (85) maybeDotID -> . . id maybeDotID
    (86) maybeDotID -> . empty
    (130) empty -> .
    .               shift and go to state 224
    )               reduce using rule 130 (empty -> .)

    maybeDotID                     shift and go to state 252
    empty                          shift and go to state 226

state 243

    (88) funcParens -> ( id . id maybeDotID ) .
    DO_ACTION       reduce using rule 88 (funcParens -> ( id . id maybeDotID ) .)
    DO_CALL         reduce using rule 88 (funcParens -> ( id . id maybeDotID ) .)
    DO_DIRECTIVE    reduce using rule 88 (funcParens -> ( id . id maybeDotID ) .)
    META            reduce using rule 88 (funcParens -> ( id . id maybeDotID ) .)
    LINESKIP        reduce using rule 88 (funcParens -> ( id . id maybeDotID ) .)
    .               reduce using rule 88 (funcParens -> ( id . id maybeDotID ) .)


state 244

    (76) maybeSubFunction -> . id parens maybeSubFunction .
    DO_ACTION       reduce using rule 76 (maybeSubFunction -> . id parens maybeSubFunction .)
    DO_CALL         reduce using rule 76 (maybeSubFunction -> . id parens maybeSubFunction .)
    DO_DIRECTIVE    reduce using rule 76 (maybeSubFunction -> . id parens maybeSubFunction .)
    META            reduce using rule 76 (maybeSubFunction -> . id parens maybeSubFunction .)
    LINESKIP        reduce using rule 76 (maybeSubFunction -> . id parens maybeSubFunction .)


state 245

    (94) maybeMoreActionParams -> , numeric maybeMoreActionParams .
    )               reduce using rule 94 (maybeMoreActionParams -> , numeric maybeMoreActionParams .)


state 246

    (51) conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    IF              reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RESET           reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RETURN          reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    CHANCE          reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    [               reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    META            reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDF            reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSE            reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELIF            reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSEC           reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSECHANCE      reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCEWITH   reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDCWITH        reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCE       reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDC            reduce using rule 51 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)


state 247

    (36) optionalChance -> chanceBody actionTypeStart . nodeBody optionalChance
    (23) nodeBody -> . empty
    (24) nodeBody -> . segment nodeBody
    (130) empty -> .
    (28) segment -> . DO_NOTHING skip
    (29) segment -> . UNSAFE skip
    (30) segment -> . uncontrolledSegment
    (31) segment -> . CONCLUDE uncontrolledSegment
    (32) segment -> . conditional
    (33) segment -> . chance
    (52) uncontrolledSegment -> . directiveName maybeMetaType skip
    (53) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (47) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (34) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (103) directiveName -> . REPEAT
    (104) directiveName -> . RESET
    (105) directiveName -> . RETURN
    (55) maybeFunctionType -> . empty
    (56) maybeFunctionType -> . functionType
    (41) chanceHeader -> . CHANCE ( id )
    (42) chanceHeader -> . CHANCE ( numeric )
    (65) functionType -> . registerType
    (66) functionType -> . functionLiteral
    (67) functionType -> . functionName
    (109) registerType -> . [ registerContent ]
    (82) functionLiteral -> . FUNCTION maybeFuncParens
    (73) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (74) functionName -> . FUNCTION_START id parens
    (75) functionName -> . FUNCTION_START id
    ENDCHANCEWITH   reduce using rule 130 (empty -> .)
    ENDCWITH        reduce using rule 130 (empty -> .)
    ENDCHANCE       reduce using rule 130 (empty -> .)
    ENDC            reduce using rule 130 (empty -> .)
    ELSEC           reduce using rule 130 (empty -> .)
    ELSECHANCE      reduce using rule 130 (empty -> .)
    DO_ACTION       reduce using rule 130 (empty -> .)
    DO_CALL         reduce using rule 130 (empty -> .)
    DO_DIRECTIVE    reduce using rule 130 (empty -> .)
    META            reduce using rule 130 (empty -> .)
    LINESKIP        reduce using rule 130 (empty -> .)
    DO_NOTHING      shift and go to state 31
    UNSAFE          shift and go to state 32
    CONCLUDE        shift and go to state 34
    IF              shift and go to state 39
    REPEAT          shift and go to state 41
    RESET           shift and go to state 42
    RETURN          shift and go to state 43
    CHANCE          shift and go to state 45
    [               shift and go to state 49
    FUNCTION        shift and go to state 50
    FUNCTION_START  shift and go to state 51

    nodeBody                       shift and go to state 253
    empty                          shift and go to state 29
    segment                        shift and go to state 30
    uncontrolledSegment            shift and go to state 33
    conditional                    shift and go to state 35
    chance                         shift and go to state 36
    directiveName                  shift and go to state 37
    maybeFunctionType              shift and go to state 38
    chanceHeader                   shift and go to state 40
    functionType                   shift and go to state 44
    registerType                   shift and go to state 46
    functionLiteral                shift and go to state 47
    functionName                   shift and go to state 48

state 248

    (37) optionalTerminator -> ENDCHANCEWITH uncontrolledSegment . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 254

state 249

    (38) optionalTerminator -> ENDCWITH uncontrolledSegment . skip
    (128) skip -> . LINESKIP skip
    (129) skip -> . LINESKIP
    LINESKIP        shift and go to state 55

    skip                           shift and go to state 255

state 250

    (39) optionalTerminator -> ENDCHANCE skip .
    DO_NOTHING      reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    UNSAFE          reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    CONCLUDE        reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    IF              reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    REPEAT          reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    RESET           reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    RETURN          reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    CHANCE          reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    [               reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    FUNCTION        reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    FUNCTION_START  reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    DO_ACTION       reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    DO_CALL         reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    DO_DIRECTIVE    reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    META            reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    LINESKIP        reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDFUNCTION     reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDDEF          reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDF            reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDWITH         reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDIF           reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ELSE            reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ELIF            reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ELSEC           reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ELSECHANCE      reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDCHANCEWITH   reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDCWITH        reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDCHANCE       reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)
    ENDC            reduce using rule 39 (optionalTerminator -> ENDCHANCE skip .)


state 251

    (40) optionalTerminator -> ENDC skip .
    DO_NOTHING      reduce using rule 40 (optionalTerminator -> ENDC skip .)
    UNSAFE          reduce using rule 40 (optionalTerminator -> ENDC skip .)
    CONCLUDE        reduce using rule 40 (optionalTerminator -> ENDC skip .)
    IF              reduce using rule 40 (optionalTerminator -> ENDC skip .)
    REPEAT          reduce using rule 40 (optionalTerminator -> ENDC skip .)
    RESET           reduce using rule 40 (optionalTerminator -> ENDC skip .)
    RETURN          reduce using rule 40 (optionalTerminator -> ENDC skip .)
    CHANCE          reduce using rule 40 (optionalTerminator -> ENDC skip .)
    [               reduce using rule 40 (optionalTerminator -> ENDC skip .)
    FUNCTION        reduce using rule 40 (optionalTerminator -> ENDC skip .)
    FUNCTION_START  reduce using rule 40 (optionalTerminator -> ENDC skip .)
    DO_ACTION       reduce using rule 40 (optionalTerminator -> ENDC skip .)
    DO_CALL         reduce using rule 40 (optionalTerminator -> ENDC skip .)
    DO_DIRECTIVE    reduce using rule 40 (optionalTerminator -> ENDC skip .)
    META            reduce using rule 40 (optionalTerminator -> ENDC skip .)
    LINESKIP        reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDFUNCTION     reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDDEF          reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDF            reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDWITH         reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDIF           reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ELSE            reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ELIF            reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ELSEC           reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ELSECHANCE      reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDCHANCEWITH   reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDCWITH        reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDCHANCE       reduce using rule 40 (optionalTerminator -> ENDC skip .)
    ENDC            reduce using rule 40 (optionalTerminator -> ENDC skip .)


state 252

    (85) maybeDotID -> . id maybeDotID .
    )               reduce using rule 85 (maybeDotID -> . id maybeDotID .)


state 253

    (36) optionalChance -> chanceBody actionTypeStart nodeBody . optionalChance
    (35) optionalChance -> . optionalTerminator
    (36) optionalChance -> . chanceBody actionTypeStart nodeBody optionalChance
    (37) optionalTerminator -> . ENDCHANCEWITH uncontrolledSegment skip
    (38) optionalTerminator -> . ENDCWITH uncontrolledSegment skip
    (39) optionalTerminator -> . ENDCHANCE skip
    (40) optionalTerminator -> . ENDC skip
    (43) chanceBody -> . elsechance ( id )
    (44) chanceBody -> . elsechance ( numeric )
    (45) elsechance -> . ELSEC
    (46) elsechance -> . ELSECHANCE
    ENDCHANCEWITH   shift and go to state 236
    ENDCWITH        shift and go to state 237
    ENDCHANCE       shift and go to state 238
    ENDC            shift and go to state 239
    ELSEC           shift and go to state 173
    ELSECHANCE      shift and go to state 174

    chanceBody                     shift and go to state 233
    optionalChance                 shift and go to state 256
    optionalTerminator             shift and go to state 235
    elsechance                     shift and go to state 172

state 254

    (37) optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .
    DO_NOTHING      reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    UNSAFE          reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    CONCLUDE        reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    IF              reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    REPEAT          reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    RESET           reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    RETURN          reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    CHANCE          reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    [               reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    FUNCTION        reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    FUNCTION_START  reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    DO_ACTION       reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    DO_CALL         reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    DO_DIRECTIVE    reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    META            reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    LINESKIP        reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDFUNCTION     reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDDEF          reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDF            reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDWITH         reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDIF           reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELSE            reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELIF            reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELSEC           reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELSECHANCE      reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDCHANCEWITH   reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDCWITH        reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDCHANCE       reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDC            reduce using rule 37 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)


state 255

    (38) optionalTerminator -> ENDCWITH uncontrolledSegment skip .
    DO_NOTHING      reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    UNSAFE          reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    CONCLUDE        reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    IF              reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    REPEAT          reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    RESET           reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    RETURN          reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    CHANCE          reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    [               reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    FUNCTION        reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    FUNCTION_START  reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    DO_ACTION       reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    DO_CALL         reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    DO_DIRECTIVE    reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    META            reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    LINESKIP        reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDFUNCTION     reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDDEF          reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDF            reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDWITH         reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDIF           reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELSE            reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELIF            reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELSEC           reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELSECHANCE      reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDCHANCEWITH   reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDCWITH        reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDCHANCE       reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDC            reduce using rule 38 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)


state 256

    (36) optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .
    DO_NOTHING      reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    UNSAFE          reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    CONCLUDE        reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    IF              reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    REPEAT          reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RESET           reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RETURN          reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    CHANCE          reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    [               reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    FUNCTION        reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    FUNCTION_START  reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_ACTION       reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_CALL         reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_DIRECTIVE    reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    META            reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    LINESKIP        reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDFUNCTION     reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDDEF          reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDF            reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDWITH         reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDIF           reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSE            reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELIF            reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSEC           reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSECHANCE      reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDCHANCEWITH   reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDCWITH        reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDCHANCE       reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDC            reduce using rule 36 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)


Conflicts:

shift/reduce conflict for LINESKIP in state 55 resolved as shift