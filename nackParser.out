Grammar:

Rule 0     S' -> nackFile
Rule 1     nackFile -> skip nackHeader nackBody
Rule 2     nackFile -> nackHeader nackBody
Rule 3     nackHeader -> assignment nackHeader
Rule 4     nackHeader -> registerDeclaration nackHeader
Rule 5     nackHeader -> actionImport nackHeader
Rule 6     nackHeader -> libraryImport nackHeader
Rule 7     nackHeader -> empty
Rule 8     libraryImport -> IMPORTLIBRARY numeric AS ID skip
Rule 9     libraryImport -> IMPORTLIBRARY ID AS ID skip
Rule 10    libraryImport -> IMPORTLIBRARY PATH AS ID skip
Rule 11    actionImport -> IMPORTACTIONS ID AS ID skip
Rule 12    actionImport -> IMPORTACTIONS PATH AS ID skip
Rule 13    registerDeclaration -> REGISTER id AS REG skip
Rule 14    registerDeclaration -> REGISTER id skip
Rule 15    assignment -> id ASSIGN numeric skip
Rule 16    nackBody -> empty
Rule 17    nackBody -> node nackBody
Rule 18    node -> defHeader nodeBody nodeEnd
Rule 19    defHeader -> DEF id nodeAlias nodeIndex skip
Rule 20    nodeAlias -> empty
Rule 21    nodeAlias -> & id nodeAlias
Rule 22    nodeIndex -> empty
Rule 23    nodeIndex -> META numeric
Rule 24    nodeIndex -> : numeric META numeric
Rule 25    nodeIndex -> : numeric
Rule 26    nodeBody -> empty
Rule 27    nodeBody -> segment nodeBody
Rule 28    nodeEnd -> ENDFUNCTION maybeMetaType skip
Rule 29    nodeEnd -> ENDDEF maybeMetaType skip
Rule 30    nodeEnd -> ENDF maybeMetaType skip
Rule 31    segment -> DO_NOTHING skip
Rule 32    segment -> UNSAFE skip
Rule 33    segment -> uncontrolledSegment
Rule 34    segment -> CONCLUDE uncontrolledSegment
Rule 35    segment -> conditional
Rule 36    segment -> chance
Rule 37    chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
Rule 38    optionalChance -> optionalTerminator
Rule 39    optionalChance -> chanceBody actionTypeStart nodeBody optionalChance
Rule 40    optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip
Rule 41    optionalTerminator -> ENDCWITH uncontrolledSegment skip
Rule 42    optionalTerminator -> ENDCHANCE skip
Rule 43    optionalTerminator -> ENDC skip
Rule 44    chanceHeader -> CHANCE ( id )
Rule 45    chanceHeader -> CHANCE ( numeric )
Rule 46    chanceBody -> elsechance ( id )
Rule 47    chanceBody -> elsechance ( numeric )
Rule 48    elsechance -> ELSEC
Rule 49    elsechance -> ELSECHANCE
Rule 50    conditional -> IF uncontrolledSegment nodeBody conditionalTerminator
Rule 51    conditionalTerminator -> ENDWITH uncontrolledSegment
Rule 52    conditionalTerminator -> ENDIF skip
Rule 53    conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator
Rule 54    conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator
Rule 55    uncontrolledSegment -> directiveName maybeMetaType skip
Rule 56    uncontrolledSegment -> maybeFunctionType actionTypeStart
Rule 57    actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
Rule 58    maybeFunctionType -> empty
Rule 59    maybeFunctionType -> functionType
Rule 60    maybeActionType -> empty
Rule 61    maybeActionType -> actionType
Rule 62    maybeCallType -> empty
Rule 63    maybeCallType -> callType
Rule 64    maybeDirectiveType -> empty
Rule 65    maybeDirectiveType -> directiveType
Rule 66    maybeMetaType -> empty
Rule 67    maybeMetaType -> metaType
Rule 68    functionType -> registerType
Rule 69    functionType -> functionLiteral
Rule 70    functionType -> functionName
Rule 71    actionType -> DO_ACTION actionLiteral actionParens
Rule 72    actionType -> DO_ACTION actionName actionParens
Rule 73    callType -> DO_CALL callName
Rule 74    directiveType -> DO_DIRECTIVE directiveName
Rule 75    metaType -> META metaparams
Rule 76    functionName -> FUNCTION_START id maybeParens maybeSubFunction
Rule 77    functionName -> FUNCTION_START id parens
Rule 78    functionName -> FUNCTION_START id
Rule 79    maybeSubFunction -> . id parens maybeSubFunction
Rule 80    maybeSubFunction -> . id maybeParens
Rule 81    maybeParens -> empty
Rule 82    maybeParens -> parens
Rule 83    parens -> funcParens
Rule 84    parens -> ( )
Rule 85    functionLiteral -> FUNCTION maybeFuncLiteralParens
Rule 86    maybeFuncLiteralParens -> funcParens
Rule 87    maybeFuncLiteralParens -> ( )
Rule 88    maybeFuncLiteralParens -> empty
Rule 89    maybeDotID -> . id maybeDotID
Rule 90    maybeDotID -> empty
Rule 91    funcParens -> ( numericSymbol commaPrefacedId )
Rule 92    funcParens -> ( id . id commaPrefacedId )
Rule 93    commaPrefacedId -> , numericSymbol commaPrefacedId
Rule 94    commaPrefacedId -> , id . id commaPrefacedId
Rule 95    commaPrefacedId -> empty
Rule 96    actionParens -> ( maybeActionParams )
Rule 97    maybeActionParams -> numeric maybeMoreActionParams
Rule 98    maybeActionParams -> empty
Rule 99    maybeMoreActionParams -> , numeric maybeMoreActionParams
Rule 100   maybeMoreActionParams -> empty
Rule 101   actionName -> id
Rule 102   actionName -> id . id
Rule 103   actionLiteral -> ACTION
Rule 104   callName -> CALL
Rule 105   callName -> id
Rule 106   callName -> id . CALL
Rule 107   callName -> id . id
Rule 108   directiveName -> REPEAT
Rule 109   directiveName -> RESET
Rule 110   directiveName -> RETURN
Rule 111   metaparams -> metaparamPair , metaparams
Rule 112   metaparams -> metaparamPair
Rule 113   metaparamPair -> id : numericSymbol
Rule 114   registerType -> [ registerContent ]
Rule 115   registerContent -> regRef regComp regVal
Rule 116   registerContent -> regRef regOp
Rule 117   regOp -> RESET
Rule 118   regOp -> INCREMENT
Rule 119   regComp -> NEQ
Rule 120   regComp -> GT
Rule 121   regComp -> GEQ
Rule 122   regComp -> LT
Rule 123   regComp -> LEQ
Rule 124   regComp -> EQ
Rule 125   regRef -> REG
Rule 126   regRef -> id
Rule 127   regVal -> numericSymbol
Rule 128   numericSymbol -> numeric
Rule 129   numericSymbol -> id
Rule 130   numeric -> HEXNUMBER
Rule 131   numeric -> NUMBER
Rule 132   id -> ID
Rule 133   skip -> LINESKIP skip
Rule 134   skip -> LINESKIP
Rule 135   empty -> <empty>

Unused terminals:

    LINECONTINUE
    COMMENTS

Terminals, with rules where they appear:

&                    : 21
(                    : 44 45 46 47 84 87 91 92 96
)                    : 44 45 46 47 84 87 91 92 96
,                    : 93 94 99 111
.                    : 79 80 89 92 94 102 106 107
:                    : 24 25 113
ACTION               : 103
AS                   : 8 9 10 11 12 13
ASSIGN               : 15
CALL                 : 104 106
CHANCE               : 44 45
COMMENTS             : 
CONCLUDE             : 34
DEF                  : 19
DO_ACTION            : 71 72
DO_CALL              : 73
DO_DIRECTIVE         : 74
DO_NOTHING           : 31
ELIF                 : 54
ELSE                 : 53
ELSEC                : 48
ELSECHANCE           : 49
ENDC                 : 43
ENDCHANCE            : 42
ENDCHANCEWITH        : 40
ENDCWITH             : 41
ENDDEF               : 29
ENDF                 : 30
ENDFUNCTION          : 28
ENDIF                : 52
ENDWITH              : 51
EQ                   : 124
FUNCTION             : 85
FUNCTION_START       : 76 77 78
GEQ                  : 121
GT                   : 120
HEXNUMBER            : 130
ID                   : 8 9 9 10 11 11 12 132
IF                   : 50
IMPORTACTIONS        : 11 12
IMPORTLIBRARY        : 8 9 10
INCREMENT            : 118
LEQ                  : 123
LINECONTINUE         : 
LINESKIP             : 133 134
LT                   : 122
META                 : 23 24 75
NEQ                  : 119
NUMBER               : 131
PATH                 : 10 12
REG                  : 13 125
REGISTER             : 13 14
REPEAT               : 108
RESET                : 109 117
RETURN               : 110
UNSAFE               : 32
[                    : 114
]                    : 114
error                : 

Nonterminals, with rules where they appear:

actionImport         : 5
actionLiteral        : 71
actionName           : 72
actionParens         : 71 72
actionType           : 61
actionTypeStart      : 37 39 53 54 56
assignment           : 3
callName             : 73
callType             : 63
chance               : 36
chanceBody           : 37 39
chanceHeader         : 37
commaPrefacedId      : 91 92 93 94
conditional          : 35
conditionalTerminator : 50 53 54
defHeader            : 18
directiveName        : 55 74
directiveType        : 65
elsechance           : 46 47
empty                : 7 16 20 22 26 58 60 62 64 66 81 88 90 95 98 100
funcParens           : 83 86
functionLiteral      : 69
functionName         : 70
functionType         : 54 59
id                   : 13 14 15 19 21 44 46 76 77 78 79 80 89 92 92 94 94 101 102 102 105 106 107 107 113 126 129
libraryImport        : 6
maybeActionParams    : 96
maybeActionType      : 57
maybeCallType        : 57
maybeDirectiveType   : 57
maybeDotID           : 89
maybeFuncLiteralParens : 85
maybeFunctionType    : 56
maybeMetaType        : 28 29 30 55 57
maybeMoreActionParams : 97 99
maybeParens          : 76 80
maybeSubFunction     : 76 79
metaType             : 67
metaparamPair        : 111 112
metaparams           : 75 111
nackBody             : 1 2 17
nackFile             : 0
nackHeader           : 1 2 3 4 5 6
node                 : 17
nodeAlias            : 19 21
nodeBody             : 18 27 37 37 39 50 53 54
nodeEnd              : 18
nodeIndex            : 19
numeric              : 8 15 23 24 24 25 45 47 97 99 128
numericSymbol        : 91 93 113 127
optionalChance       : 37 39
optionalTerminator   : 38
parens               : 77 79 82
regComp              : 115
regOp                : 116
regRef               : 115 116
regVal               : 115
registerContent      : 114
registerDeclaration  : 4
registerType         : 68
segment              : 27
skip                 : 1 8 9 10 11 12 13 14 15 19 28 29 30 31 32 40 41 42 43 52 55 57 133
uncontrolledSegment  : 33 34 37 40 41 50 51


state 0

    (0) S' -> . nackFile
    (1) nackFile -> . skip nackHeader nackBody
    (2) nackFile -> . nackHeader nackBody
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (135) empty -> .
    (132) id -> . ID
    LINESKIP        shift and go to state 4
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    ID              shift and go to state 13

    nackFile                       shift and go to state 1
    skip                           shift and go to state 2
    nackHeader                     shift and go to state 3
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 1

    (0) S' -> nackFile .


state 2

    (1) nackFile -> skip . nackHeader nackBody
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (135) empty -> .
    (132) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    ID              shift and go to state 13

    nackHeader                     shift and go to state 15
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 3

    (2) nackFile -> nackHeader . nackBody
    (16) nackBody -> . empty
    (17) nackBody -> . node nackBody
    (135) empty -> .
    (18) node -> . defHeader nodeBody nodeEnd
    (19) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 135 (empty -> .)
    DEF             shift and go to state 20

    nackBody                       shift and go to state 16
    empty                          shift and go to state 17
    node                           shift and go to state 18
    defHeader                      shift and go to state 19

state 4

    (133) skip -> LINESKIP . skip
    (134) skip -> LINESKIP .
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
  ! shift/reduce conflict for LINESKIP resolved as shift
    REGISTER        reduce using rule 134 (skip -> LINESKIP .)
    IMPORTACTIONS   reduce using rule 134 (skip -> LINESKIP .)
    IMPORTLIBRARY   reduce using rule 134 (skip -> LINESKIP .)
    ID              reduce using rule 134 (skip -> LINESKIP .)
    DEF             reduce using rule 134 (skip -> LINESKIP .)
    $end            reduce using rule 134 (skip -> LINESKIP .)
    DO_NOTHING      reduce using rule 134 (skip -> LINESKIP .)
    UNSAFE          reduce using rule 134 (skip -> LINESKIP .)
    CONCLUDE        reduce using rule 134 (skip -> LINESKIP .)
    IF              reduce using rule 134 (skip -> LINESKIP .)
    REPEAT          reduce using rule 134 (skip -> LINESKIP .)
    RESET           reduce using rule 134 (skip -> LINESKIP .)
    RETURN          reduce using rule 134 (skip -> LINESKIP .)
    CHANCE          reduce using rule 134 (skip -> LINESKIP .)
    [               reduce using rule 134 (skip -> LINESKIP .)
    FUNCTION        reduce using rule 134 (skip -> LINESKIP .)
    FUNCTION_START  reduce using rule 134 (skip -> LINESKIP .)
    DO_ACTION       reduce using rule 134 (skip -> LINESKIP .)
    DO_CALL         reduce using rule 134 (skip -> LINESKIP .)
    DO_DIRECTIVE    reduce using rule 134 (skip -> LINESKIP .)
    META            reduce using rule 134 (skip -> LINESKIP .)
    ENDFUNCTION     reduce using rule 134 (skip -> LINESKIP .)
    ENDDEF          reduce using rule 134 (skip -> LINESKIP .)
    ENDF            reduce using rule 134 (skip -> LINESKIP .)
    ENDWITH         reduce using rule 134 (skip -> LINESKIP .)
    ENDIF           reduce using rule 134 (skip -> LINESKIP .)
    ELSE            reduce using rule 134 (skip -> LINESKIP .)
    ELIF            reduce using rule 134 (skip -> LINESKIP .)
    ELSEC           reduce using rule 134 (skip -> LINESKIP .)
    ELSECHANCE      reduce using rule 134 (skip -> LINESKIP .)
    ENDCHANCEWITH   reduce using rule 134 (skip -> LINESKIP .)
    ENDCWITH        reduce using rule 134 (skip -> LINESKIP .)
    ENDCHANCE       reduce using rule 134 (skip -> LINESKIP .)
    ENDC            reduce using rule 134 (skip -> LINESKIP .)
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 21

state 5

    (3) nackHeader -> assignment . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (135) empty -> .
    (132) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    ID              shift and go to state 13

    assignment                     shift and go to state 5
    nackHeader                     shift and go to state 22
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 6

    (4) nackHeader -> registerDeclaration . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (135) empty -> .
    (132) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    ID              shift and go to state 13

    registerDeclaration            shift and go to state 6
    nackHeader                     shift and go to state 23
    assignment                     shift and go to state 5
    actionImport                   shift and go to state 7
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 7

    (5) nackHeader -> actionImport . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (135) empty -> .
    (132) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    ID              shift and go to state 13

    actionImport                   shift and go to state 7
    nackHeader                     shift and go to state 24
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    libraryImport                  shift and go to state 8
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 8

    (6) nackHeader -> libraryImport . nackHeader
    (3) nackHeader -> . assignment nackHeader
    (4) nackHeader -> . registerDeclaration nackHeader
    (5) nackHeader -> . actionImport nackHeader
    (6) nackHeader -> . libraryImport nackHeader
    (7) nackHeader -> . empty
    (15) assignment -> . id ASSIGN numeric skip
    (13) registerDeclaration -> . REGISTER id AS REG skip
    (14) registerDeclaration -> . REGISTER id skip
    (11) actionImport -> . IMPORTACTIONS ID AS ID skip
    (12) actionImport -> . IMPORTACTIONS PATH AS ID skip
    (8) libraryImport -> . IMPORTLIBRARY numeric AS ID skip
    (9) libraryImport -> . IMPORTLIBRARY ID AS ID skip
    (10) libraryImport -> . IMPORTLIBRARY PATH AS ID skip
    (135) empty -> .
    (132) id -> . ID
    REGISTER        shift and go to state 11
    IMPORTACTIONS   shift and go to state 12
    IMPORTLIBRARY   shift and go to state 14
    DEF             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    ID              shift and go to state 13

    libraryImport                  shift and go to state 8
    nackHeader                     shift and go to state 25
    assignment                     shift and go to state 5
    registerDeclaration            shift and go to state 6
    actionImport                   shift and go to state 7
    empty                          shift and go to state 9
    id                             shift and go to state 10

state 9

    (7) nackHeader -> empty .
    DEF             reduce using rule 7 (nackHeader -> empty .)
    $end            reduce using rule 7 (nackHeader -> empty .)


state 10

    (15) assignment -> id . ASSIGN numeric skip
    ASSIGN          shift and go to state 26


state 11

    (13) registerDeclaration -> REGISTER . id AS REG skip
    (14) registerDeclaration -> REGISTER . id skip
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 27

state 12

    (11) actionImport -> IMPORTACTIONS . ID AS ID skip
    (12) actionImport -> IMPORTACTIONS . PATH AS ID skip
    ID              shift and go to state 28
    PATH            shift and go to state 29


state 13

    (132) id -> ID .
    ASSIGN          reduce using rule 132 (id -> ID .)
    AS              reduce using rule 132 (id -> ID .)
    LINESKIP        reduce using rule 132 (id -> ID .)
    &               reduce using rule 132 (id -> ID .)
    META            reduce using rule 132 (id -> ID .)
    :               reduce using rule 132 (id -> ID .)
    NEQ             reduce using rule 132 (id -> ID .)
    GT              reduce using rule 132 (id -> ID .)
    GEQ             reduce using rule 132 (id -> ID .)
    LT              reduce using rule 132 (id -> ID .)
    LEQ             reduce using rule 132 (id -> ID .)
    EQ              reduce using rule 132 (id -> ID .)
    RESET           reduce using rule 132 (id -> ID .)
    INCREMENT       reduce using rule 132 (id -> ID .)
    (               reduce using rule 132 (id -> ID .)
    .               reduce using rule 132 (id -> ID .)
    DO_ACTION       reduce using rule 132 (id -> ID .)
    DO_CALL         reduce using rule 132 (id -> ID .)
    DO_DIRECTIVE    reduce using rule 132 (id -> ID .)
    )               reduce using rule 132 (id -> ID .)
    ,               reduce using rule 132 (id -> ID .)
    ]               reduce using rule 132 (id -> ID .)


state 14

    (8) libraryImport -> IMPORTLIBRARY . numeric AS ID skip
    (9) libraryImport -> IMPORTLIBRARY . ID AS ID skip
    (10) libraryImport -> IMPORTLIBRARY . PATH AS ID skip
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    ID              shift and go to state 31
    PATH            shift and go to state 32
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 30

state 15

    (1) nackFile -> skip nackHeader . nackBody
    (16) nackBody -> . empty
    (17) nackBody -> . node nackBody
    (135) empty -> .
    (18) node -> . defHeader nodeBody nodeEnd
    (19) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 135 (empty -> .)
    DEF             shift and go to state 20

    nackBody                       shift and go to state 35
    empty                          shift and go to state 17
    node                           shift and go to state 18
    defHeader                      shift and go to state 19

state 16

    (2) nackFile -> nackHeader nackBody .
    $end            reduce using rule 2 (nackFile -> nackHeader nackBody .)


state 17

    (16) nackBody -> empty .
    $end            reduce using rule 16 (nackBody -> empty .)


state 18

    (17) nackBody -> node . nackBody
    (16) nackBody -> . empty
    (17) nackBody -> . node nackBody
    (135) empty -> .
    (18) node -> . defHeader nodeBody nodeEnd
    (19) defHeader -> . DEF id nodeAlias nodeIndex skip
    $end            reduce using rule 135 (empty -> .)
    DEF             shift and go to state 20

    node                           shift and go to state 18
    nackBody                       shift and go to state 36
    empty                          shift and go to state 17
    defHeader                      shift and go to state 19

state 19

    (18) node -> defHeader . nodeBody nodeEnd
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDFUNCTION     reduce using rule 135 (empty -> .)
    ENDDEF          reduce using rule 135 (empty -> .)
    ENDF            reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    nodeBody                       shift and go to state 37
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 20

    (19) defHeader -> DEF . id nodeAlias nodeIndex skip
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 61

state 21

    (133) skip -> LINESKIP skip .
    REGISTER        reduce using rule 133 (skip -> LINESKIP skip .)
    IMPORTACTIONS   reduce using rule 133 (skip -> LINESKIP skip .)
    IMPORTLIBRARY   reduce using rule 133 (skip -> LINESKIP skip .)
    ID              reduce using rule 133 (skip -> LINESKIP skip .)
    DEF             reduce using rule 133 (skip -> LINESKIP skip .)
    $end            reduce using rule 133 (skip -> LINESKIP skip .)
    DO_NOTHING      reduce using rule 133 (skip -> LINESKIP skip .)
    UNSAFE          reduce using rule 133 (skip -> LINESKIP skip .)
    CONCLUDE        reduce using rule 133 (skip -> LINESKIP skip .)
    IF              reduce using rule 133 (skip -> LINESKIP skip .)
    REPEAT          reduce using rule 133 (skip -> LINESKIP skip .)
    RESET           reduce using rule 133 (skip -> LINESKIP skip .)
    RETURN          reduce using rule 133 (skip -> LINESKIP skip .)
    CHANCE          reduce using rule 133 (skip -> LINESKIP skip .)
    [               reduce using rule 133 (skip -> LINESKIP skip .)
    FUNCTION        reduce using rule 133 (skip -> LINESKIP skip .)
    FUNCTION_START  reduce using rule 133 (skip -> LINESKIP skip .)
    DO_ACTION       reduce using rule 133 (skip -> LINESKIP skip .)
    DO_CALL         reduce using rule 133 (skip -> LINESKIP skip .)
    DO_DIRECTIVE    reduce using rule 133 (skip -> LINESKIP skip .)
    META            reduce using rule 133 (skip -> LINESKIP skip .)
    LINESKIP        reduce using rule 133 (skip -> LINESKIP skip .)
    ENDFUNCTION     reduce using rule 133 (skip -> LINESKIP skip .)
    ENDDEF          reduce using rule 133 (skip -> LINESKIP skip .)
    ENDF            reduce using rule 133 (skip -> LINESKIP skip .)
    ENDWITH         reduce using rule 133 (skip -> LINESKIP skip .)
    ENDIF           reduce using rule 133 (skip -> LINESKIP skip .)
    ELSE            reduce using rule 133 (skip -> LINESKIP skip .)
    ELIF            reduce using rule 133 (skip -> LINESKIP skip .)
    ELSEC           reduce using rule 133 (skip -> LINESKIP skip .)
    ELSECHANCE      reduce using rule 133 (skip -> LINESKIP skip .)
    ENDCHANCEWITH   reduce using rule 133 (skip -> LINESKIP skip .)
    ENDCWITH        reduce using rule 133 (skip -> LINESKIP skip .)
    ENDCHANCE       reduce using rule 133 (skip -> LINESKIP skip .)
    ENDC            reduce using rule 133 (skip -> LINESKIP skip .)


state 22

    (3) nackHeader -> assignment nackHeader .
    DEF             reduce using rule 3 (nackHeader -> assignment nackHeader .)
    $end            reduce using rule 3 (nackHeader -> assignment nackHeader .)


state 23

    (4) nackHeader -> registerDeclaration nackHeader .
    DEF             reduce using rule 4 (nackHeader -> registerDeclaration nackHeader .)
    $end            reduce using rule 4 (nackHeader -> registerDeclaration nackHeader .)


state 24

    (5) nackHeader -> actionImport nackHeader .
    DEF             reduce using rule 5 (nackHeader -> actionImport nackHeader .)
    $end            reduce using rule 5 (nackHeader -> actionImport nackHeader .)


state 25

    (6) nackHeader -> libraryImport nackHeader .
    DEF             reduce using rule 6 (nackHeader -> libraryImport nackHeader .)
    $end            reduce using rule 6 (nackHeader -> libraryImport nackHeader .)


state 26

    (15) assignment -> id ASSIGN . numeric skip
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 62

state 27

    (13) registerDeclaration -> REGISTER id . AS REG skip
    (14) registerDeclaration -> REGISTER id . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    AS              shift and go to state 63
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 64

state 28

    (11) actionImport -> IMPORTACTIONS ID . AS ID skip
    AS              shift and go to state 65


state 29

    (12) actionImport -> IMPORTACTIONS PATH . AS ID skip
    AS              shift and go to state 66


state 30

    (8) libraryImport -> IMPORTLIBRARY numeric . AS ID skip
    AS              shift and go to state 67


state 31

    (9) libraryImport -> IMPORTLIBRARY ID . AS ID skip
    AS              shift and go to state 68


state 32

    (10) libraryImport -> IMPORTLIBRARY PATH . AS ID skip
    AS              shift and go to state 69


state 33

    (130) numeric -> HEXNUMBER .
    AS              reduce using rule 130 (numeric -> HEXNUMBER .)
    LINESKIP        reduce using rule 130 (numeric -> HEXNUMBER .)
    )               reduce using rule 130 (numeric -> HEXNUMBER .)
    ,               reduce using rule 130 (numeric -> HEXNUMBER .)
    ]               reduce using rule 130 (numeric -> HEXNUMBER .)
    META            reduce using rule 130 (numeric -> HEXNUMBER .)


state 34

    (131) numeric -> NUMBER .
    AS              reduce using rule 131 (numeric -> NUMBER .)
    LINESKIP        reduce using rule 131 (numeric -> NUMBER .)
    )               reduce using rule 131 (numeric -> NUMBER .)
    ,               reduce using rule 131 (numeric -> NUMBER .)
    ]               reduce using rule 131 (numeric -> NUMBER .)
    META            reduce using rule 131 (numeric -> NUMBER .)


state 35

    (1) nackFile -> skip nackHeader nackBody .
    $end            reduce using rule 1 (nackFile -> skip nackHeader nackBody .)


state 36

    (17) nackBody -> node nackBody .
    $end            reduce using rule 17 (nackBody -> node nackBody .)


state 37

    (18) node -> defHeader nodeBody . nodeEnd
    (28) nodeEnd -> . ENDFUNCTION maybeMetaType skip
    (29) nodeEnd -> . ENDDEF maybeMetaType skip
    (30) nodeEnd -> . ENDF maybeMetaType skip
    ENDFUNCTION     shift and go to state 71
    ENDDEF          shift and go to state 72
    ENDF            shift and go to state 73

    nodeEnd                        shift and go to state 70

state 38

    (26) nodeBody -> empty .
    (58) maybeFunctionType -> empty .
    ENDFUNCTION     reduce using rule 26 (nodeBody -> empty .)
    ENDDEF          reduce using rule 26 (nodeBody -> empty .)
    ENDF            reduce using rule 26 (nodeBody -> empty .)
    ENDWITH         reduce using rule 26 (nodeBody -> empty .)
    ENDIF           reduce using rule 26 (nodeBody -> empty .)
    ELSE            reduce using rule 26 (nodeBody -> empty .)
    ELIF            reduce using rule 26 (nodeBody -> empty .)
    ELSEC           reduce using rule 26 (nodeBody -> empty .)
    ELSECHANCE      reduce using rule 26 (nodeBody -> empty .)
    ENDCHANCEWITH   reduce using rule 26 (nodeBody -> empty .)
    ENDCWITH        reduce using rule 26 (nodeBody -> empty .)
    ENDCHANCE       reduce using rule 26 (nodeBody -> empty .)
    ENDC            reduce using rule 26 (nodeBody -> empty .)
    DO_ACTION       reduce using rule 58 (maybeFunctionType -> empty .)
    DO_CALL         reduce using rule 58 (maybeFunctionType -> empty .)
    DO_DIRECTIVE    reduce using rule 58 (maybeFunctionType -> empty .)
    META            reduce using rule 58 (maybeFunctionType -> empty .)
    LINESKIP        reduce using rule 58 (maybeFunctionType -> empty .)


state 39

    (27) nodeBody -> segment . nodeBody
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDFUNCTION     reduce using rule 135 (empty -> .)
    ENDDEF          reduce using rule 135 (empty -> .)
    ENDF            reduce using rule 135 (empty -> .)
    ENDWITH         reduce using rule 135 (empty -> .)
    ENDIF           reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELIF            reduce using rule 135 (empty -> .)
    ELSEC           reduce using rule 135 (empty -> .)
    ELSECHANCE      reduce using rule 135 (empty -> .)
    ENDCHANCEWITH   reduce using rule 135 (empty -> .)
    ENDCWITH        reduce using rule 135 (empty -> .)
    ENDCHANCE       reduce using rule 135 (empty -> .)
    ENDC            reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    segment                        shift and go to state 39
    nodeBody                       shift and go to state 74
    empty                          shift and go to state 38
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 40

    (31) segment -> DO_NOTHING . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 75

state 41

    (32) segment -> UNSAFE . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 76

state 42

    (33) segment -> uncontrolledSegment .
    DO_NOTHING      reduce using rule 33 (segment -> uncontrolledSegment .)
    UNSAFE          reduce using rule 33 (segment -> uncontrolledSegment .)
    CONCLUDE        reduce using rule 33 (segment -> uncontrolledSegment .)
    IF              reduce using rule 33 (segment -> uncontrolledSegment .)
    REPEAT          reduce using rule 33 (segment -> uncontrolledSegment .)
    RESET           reduce using rule 33 (segment -> uncontrolledSegment .)
    RETURN          reduce using rule 33 (segment -> uncontrolledSegment .)
    CHANCE          reduce using rule 33 (segment -> uncontrolledSegment .)
    [               reduce using rule 33 (segment -> uncontrolledSegment .)
    FUNCTION        reduce using rule 33 (segment -> uncontrolledSegment .)
    FUNCTION_START  reduce using rule 33 (segment -> uncontrolledSegment .)
    DO_ACTION       reduce using rule 33 (segment -> uncontrolledSegment .)
    DO_CALL         reduce using rule 33 (segment -> uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 33 (segment -> uncontrolledSegment .)
    META            reduce using rule 33 (segment -> uncontrolledSegment .)
    LINESKIP        reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDDEF          reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDF            reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDWITH         reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDIF           reduce using rule 33 (segment -> uncontrolledSegment .)
    ELSE            reduce using rule 33 (segment -> uncontrolledSegment .)
    ELIF            reduce using rule 33 (segment -> uncontrolledSegment .)
    ELSEC           reduce using rule 33 (segment -> uncontrolledSegment .)
    ELSECHANCE      reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDCHANCEWITH   reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDCWITH        reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDCHANCE       reduce using rule 33 (segment -> uncontrolledSegment .)
    ENDC            reduce using rule 33 (segment -> uncontrolledSegment .)


state 43

    (34) segment -> CONCLUDE . uncontrolledSegment
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (135) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 77
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 44

    (35) segment -> conditional .
    DO_NOTHING      reduce using rule 35 (segment -> conditional .)
    UNSAFE          reduce using rule 35 (segment -> conditional .)
    CONCLUDE        reduce using rule 35 (segment -> conditional .)
    IF              reduce using rule 35 (segment -> conditional .)
    REPEAT          reduce using rule 35 (segment -> conditional .)
    RESET           reduce using rule 35 (segment -> conditional .)
    RETURN          reduce using rule 35 (segment -> conditional .)
    CHANCE          reduce using rule 35 (segment -> conditional .)
    [               reduce using rule 35 (segment -> conditional .)
    FUNCTION        reduce using rule 35 (segment -> conditional .)
    FUNCTION_START  reduce using rule 35 (segment -> conditional .)
    DO_ACTION       reduce using rule 35 (segment -> conditional .)
    DO_CALL         reduce using rule 35 (segment -> conditional .)
    DO_DIRECTIVE    reduce using rule 35 (segment -> conditional .)
    META            reduce using rule 35 (segment -> conditional .)
    LINESKIP        reduce using rule 35 (segment -> conditional .)
    ENDFUNCTION     reduce using rule 35 (segment -> conditional .)
    ENDDEF          reduce using rule 35 (segment -> conditional .)
    ENDF            reduce using rule 35 (segment -> conditional .)
    ENDWITH         reduce using rule 35 (segment -> conditional .)
    ENDIF           reduce using rule 35 (segment -> conditional .)
    ELSE            reduce using rule 35 (segment -> conditional .)
    ELIF            reduce using rule 35 (segment -> conditional .)
    ELSEC           reduce using rule 35 (segment -> conditional .)
    ELSECHANCE      reduce using rule 35 (segment -> conditional .)
    ENDCHANCEWITH   reduce using rule 35 (segment -> conditional .)
    ENDCWITH        reduce using rule 35 (segment -> conditional .)
    ENDCHANCE       reduce using rule 35 (segment -> conditional .)
    ENDC            reduce using rule 35 (segment -> conditional .)


state 45

    (36) segment -> chance .
    DO_NOTHING      reduce using rule 36 (segment -> chance .)
    UNSAFE          reduce using rule 36 (segment -> chance .)
    CONCLUDE        reduce using rule 36 (segment -> chance .)
    IF              reduce using rule 36 (segment -> chance .)
    REPEAT          reduce using rule 36 (segment -> chance .)
    RESET           reduce using rule 36 (segment -> chance .)
    RETURN          reduce using rule 36 (segment -> chance .)
    CHANCE          reduce using rule 36 (segment -> chance .)
    [               reduce using rule 36 (segment -> chance .)
    FUNCTION        reduce using rule 36 (segment -> chance .)
    FUNCTION_START  reduce using rule 36 (segment -> chance .)
    DO_ACTION       reduce using rule 36 (segment -> chance .)
    DO_CALL         reduce using rule 36 (segment -> chance .)
    DO_DIRECTIVE    reduce using rule 36 (segment -> chance .)
    META            reduce using rule 36 (segment -> chance .)
    LINESKIP        reduce using rule 36 (segment -> chance .)
    ENDFUNCTION     reduce using rule 36 (segment -> chance .)
    ENDDEF          reduce using rule 36 (segment -> chance .)
    ENDF            reduce using rule 36 (segment -> chance .)
    ENDWITH         reduce using rule 36 (segment -> chance .)
    ENDIF           reduce using rule 36 (segment -> chance .)
    ELSE            reduce using rule 36 (segment -> chance .)
    ELIF            reduce using rule 36 (segment -> chance .)
    ELSEC           reduce using rule 36 (segment -> chance .)
    ELSECHANCE      reduce using rule 36 (segment -> chance .)
    ENDCHANCEWITH   reduce using rule 36 (segment -> chance .)
    ENDCWITH        reduce using rule 36 (segment -> chance .)
    ENDCHANCE       reduce using rule 36 (segment -> chance .)
    ENDC            reduce using rule 36 (segment -> chance .)


state 46

    (55) uncontrolledSegment -> directiveName . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (135) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 135 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 79
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 47

    (56) uncontrolledSegment -> maybeFunctionType . actionTypeStart
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (135) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 83
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 48

    (50) conditional -> IF . uncontrolledSegment nodeBody conditionalTerminator
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (135) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 88
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 49

    (37) chance -> chanceHeader . actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (135) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 89
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 50

    (108) directiveName -> REPEAT .
    META            reduce using rule 108 (directiveName -> REPEAT .)
    LINESKIP        reduce using rule 108 (directiveName -> REPEAT .)


state 51

    (109) directiveName -> RESET .
    META            reduce using rule 109 (directiveName -> RESET .)
    LINESKIP        reduce using rule 109 (directiveName -> RESET .)


state 52

    (110) directiveName -> RETURN .
    META            reduce using rule 110 (directiveName -> RETURN .)
    LINESKIP        reduce using rule 110 (directiveName -> RETURN .)


state 53

    (59) maybeFunctionType -> functionType .
    DO_ACTION       reduce using rule 59 (maybeFunctionType -> functionType .)
    DO_CALL         reduce using rule 59 (maybeFunctionType -> functionType .)
    DO_DIRECTIVE    reduce using rule 59 (maybeFunctionType -> functionType .)
    META            reduce using rule 59 (maybeFunctionType -> functionType .)
    LINESKIP        reduce using rule 59 (maybeFunctionType -> functionType .)


state 54

    (44) chanceHeader -> CHANCE . ( id )
    (45) chanceHeader -> CHANCE . ( numeric )
    (               shift and go to state 90


state 55

    (68) functionType -> registerType .
    DO_ACTION       reduce using rule 68 (functionType -> registerType .)
    DO_CALL         reduce using rule 68 (functionType -> registerType .)
    DO_DIRECTIVE    reduce using rule 68 (functionType -> registerType .)
    META            reduce using rule 68 (functionType -> registerType .)
    LINESKIP        reduce using rule 68 (functionType -> registerType .)


state 56

    (69) functionType -> functionLiteral .
    DO_ACTION       reduce using rule 69 (functionType -> functionLiteral .)
    DO_CALL         reduce using rule 69 (functionType -> functionLiteral .)
    DO_DIRECTIVE    reduce using rule 69 (functionType -> functionLiteral .)
    META            reduce using rule 69 (functionType -> functionLiteral .)
    LINESKIP        reduce using rule 69 (functionType -> functionLiteral .)


state 57

    (70) functionType -> functionName .
    DO_ACTION       reduce using rule 70 (functionType -> functionName .)
    DO_CALL         reduce using rule 70 (functionType -> functionName .)
    DO_DIRECTIVE    reduce using rule 70 (functionType -> functionName .)
    META            reduce using rule 70 (functionType -> functionName .)
    LINESKIP        reduce using rule 70 (functionType -> functionName .)


state 58

    (114) registerType -> [ . registerContent ]
    (115) registerContent -> . regRef regComp regVal
    (116) registerContent -> . regRef regOp
    (125) regRef -> . REG
    (126) regRef -> . id
    (132) id -> . ID
    REG             shift and go to state 93
    ID              shift and go to state 13

    registerContent                shift and go to state 91
    regRef                         shift and go to state 92
    id                             shift and go to state 94

state 59

    (85) functionLiteral -> FUNCTION . maybeFuncLiteralParens
    (86) maybeFuncLiteralParens -> . funcParens
    (87) maybeFuncLiteralParens -> . ( )
    (88) maybeFuncLiteralParens -> . empty
    (91) funcParens -> . ( numericSymbol commaPrefacedId )
    (92) funcParens -> . ( id . id commaPrefacedId )
    (135) empty -> .
    (               shift and go to state 97
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)

    maybeFuncLiteralParens         shift and go to state 95
    funcParens                     shift and go to state 96
    empty                          shift and go to state 98

state 60

    (76) functionName -> FUNCTION_START . id maybeParens maybeSubFunction
    (77) functionName -> FUNCTION_START . id parens
    (78) functionName -> FUNCTION_START . id
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 99

state 61

    (19) defHeader -> DEF id . nodeAlias nodeIndex skip
    (20) nodeAlias -> . empty
    (21) nodeAlias -> . & id nodeAlias
    (135) empty -> .
    &               shift and go to state 102
    META            reduce using rule 135 (empty -> .)
    :               reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)

    nodeAlias                      shift and go to state 100
    empty                          shift and go to state 101

state 62

    (15) assignment -> id ASSIGN numeric . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 103

state 63

    (13) registerDeclaration -> REGISTER id AS . REG skip
    REG             shift and go to state 104


state 64

    (14) registerDeclaration -> REGISTER id skip .
    REGISTER        reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    IMPORTACTIONS   reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    IMPORTLIBRARY   reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    ID              reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    DEF             reduce using rule 14 (registerDeclaration -> REGISTER id skip .)
    $end            reduce using rule 14 (registerDeclaration -> REGISTER id skip .)


state 65

    (11) actionImport -> IMPORTACTIONS ID AS . ID skip
    ID              shift and go to state 105


state 66

    (12) actionImport -> IMPORTACTIONS PATH AS . ID skip
    ID              shift and go to state 106


state 67

    (8) libraryImport -> IMPORTLIBRARY numeric AS . ID skip
    ID              shift and go to state 107


state 68

    (9) libraryImport -> IMPORTLIBRARY ID AS . ID skip
    ID              shift and go to state 108


state 69

    (10) libraryImport -> IMPORTLIBRARY PATH AS . ID skip
    ID              shift and go to state 109


state 70

    (18) node -> defHeader nodeBody nodeEnd .
    DEF             reduce using rule 18 (node -> defHeader nodeBody nodeEnd .)
    $end            reduce using rule 18 (node -> defHeader nodeBody nodeEnd .)


state 71

    (28) nodeEnd -> ENDFUNCTION . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (135) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 135 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 110
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 72

    (29) nodeEnd -> ENDDEF . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (135) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 135 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 111
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 73

    (30) nodeEnd -> ENDF . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (135) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 135 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 112
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 74

    (27) nodeBody -> segment nodeBody .
    ENDFUNCTION     reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDDEF          reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDF            reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDWITH         reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDIF           reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELSE            reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELIF            reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELSEC           reduce using rule 27 (nodeBody -> segment nodeBody .)
    ELSECHANCE      reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDCHANCEWITH   reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDCWITH        reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDCHANCE       reduce using rule 27 (nodeBody -> segment nodeBody .)
    ENDC            reduce using rule 27 (nodeBody -> segment nodeBody .)


state 75

    (31) segment -> DO_NOTHING skip .
    DO_NOTHING      reduce using rule 31 (segment -> DO_NOTHING skip .)
    UNSAFE          reduce using rule 31 (segment -> DO_NOTHING skip .)
    CONCLUDE        reduce using rule 31 (segment -> DO_NOTHING skip .)
    IF              reduce using rule 31 (segment -> DO_NOTHING skip .)
    REPEAT          reduce using rule 31 (segment -> DO_NOTHING skip .)
    RESET           reduce using rule 31 (segment -> DO_NOTHING skip .)
    RETURN          reduce using rule 31 (segment -> DO_NOTHING skip .)
    CHANCE          reduce using rule 31 (segment -> DO_NOTHING skip .)
    [               reduce using rule 31 (segment -> DO_NOTHING skip .)
    FUNCTION        reduce using rule 31 (segment -> DO_NOTHING skip .)
    FUNCTION_START  reduce using rule 31 (segment -> DO_NOTHING skip .)
    DO_ACTION       reduce using rule 31 (segment -> DO_NOTHING skip .)
    DO_CALL         reduce using rule 31 (segment -> DO_NOTHING skip .)
    DO_DIRECTIVE    reduce using rule 31 (segment -> DO_NOTHING skip .)
    META            reduce using rule 31 (segment -> DO_NOTHING skip .)
    LINESKIP        reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDFUNCTION     reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDDEF          reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDF            reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDWITH         reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDIF           reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELSE            reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELIF            reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELSEC           reduce using rule 31 (segment -> DO_NOTHING skip .)
    ELSECHANCE      reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDCHANCEWITH   reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDCWITH        reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDCHANCE       reduce using rule 31 (segment -> DO_NOTHING skip .)
    ENDC            reduce using rule 31 (segment -> DO_NOTHING skip .)


state 76

    (32) segment -> UNSAFE skip .
    DO_NOTHING      reduce using rule 32 (segment -> UNSAFE skip .)
    UNSAFE          reduce using rule 32 (segment -> UNSAFE skip .)
    CONCLUDE        reduce using rule 32 (segment -> UNSAFE skip .)
    IF              reduce using rule 32 (segment -> UNSAFE skip .)
    REPEAT          reduce using rule 32 (segment -> UNSAFE skip .)
    RESET           reduce using rule 32 (segment -> UNSAFE skip .)
    RETURN          reduce using rule 32 (segment -> UNSAFE skip .)
    CHANCE          reduce using rule 32 (segment -> UNSAFE skip .)
    [               reduce using rule 32 (segment -> UNSAFE skip .)
    FUNCTION        reduce using rule 32 (segment -> UNSAFE skip .)
    FUNCTION_START  reduce using rule 32 (segment -> UNSAFE skip .)
    DO_ACTION       reduce using rule 32 (segment -> UNSAFE skip .)
    DO_CALL         reduce using rule 32 (segment -> UNSAFE skip .)
    DO_DIRECTIVE    reduce using rule 32 (segment -> UNSAFE skip .)
    META            reduce using rule 32 (segment -> UNSAFE skip .)
    LINESKIP        reduce using rule 32 (segment -> UNSAFE skip .)
    ENDFUNCTION     reduce using rule 32 (segment -> UNSAFE skip .)
    ENDDEF          reduce using rule 32 (segment -> UNSAFE skip .)
    ENDF            reduce using rule 32 (segment -> UNSAFE skip .)
    ENDWITH         reduce using rule 32 (segment -> UNSAFE skip .)
    ENDIF           reduce using rule 32 (segment -> UNSAFE skip .)
    ELSE            reduce using rule 32 (segment -> UNSAFE skip .)
    ELIF            reduce using rule 32 (segment -> UNSAFE skip .)
    ELSEC           reduce using rule 32 (segment -> UNSAFE skip .)
    ELSECHANCE      reduce using rule 32 (segment -> UNSAFE skip .)
    ENDCHANCEWITH   reduce using rule 32 (segment -> UNSAFE skip .)
    ENDCWITH        reduce using rule 32 (segment -> UNSAFE skip .)
    ENDCHANCE       reduce using rule 32 (segment -> UNSAFE skip .)
    ENDC            reduce using rule 32 (segment -> UNSAFE skip .)


state 77

    (34) segment -> CONCLUDE uncontrolledSegment .
    DO_NOTHING      reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    UNSAFE          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    CONCLUDE        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    IF              reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    REPEAT          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    RESET           reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    RETURN          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    CHANCE          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    [               reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    FUNCTION        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    FUNCTION_START  reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    DO_ACTION       reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    DO_CALL         reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    META            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    LINESKIP        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDDEF          reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDF            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDWITH         reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDIF           reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELSE            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELIF            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELSEC           reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ELSECHANCE      reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDCHANCEWITH   reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDCWITH        reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDCHANCE       reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)
    ENDC            reduce using rule 34 (segment -> CONCLUDE uncontrolledSegment .)


state 78

    (58) maybeFunctionType -> empty .
    DO_ACTION       reduce using rule 58 (maybeFunctionType -> empty .)
    DO_CALL         reduce using rule 58 (maybeFunctionType -> empty .)
    DO_DIRECTIVE    reduce using rule 58 (maybeFunctionType -> empty .)
    META            reduce using rule 58 (maybeFunctionType -> empty .)
    LINESKIP        reduce using rule 58 (maybeFunctionType -> empty .)


state 79

    (55) uncontrolledSegment -> directiveName maybeMetaType . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 113

state 80

    (66) maybeMetaType -> empty .
    LINESKIP        reduce using rule 66 (maybeMetaType -> empty .)


state 81

    (67) maybeMetaType -> metaType .
    LINESKIP        reduce using rule 67 (maybeMetaType -> metaType .)


state 82

    (75) metaType -> META . metaparams
    (111) metaparams -> . metaparamPair , metaparams
    (112) metaparams -> . metaparamPair
    (113) metaparamPair -> . id : numericSymbol
    (132) id -> . ID
    ID              shift and go to state 13

    metaparams                     shift and go to state 114
    metaparamPair                  shift and go to state 115
    id                             shift and go to state 116

state 83

    (56) uncontrolledSegment -> maybeFunctionType actionTypeStart .
    DO_NOTHING      reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    UNSAFE          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    CONCLUDE        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    IF              reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    REPEAT          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RESET           reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    RETURN          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    CHANCE          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    [               reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    FUNCTION        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    FUNCTION_START  reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_ACTION       reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_CALL         reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    DO_DIRECTIVE    reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    META            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    LINESKIP        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDFUNCTION     reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDDEF          reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDF            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDWITH         reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDIF           reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSE            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELIF            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSEC           reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ELSECHANCE      reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDCHANCEWITH   reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDCWITH        reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDCHANCE       reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)
    ENDC            reduce using rule 56 (uncontrolledSegment -> maybeFunctionType actionTypeStart .)


state 84

    (57) actionTypeStart -> maybeActionType . maybeCallType maybeDirectiveType maybeMetaType skip
    (62) maybeCallType -> . empty
    (63) maybeCallType -> . callType
    (135) empty -> .
    (73) callType -> . DO_CALL callName
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_CALL         shift and go to state 120

    maybeCallType                  shift and go to state 117
    empty                          shift and go to state 118
    callType                       shift and go to state 119

state 85

    (60) maybeActionType -> empty .
    DO_CALL         reduce using rule 60 (maybeActionType -> empty .)
    DO_DIRECTIVE    reduce using rule 60 (maybeActionType -> empty .)
    META            reduce using rule 60 (maybeActionType -> empty .)
    LINESKIP        reduce using rule 60 (maybeActionType -> empty .)


state 86

    (61) maybeActionType -> actionType .
    DO_CALL         reduce using rule 61 (maybeActionType -> actionType .)
    DO_DIRECTIVE    reduce using rule 61 (maybeActionType -> actionType .)
    META            reduce using rule 61 (maybeActionType -> actionType .)
    LINESKIP        reduce using rule 61 (maybeActionType -> actionType .)


state 87

    (71) actionType -> DO_ACTION . actionLiteral actionParens
    (72) actionType -> DO_ACTION . actionName actionParens
    (103) actionLiteral -> . ACTION
    (101) actionName -> . id
    (102) actionName -> . id . id
    (132) id -> . ID
    ACTION          shift and go to state 123
    ID              shift and go to state 13

    actionLiteral                  shift and go to state 121
    actionName                     shift and go to state 122
    id                             shift and go to state 124

state 88

    (50) conditional -> IF uncontrolledSegment . nodeBody conditionalTerminator
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 135 (empty -> .)
    ENDIF           reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELIF            reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 42
    nodeBody                       shift and go to state 125
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 89

    (37) chance -> chanceHeader actionTypeStart . nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ELSEC           reduce using rule 135 (empty -> .)
    ELSECHANCE      reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    chanceHeader                   shift and go to state 49
    nodeBody                       shift and go to state 126
    uncontrolledSegment            shift and go to state 42
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 90

    (44) chanceHeader -> CHANCE ( . id )
    (45) chanceHeader -> CHANCE ( . numeric )
    (132) id -> . ID
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    id                             shift and go to state 127
    numeric                        shift and go to state 128

state 91

    (114) registerType -> [ registerContent . ]
    ]               shift and go to state 129


state 92

    (115) registerContent -> regRef . regComp regVal
    (116) registerContent -> regRef . regOp
    (119) regComp -> . NEQ
    (120) regComp -> . GT
    (121) regComp -> . GEQ
    (122) regComp -> . LT
    (123) regComp -> . LEQ
    (124) regComp -> . EQ
    (117) regOp -> . RESET
    (118) regOp -> . INCREMENT
    NEQ             shift and go to state 132
    GT              shift and go to state 133
    GEQ             shift and go to state 134
    LT              shift and go to state 135
    LEQ             shift and go to state 136
    EQ              shift and go to state 137
    RESET           shift and go to state 138
    INCREMENT       shift and go to state 139

    regComp                        shift and go to state 130
    regOp                          shift and go to state 131

state 93

    (125) regRef -> REG .
    NEQ             reduce using rule 125 (regRef -> REG .)
    GT              reduce using rule 125 (regRef -> REG .)
    GEQ             reduce using rule 125 (regRef -> REG .)
    LT              reduce using rule 125 (regRef -> REG .)
    LEQ             reduce using rule 125 (regRef -> REG .)
    EQ              reduce using rule 125 (regRef -> REG .)
    RESET           reduce using rule 125 (regRef -> REG .)
    INCREMENT       reduce using rule 125 (regRef -> REG .)


state 94

    (126) regRef -> id .
    NEQ             reduce using rule 126 (regRef -> id .)
    GT              reduce using rule 126 (regRef -> id .)
    GEQ             reduce using rule 126 (regRef -> id .)
    LT              reduce using rule 126 (regRef -> id .)
    LEQ             reduce using rule 126 (regRef -> id .)
    EQ              reduce using rule 126 (regRef -> id .)
    RESET           reduce using rule 126 (regRef -> id .)
    INCREMENT       reduce using rule 126 (regRef -> id .)


state 95

    (85) functionLiteral -> FUNCTION maybeFuncLiteralParens .
    DO_ACTION       reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    DO_CALL         reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    DO_DIRECTIVE    reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    META            reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)
    LINESKIP        reduce using rule 85 (functionLiteral -> FUNCTION maybeFuncLiteralParens .)


state 96

    (86) maybeFuncLiteralParens -> funcParens .
    DO_ACTION       reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    DO_CALL         reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    DO_DIRECTIVE    reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    META            reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)
    LINESKIP        reduce using rule 86 (maybeFuncLiteralParens -> funcParens .)


state 97

    (87) maybeFuncLiteralParens -> ( . )
    (91) funcParens -> ( . numericSymbol commaPrefacedId )
    (92) funcParens -> ( . id . id commaPrefacedId )
    (128) numericSymbol -> . numeric
    (129) numericSymbol -> . id
    (132) id -> . ID
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    )               shift and go to state 140
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numericSymbol                  shift and go to state 141
    id                             shift and go to state 142
    numeric                        shift and go to state 143

state 98

    (88) maybeFuncLiteralParens -> empty .
    DO_ACTION       reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    DO_CALL         reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    DO_DIRECTIVE    reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    META            reduce using rule 88 (maybeFuncLiteralParens -> empty .)
    LINESKIP        reduce using rule 88 (maybeFuncLiteralParens -> empty .)


state 99

    (76) functionName -> FUNCTION_START id . maybeParens maybeSubFunction
    (77) functionName -> FUNCTION_START id . parens
    (78) functionName -> FUNCTION_START id .
    (81) maybeParens -> . empty
    (82) maybeParens -> . parens
    (83) parens -> . funcParens
    (84) parens -> . ( )
    (135) empty -> .
    (91) funcParens -> . ( numericSymbol commaPrefacedId )
    (92) funcParens -> . ( id . id commaPrefacedId )
    DO_ACTION       reduce using rule 78 (functionName -> FUNCTION_START id .)
    DO_CALL         reduce using rule 78 (functionName -> FUNCTION_START id .)
    DO_DIRECTIVE    reduce using rule 78 (functionName -> FUNCTION_START id .)
    META            reduce using rule 78 (functionName -> FUNCTION_START id .)
    LINESKIP        reduce using rule 78 (functionName -> FUNCTION_START id .)
    (               shift and go to state 148
    .               reduce using rule 135 (empty -> .)

    maybeParens                    shift and go to state 144
    parens                         shift and go to state 145
    empty                          shift and go to state 146
    funcParens                     shift and go to state 147

state 100

    (19) defHeader -> DEF id nodeAlias . nodeIndex skip
    (22) nodeIndex -> . empty
    (23) nodeIndex -> . META numeric
    (24) nodeIndex -> . : numeric META numeric
    (25) nodeIndex -> . : numeric
    (135) empty -> .
    META            shift and go to state 151
    :               shift and go to state 152
    LINESKIP        reduce using rule 135 (empty -> .)

    nodeIndex                      shift and go to state 149
    empty                          shift and go to state 150

state 101

    (20) nodeAlias -> empty .
    META            reduce using rule 20 (nodeAlias -> empty .)
    :               reduce using rule 20 (nodeAlias -> empty .)
    LINESKIP        reduce using rule 20 (nodeAlias -> empty .)


state 102

    (21) nodeAlias -> & . id nodeAlias
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 153

state 103

    (15) assignment -> id ASSIGN numeric skip .
    REGISTER        reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    IMPORTACTIONS   reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    IMPORTLIBRARY   reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    ID              reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    DEF             reduce using rule 15 (assignment -> id ASSIGN numeric skip .)
    $end            reduce using rule 15 (assignment -> id ASSIGN numeric skip .)


state 104

    (13) registerDeclaration -> REGISTER id AS REG . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 154

state 105

    (11) actionImport -> IMPORTACTIONS ID AS ID . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 155

state 106

    (12) actionImport -> IMPORTACTIONS PATH AS ID . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 156

state 107

    (8) libraryImport -> IMPORTLIBRARY numeric AS ID . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 157

state 108

    (9) libraryImport -> IMPORTLIBRARY ID AS ID . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 158

state 109

    (10) libraryImport -> IMPORTLIBRARY PATH AS ID . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 159

state 110

    (28) nodeEnd -> ENDFUNCTION maybeMetaType . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 160

state 111

    (29) nodeEnd -> ENDDEF maybeMetaType . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 161

state 112

    (30) nodeEnd -> ENDF maybeMetaType . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 162

state 113

    (55) uncontrolledSegment -> directiveName maybeMetaType skip .
    DO_NOTHING      reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    UNSAFE          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    CONCLUDE        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    IF              reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    REPEAT          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RESET           reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    RETURN          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    CHANCE          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    [               reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    FUNCTION        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    FUNCTION_START  reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_ACTION       reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_CALL         reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    DO_DIRECTIVE    reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    META            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    LINESKIP        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDFUNCTION     reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDDEF          reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDF            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDWITH         reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDIF           reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSE            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELIF            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSEC           reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ELSECHANCE      reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDCHANCEWITH   reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDCWITH        reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDCHANCE       reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)
    ENDC            reduce using rule 55 (uncontrolledSegment -> directiveName maybeMetaType skip .)


state 114

    (75) metaType -> META metaparams .
    LINESKIP        reduce using rule 75 (metaType -> META metaparams .)


state 115

    (111) metaparams -> metaparamPair . , metaparams
    (112) metaparams -> metaparamPair .
    ,               shift and go to state 163
    LINESKIP        reduce using rule 112 (metaparams -> metaparamPair .)


state 116

    (113) metaparamPair -> id . : numericSymbol
    :               shift and go to state 164


state 117

    (57) actionTypeStart -> maybeActionType maybeCallType . maybeDirectiveType maybeMetaType skip
    (64) maybeDirectiveType -> . empty
    (65) maybeDirectiveType -> . directiveType
    (135) empty -> .
    (74) directiveType -> . DO_DIRECTIVE directiveName
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    shift and go to state 168

    maybeDirectiveType             shift and go to state 165
    empty                          shift and go to state 166
    directiveType                  shift and go to state 167

state 118

    (62) maybeCallType -> empty .
    DO_DIRECTIVE    reduce using rule 62 (maybeCallType -> empty .)
    META            reduce using rule 62 (maybeCallType -> empty .)
    LINESKIP        reduce using rule 62 (maybeCallType -> empty .)


state 119

    (63) maybeCallType -> callType .
    DO_DIRECTIVE    reduce using rule 63 (maybeCallType -> callType .)
    META            reduce using rule 63 (maybeCallType -> callType .)
    LINESKIP        reduce using rule 63 (maybeCallType -> callType .)


state 120

    (73) callType -> DO_CALL . callName
    (104) callName -> . CALL
    (105) callName -> . id
    (106) callName -> . id . CALL
    (107) callName -> . id . id
    (132) id -> . ID
    CALL            shift and go to state 170
    ID              shift and go to state 13

    callName                       shift and go to state 169
    id                             shift and go to state 171

state 121

    (71) actionType -> DO_ACTION actionLiteral . actionParens
    (96) actionParens -> . ( maybeActionParams )
    (               shift and go to state 173

    actionParens                   shift and go to state 172

state 122

    (72) actionType -> DO_ACTION actionName . actionParens
    (96) actionParens -> . ( maybeActionParams )
    (               shift and go to state 173

    actionParens                   shift and go to state 174

state 123

    (103) actionLiteral -> ACTION .
    (               reduce using rule 103 (actionLiteral -> ACTION .)


state 124

    (101) actionName -> id .
    (102) actionName -> id . . id
    (               reduce using rule 101 (actionName -> id .)
    .               shift and go to state 175


state 125

    (50) conditional -> IF uncontrolledSegment nodeBody . conditionalTerminator
    (51) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (52) conditionalTerminator -> . ENDIF skip
    (53) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (54) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 177
    ENDIF           shift and go to state 178
    ELSE            shift and go to state 179
    ELIF            shift and go to state 180

    conditionalTerminator          shift and go to state 176

state 126

    (37) chance -> chanceHeader actionTypeStart nodeBody . chanceBody uncontrolledSegment nodeBody optionalChance
    (46) chanceBody -> . elsechance ( id )
    (47) chanceBody -> . elsechance ( numeric )
    (48) elsechance -> . ELSEC
    (49) elsechance -> . ELSECHANCE
    ELSEC           shift and go to state 183
    ELSECHANCE      shift and go to state 184

    chanceBody                     shift and go to state 181
    elsechance                     shift and go to state 182

state 127

    (44) chanceHeader -> CHANCE ( id . )
    )               shift and go to state 185


state 128

    (45) chanceHeader -> CHANCE ( numeric . )
    )               shift and go to state 186


state 129

    (114) registerType -> [ registerContent ] .
    DO_ACTION       reduce using rule 114 (registerType -> [ registerContent ] .)
    DO_CALL         reduce using rule 114 (registerType -> [ registerContent ] .)
    DO_DIRECTIVE    reduce using rule 114 (registerType -> [ registerContent ] .)
    META            reduce using rule 114 (registerType -> [ registerContent ] .)
    LINESKIP        reduce using rule 114 (registerType -> [ registerContent ] .)


state 130

    (115) registerContent -> regRef regComp . regVal
    (127) regVal -> . numericSymbol
    (128) numericSymbol -> . numeric
    (129) numericSymbol -> . id
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    (132) id -> . ID
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 13

    regVal                         shift and go to state 187
    numericSymbol                  shift and go to state 188
    numeric                        shift and go to state 143
    id                             shift and go to state 189

state 131

    (116) registerContent -> regRef regOp .
    ]               reduce using rule 116 (registerContent -> regRef regOp .)


state 132

    (119) regComp -> NEQ .
    HEXNUMBER       reduce using rule 119 (regComp -> NEQ .)
    NUMBER          reduce using rule 119 (regComp -> NEQ .)
    ID              reduce using rule 119 (regComp -> NEQ .)


state 133

    (120) regComp -> GT .
    HEXNUMBER       reduce using rule 120 (regComp -> GT .)
    NUMBER          reduce using rule 120 (regComp -> GT .)
    ID              reduce using rule 120 (regComp -> GT .)


state 134

    (121) regComp -> GEQ .
    HEXNUMBER       reduce using rule 121 (regComp -> GEQ .)
    NUMBER          reduce using rule 121 (regComp -> GEQ .)
    ID              reduce using rule 121 (regComp -> GEQ .)


state 135

    (122) regComp -> LT .
    HEXNUMBER       reduce using rule 122 (regComp -> LT .)
    NUMBER          reduce using rule 122 (regComp -> LT .)
    ID              reduce using rule 122 (regComp -> LT .)


state 136

    (123) regComp -> LEQ .
    HEXNUMBER       reduce using rule 123 (regComp -> LEQ .)
    NUMBER          reduce using rule 123 (regComp -> LEQ .)
    ID              reduce using rule 123 (regComp -> LEQ .)


state 137

    (124) regComp -> EQ .
    HEXNUMBER       reduce using rule 124 (regComp -> EQ .)
    NUMBER          reduce using rule 124 (regComp -> EQ .)
    ID              reduce using rule 124 (regComp -> EQ .)


state 138

    (117) regOp -> RESET .
    ]               reduce using rule 117 (regOp -> RESET .)


state 139

    (118) regOp -> INCREMENT .
    ]               reduce using rule 118 (regOp -> INCREMENT .)


state 140

    (87) maybeFuncLiteralParens -> ( ) .
    DO_ACTION       reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    DO_CALL         reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    DO_DIRECTIVE    reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    META            reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)
    LINESKIP        reduce using rule 87 (maybeFuncLiteralParens -> ( ) .)


state 141

    (91) funcParens -> ( numericSymbol . commaPrefacedId )
    (93) commaPrefacedId -> . , numericSymbol commaPrefacedId
    (94) commaPrefacedId -> . , id . id commaPrefacedId
    (95) commaPrefacedId -> . empty
    (135) empty -> .
    ,               shift and go to state 191
    )               reduce using rule 135 (empty -> .)

    commaPrefacedId                shift and go to state 190
    empty                          shift and go to state 192

state 142

    (92) funcParens -> ( id . . id commaPrefacedId )
    (129) numericSymbol -> id .
    .               shift and go to state 193
    ,               reduce using rule 129 (numericSymbol -> id .)
    )               reduce using rule 129 (numericSymbol -> id .)


state 143

    (128) numericSymbol -> numeric .
    ,               reduce using rule 128 (numericSymbol -> numeric .)
    )               reduce using rule 128 (numericSymbol -> numeric .)
    ]               reduce using rule 128 (numericSymbol -> numeric .)
    LINESKIP        reduce using rule 128 (numericSymbol -> numeric .)


state 144

    (76) functionName -> FUNCTION_START id maybeParens . maybeSubFunction
    (79) maybeSubFunction -> . . id parens maybeSubFunction
    (80) maybeSubFunction -> . . id maybeParens
    .               shift and go to state 195

    maybeSubFunction               shift and go to state 194

state 145

    (77) functionName -> FUNCTION_START id parens .
    (82) maybeParens -> parens .
    DO_ACTION       reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    DO_CALL         reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    DO_DIRECTIVE    reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    META            reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    LINESKIP        reduce using rule 77 (functionName -> FUNCTION_START id parens .)
    .               reduce using rule 82 (maybeParens -> parens .)


state 146

    (81) maybeParens -> empty .
    .               reduce using rule 81 (maybeParens -> empty .)
    DO_ACTION       reduce using rule 81 (maybeParens -> empty .)
    DO_CALL         reduce using rule 81 (maybeParens -> empty .)
    DO_DIRECTIVE    reduce using rule 81 (maybeParens -> empty .)
    META            reduce using rule 81 (maybeParens -> empty .)
    LINESKIP        reduce using rule 81 (maybeParens -> empty .)


state 147

    (83) parens -> funcParens .
    DO_ACTION       reduce using rule 83 (parens -> funcParens .)
    DO_CALL         reduce using rule 83 (parens -> funcParens .)
    DO_DIRECTIVE    reduce using rule 83 (parens -> funcParens .)
    META            reduce using rule 83 (parens -> funcParens .)
    LINESKIP        reduce using rule 83 (parens -> funcParens .)
    .               reduce using rule 83 (parens -> funcParens .)


state 148

    (84) parens -> ( . )
    (91) funcParens -> ( . numericSymbol commaPrefacedId )
    (92) funcParens -> ( . id . id commaPrefacedId )
    (128) numericSymbol -> . numeric
    (129) numericSymbol -> . id
    (132) id -> . ID
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    )               shift and go to state 196
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numericSymbol                  shift and go to state 141
    id                             shift and go to state 142
    numeric                        shift and go to state 143

state 149

    (19) defHeader -> DEF id nodeAlias nodeIndex . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 197

state 150

    (22) nodeIndex -> empty .
    LINESKIP        reduce using rule 22 (nodeIndex -> empty .)


state 151

    (23) nodeIndex -> META . numeric
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 198

state 152

    (24) nodeIndex -> : . numeric META numeric
    (25) nodeIndex -> : . numeric
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 199

state 153

    (21) nodeAlias -> & id . nodeAlias
    (20) nodeAlias -> . empty
    (21) nodeAlias -> . & id nodeAlias
    (135) empty -> .
    &               shift and go to state 102
    META            reduce using rule 135 (empty -> .)
    :               reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)

    nodeAlias                      shift and go to state 200
    empty                          shift and go to state 101

state 154

    (13) registerDeclaration -> REGISTER id AS REG skip .
    REGISTER        reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    IMPORTACTIONS   reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    IMPORTLIBRARY   reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    ID              reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    DEF             reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)
    $end            reduce using rule 13 (registerDeclaration -> REGISTER id AS REG skip .)


state 155

    (11) actionImport -> IMPORTACTIONS ID AS ID skip .
    REGISTER        reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    IMPORTACTIONS   reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    IMPORTLIBRARY   reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    ID              reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    DEF             reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)
    $end            reduce using rule 11 (actionImport -> IMPORTACTIONS ID AS ID skip .)


state 156

    (12) actionImport -> IMPORTACTIONS PATH AS ID skip .
    REGISTER        reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    IMPORTACTIONS   reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    IMPORTLIBRARY   reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    ID              reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    DEF             reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)
    $end            reduce using rule 12 (actionImport -> IMPORTACTIONS PATH AS ID skip .)


state 157

    (8) libraryImport -> IMPORTLIBRARY numeric AS ID skip .
    REGISTER        reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    IMPORTACTIONS   reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    IMPORTLIBRARY   reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    ID              reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    DEF             reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)
    $end            reduce using rule 8 (libraryImport -> IMPORTLIBRARY numeric AS ID skip .)


state 158

    (9) libraryImport -> IMPORTLIBRARY ID AS ID skip .
    REGISTER        reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    IMPORTACTIONS   reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    IMPORTLIBRARY   reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    ID              reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    DEF             reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)
    $end            reduce using rule 9 (libraryImport -> IMPORTLIBRARY ID AS ID skip .)


state 159

    (10) libraryImport -> IMPORTLIBRARY PATH AS ID skip .
    REGISTER        reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    IMPORTACTIONS   reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    IMPORTLIBRARY   reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    ID              reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    DEF             reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)
    $end            reduce using rule 10 (libraryImport -> IMPORTLIBRARY PATH AS ID skip .)


state 160

    (28) nodeEnd -> ENDFUNCTION maybeMetaType skip .
    DEF             reduce using rule 28 (nodeEnd -> ENDFUNCTION maybeMetaType skip .)
    $end            reduce using rule 28 (nodeEnd -> ENDFUNCTION maybeMetaType skip .)


state 161

    (29) nodeEnd -> ENDDEF maybeMetaType skip .
    DEF             reduce using rule 29 (nodeEnd -> ENDDEF maybeMetaType skip .)
    $end            reduce using rule 29 (nodeEnd -> ENDDEF maybeMetaType skip .)


state 162

    (30) nodeEnd -> ENDF maybeMetaType skip .
    DEF             reduce using rule 30 (nodeEnd -> ENDF maybeMetaType skip .)
    $end            reduce using rule 30 (nodeEnd -> ENDF maybeMetaType skip .)


state 163

    (111) metaparams -> metaparamPair , . metaparams
    (111) metaparams -> . metaparamPair , metaparams
    (112) metaparams -> . metaparamPair
    (113) metaparamPair -> . id : numericSymbol
    (132) id -> . ID
    ID              shift and go to state 13

    metaparamPair                  shift and go to state 115
    metaparams                     shift and go to state 201
    id                             shift and go to state 116

state 164

    (113) metaparamPair -> id : . numericSymbol
    (128) numericSymbol -> . numeric
    (129) numericSymbol -> . id
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    (132) id -> . ID
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    ID              shift and go to state 13

    id                             shift and go to state 189
    numericSymbol                  shift and go to state 202
    numeric                        shift and go to state 143

state 165

    (57) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType . maybeMetaType skip
    (66) maybeMetaType -> . empty
    (67) maybeMetaType -> . metaType
    (135) empty -> .
    (75) metaType -> . META metaparams
    LINESKIP        reduce using rule 135 (empty -> .)
    META            shift and go to state 82

    maybeMetaType                  shift and go to state 203
    empty                          shift and go to state 80
    metaType                       shift and go to state 81

state 166

    (64) maybeDirectiveType -> empty .
    META            reduce using rule 64 (maybeDirectiveType -> empty .)
    LINESKIP        reduce using rule 64 (maybeDirectiveType -> empty .)


state 167

    (65) maybeDirectiveType -> directiveType .
    META            reduce using rule 65 (maybeDirectiveType -> directiveType .)
    LINESKIP        reduce using rule 65 (maybeDirectiveType -> directiveType .)


state 168

    (74) directiveType -> DO_DIRECTIVE . directiveName
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52

    directiveName                  shift and go to state 204

state 169

    (73) callType -> DO_CALL callName .
    DO_DIRECTIVE    reduce using rule 73 (callType -> DO_CALL callName .)
    META            reduce using rule 73 (callType -> DO_CALL callName .)
    LINESKIP        reduce using rule 73 (callType -> DO_CALL callName .)


state 170

    (104) callName -> CALL .
    DO_DIRECTIVE    reduce using rule 104 (callName -> CALL .)
    META            reduce using rule 104 (callName -> CALL .)
    LINESKIP        reduce using rule 104 (callName -> CALL .)


state 171

    (105) callName -> id .
    (106) callName -> id . . CALL
    (107) callName -> id . . id
    DO_DIRECTIVE    reduce using rule 105 (callName -> id .)
    META            reduce using rule 105 (callName -> id .)
    LINESKIP        reduce using rule 105 (callName -> id .)
    .               shift and go to state 205


state 172

    (71) actionType -> DO_ACTION actionLiteral actionParens .
    DO_CALL         reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)
    DO_DIRECTIVE    reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)
    META            reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)
    LINESKIP        reduce using rule 71 (actionType -> DO_ACTION actionLiteral actionParens .)


state 173

    (96) actionParens -> ( . maybeActionParams )
    (97) maybeActionParams -> . numeric maybeMoreActionParams
    (98) maybeActionParams -> . empty
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    (135) empty -> .
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34
    )               reduce using rule 135 (empty -> .)

    maybeActionParams              shift and go to state 206
    numeric                        shift and go to state 207
    empty                          shift and go to state 208

state 174

    (72) actionType -> DO_ACTION actionName actionParens .
    DO_CALL         reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)
    DO_DIRECTIVE    reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)
    META            reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)
    LINESKIP        reduce using rule 72 (actionType -> DO_ACTION actionName actionParens .)


state 175

    (102) actionName -> id . . id
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 209

state 176

    (50) conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    IF              reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RESET           reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    RETURN          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    CHANCE          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    [               reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    META            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDF            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSE            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELIF            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSEC           reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ELSECHANCE      reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDCHANCEWITH   reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDCWITH        reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDCHANCE       reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)
    ENDC            reduce using rule 50 (conditional -> IF uncontrolledSegment nodeBody conditionalTerminator .)


state 177

    (51) conditionalTerminator -> ENDWITH . uncontrolledSegment
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (135) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 210
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 178

    (52) conditionalTerminator -> ENDIF . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 211

state 179

    (53) conditionalTerminator -> ELSE . actionTypeStart nodeBody conditionalTerminator
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (135) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 212
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 180

    (54) conditionalTerminator -> ELIF . functionType actionTypeStart nodeBody conditionalTerminator
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    functionType                   shift and go to state 213
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 181

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody . uncontrolledSegment nodeBody optionalChance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (135) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 214
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 182

    (46) chanceBody -> elsechance . ( id )
    (47) chanceBody -> elsechance . ( numeric )
    (               shift and go to state 215


state 183

    (48) elsechance -> ELSEC .
    (               reduce using rule 48 (elsechance -> ELSEC .)


state 184

    (49) elsechance -> ELSECHANCE .
    (               reduce using rule 49 (elsechance -> ELSECHANCE .)


state 185

    (44) chanceHeader -> CHANCE ( id ) .
    DO_ACTION       reduce using rule 44 (chanceHeader -> CHANCE ( id ) .)
    DO_CALL         reduce using rule 44 (chanceHeader -> CHANCE ( id ) .)
    DO_DIRECTIVE    reduce using rule 44 (chanceHeader -> CHANCE ( id ) .)
    META            reduce using rule 44 (chanceHeader -> CHANCE ( id ) .)
    LINESKIP        reduce using rule 44 (chanceHeader -> CHANCE ( id ) .)


state 186

    (45) chanceHeader -> CHANCE ( numeric ) .
    DO_ACTION       reduce using rule 45 (chanceHeader -> CHANCE ( numeric ) .)
    DO_CALL         reduce using rule 45 (chanceHeader -> CHANCE ( numeric ) .)
    DO_DIRECTIVE    reduce using rule 45 (chanceHeader -> CHANCE ( numeric ) .)
    META            reduce using rule 45 (chanceHeader -> CHANCE ( numeric ) .)
    LINESKIP        reduce using rule 45 (chanceHeader -> CHANCE ( numeric ) .)


state 187

    (115) registerContent -> regRef regComp regVal .
    ]               reduce using rule 115 (registerContent -> regRef regComp regVal .)


state 188

    (127) regVal -> numericSymbol .
    ]               reduce using rule 127 (regVal -> numericSymbol .)


state 189

    (129) numericSymbol -> id .
    ]               reduce using rule 129 (numericSymbol -> id .)
    ,               reduce using rule 129 (numericSymbol -> id .)
    LINESKIP        reduce using rule 129 (numericSymbol -> id .)


state 190

    (91) funcParens -> ( numericSymbol commaPrefacedId . )
    )               shift and go to state 216


state 191

    (93) commaPrefacedId -> , . numericSymbol commaPrefacedId
    (94) commaPrefacedId -> , . id . id commaPrefacedId
    (128) numericSymbol -> . numeric
    (129) numericSymbol -> . id
    (132) id -> . ID
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numericSymbol                  shift and go to state 217
    id                             shift and go to state 218
    numeric                        shift and go to state 143

state 192

    (95) commaPrefacedId -> empty .
    )               reduce using rule 95 (commaPrefacedId -> empty .)


state 193

    (92) funcParens -> ( id . . id commaPrefacedId )
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 219

state 194

    (76) functionName -> FUNCTION_START id maybeParens maybeSubFunction .
    DO_ACTION       reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    DO_CALL         reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    DO_DIRECTIVE    reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    META            reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)
    LINESKIP        reduce using rule 76 (functionName -> FUNCTION_START id maybeParens maybeSubFunction .)


state 195

    (79) maybeSubFunction -> . . id parens maybeSubFunction
    (80) maybeSubFunction -> . . id maybeParens
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 220

state 196

    (84) parens -> ( ) .
    DO_ACTION       reduce using rule 84 (parens -> ( ) .)
    DO_CALL         reduce using rule 84 (parens -> ( ) .)
    DO_DIRECTIVE    reduce using rule 84 (parens -> ( ) .)
    META            reduce using rule 84 (parens -> ( ) .)
    LINESKIP        reduce using rule 84 (parens -> ( ) .)
    .               reduce using rule 84 (parens -> ( ) .)


state 197

    (19) defHeader -> DEF id nodeAlias nodeIndex skip .
    DO_NOTHING      reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    UNSAFE          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    CONCLUDE        reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    IF              reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    REPEAT          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RESET           reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    RETURN          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    CHANCE          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    [               reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    FUNCTION        reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    FUNCTION_START  reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDFUNCTION     reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDDEF          reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    ENDF            reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_ACTION       reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_CALL         reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    DO_DIRECTIVE    reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    META            reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)
    LINESKIP        reduce using rule 19 (defHeader -> DEF id nodeAlias nodeIndex skip .)


state 198

    (23) nodeIndex -> META numeric .
    LINESKIP        reduce using rule 23 (nodeIndex -> META numeric .)


state 199

    (24) nodeIndex -> : numeric . META numeric
    (25) nodeIndex -> : numeric .
    META            shift and go to state 221
    LINESKIP        reduce using rule 25 (nodeIndex -> : numeric .)


state 200

    (21) nodeAlias -> & id nodeAlias .
    META            reduce using rule 21 (nodeAlias -> & id nodeAlias .)
    :               reduce using rule 21 (nodeAlias -> & id nodeAlias .)
    LINESKIP        reduce using rule 21 (nodeAlias -> & id nodeAlias .)


state 201

    (111) metaparams -> metaparamPair , metaparams .
    LINESKIP        reduce using rule 111 (metaparams -> metaparamPair , metaparams .)


state 202

    (113) metaparamPair -> id : numericSymbol .
    ,               reduce using rule 113 (metaparamPair -> id : numericSymbol .)
    LINESKIP        reduce using rule 113 (metaparamPair -> id : numericSymbol .)


state 203

    (57) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 222

state 204

    (74) directiveType -> DO_DIRECTIVE directiveName .
    META            reduce using rule 74 (directiveType -> DO_DIRECTIVE directiveName .)
    LINESKIP        reduce using rule 74 (directiveType -> DO_DIRECTIVE directiveName .)


state 205

    (106) callName -> id . . CALL
    (107) callName -> id . . id
    (132) id -> . ID
    CALL            shift and go to state 224
    ID              shift and go to state 13

    id                             shift and go to state 223

state 206

    (96) actionParens -> ( maybeActionParams . )
    )               shift and go to state 225


state 207

    (97) maybeActionParams -> numeric . maybeMoreActionParams
    (99) maybeMoreActionParams -> . , numeric maybeMoreActionParams
    (100) maybeMoreActionParams -> . empty
    (135) empty -> .
    ,               shift and go to state 227
    )               reduce using rule 135 (empty -> .)

    maybeMoreActionParams          shift and go to state 226
    empty                          shift and go to state 228

state 208

    (98) maybeActionParams -> empty .
    )               reduce using rule 98 (maybeActionParams -> empty .)


state 209

    (102) actionName -> id . id .
    (               reduce using rule 102 (actionName -> id . id .)


state 210

    (51) conditionalTerminator -> ENDWITH uncontrolledSegment .
    DO_NOTHING      reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    UNSAFE          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    CONCLUDE        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    IF              reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    REPEAT          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RESET           reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    RETURN          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    CHANCE          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    [               reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    FUNCTION        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    FUNCTION_START  reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_ACTION       reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_CALL         reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    DO_DIRECTIVE    reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    META            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    LINESKIP        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDFUNCTION     reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDDEF          reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDF            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDWITH         reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDIF           reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSE            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELIF            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSEC           reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ELSECHANCE      reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDCHANCEWITH   reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDCWITH        reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDCHANCE       reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)
    ENDC            reduce using rule 51 (conditionalTerminator -> ENDWITH uncontrolledSegment .)


state 211

    (52) conditionalTerminator -> ENDIF skip .
    DO_NOTHING      reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    UNSAFE          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    CONCLUDE        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    IF              reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    REPEAT          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    RESET           reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    RETURN          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    CHANCE          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    [               reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    FUNCTION        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    FUNCTION_START  reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    DO_ACTION       reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    DO_CALL         reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    DO_DIRECTIVE    reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    META            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    LINESKIP        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDFUNCTION     reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDDEF          reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDF            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDWITH         reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDIF           reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELSE            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELIF            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELSEC           reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ELSECHANCE      reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDCHANCEWITH   reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDCWITH        reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDCHANCE       reduce using rule 52 (conditionalTerminator -> ENDIF skip .)
    ENDC            reduce using rule 52 (conditionalTerminator -> ENDIF skip .)


state 212

    (53) conditionalTerminator -> ELSE actionTypeStart . nodeBody conditionalTerminator
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 135 (empty -> .)
    ENDIF           reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELIF            reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    nodeBody                       shift and go to state 229
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 213

    (54) conditionalTerminator -> ELIF functionType . actionTypeStart nodeBody conditionalTerminator
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (135) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 230
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 214

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment . nodeBody optionalChance
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDCHANCEWITH   reduce using rule 135 (empty -> .)
    ENDCWITH        reduce using rule 135 (empty -> .)
    ENDCHANCE       reduce using rule 135 (empty -> .)
    ENDC            reduce using rule 135 (empty -> .)
    ELSEC           reduce using rule 135 (empty -> .)
    ELSECHANCE      reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    chanceHeader                   shift and go to state 49
    nodeBody                       shift and go to state 231
    uncontrolledSegment            shift and go to state 42
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 215

    (46) chanceBody -> elsechance ( . id )
    (47) chanceBody -> elsechance ( . numeric )
    (132) id -> . ID
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    ID              shift and go to state 13
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    id                             shift and go to state 232
    numeric                        shift and go to state 233

state 216

    (91) funcParens -> ( numericSymbol commaPrefacedId ) .
    DO_ACTION       reduce using rule 91 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    DO_CALL         reduce using rule 91 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    DO_DIRECTIVE    reduce using rule 91 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    META            reduce using rule 91 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    LINESKIP        reduce using rule 91 (funcParens -> ( numericSymbol commaPrefacedId ) .)
    .               reduce using rule 91 (funcParens -> ( numericSymbol commaPrefacedId ) .)


state 217

    (93) commaPrefacedId -> , numericSymbol . commaPrefacedId
    (93) commaPrefacedId -> . , numericSymbol commaPrefacedId
    (94) commaPrefacedId -> . , id . id commaPrefacedId
    (95) commaPrefacedId -> . empty
    (135) empty -> .
    ,               shift and go to state 191
    )               reduce using rule 135 (empty -> .)

    commaPrefacedId                shift and go to state 234
    empty                          shift and go to state 192

state 218

    (94) commaPrefacedId -> , id . . id commaPrefacedId
    (129) numericSymbol -> id .
    .               shift and go to state 235
    ,               reduce using rule 129 (numericSymbol -> id .)
    )               reduce using rule 129 (numericSymbol -> id .)


state 219

    (92) funcParens -> ( id . id . commaPrefacedId )
    (93) commaPrefacedId -> . , numericSymbol commaPrefacedId
    (94) commaPrefacedId -> . , id . id commaPrefacedId
    (95) commaPrefacedId -> . empty
    (135) empty -> .
    ,               shift and go to state 191
    )               reduce using rule 135 (empty -> .)

    commaPrefacedId                shift and go to state 236
    empty                          shift and go to state 192

state 220

    (79) maybeSubFunction -> . id . parens maybeSubFunction
    (80) maybeSubFunction -> . id . maybeParens
    (83) parens -> . funcParens
    (84) parens -> . ( )
    (81) maybeParens -> . empty
    (82) maybeParens -> . parens
    (91) funcParens -> . ( numericSymbol commaPrefacedId )
    (92) funcParens -> . ( id . id commaPrefacedId )
    (135) empty -> .
    (               shift and go to state 148
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)

    parens                         shift and go to state 237
    maybeParens                    shift and go to state 238
    funcParens                     shift and go to state 147
    empty                          shift and go to state 146

state 221

    (24) nodeIndex -> : numeric META . numeric
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 239

state 222

    (57) actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .
    DO_NOTHING      reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    UNSAFE          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    CONCLUDE        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    IF              reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    REPEAT          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RESET           reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    RETURN          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    CHANCE          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    [               reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    FUNCTION        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    FUNCTION_START  reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_ACTION       reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_CALL         reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    DO_DIRECTIVE    reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    META            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    LINESKIP        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDFUNCTION     reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDDEF          reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDF            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDWITH         reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDIF           reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSE            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELIF            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSEC           reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ELSECHANCE      reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDCHANCEWITH   reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDCWITH        reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDCHANCE       reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)
    ENDC            reduce using rule 57 (actionTypeStart -> maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip .)


state 223

    (107) callName -> id . id .
    DO_DIRECTIVE    reduce using rule 107 (callName -> id . id .)
    META            reduce using rule 107 (callName -> id . id .)
    LINESKIP        reduce using rule 107 (callName -> id . id .)


state 224

    (106) callName -> id . CALL .
    DO_DIRECTIVE    reduce using rule 106 (callName -> id . CALL .)
    META            reduce using rule 106 (callName -> id . CALL .)
    LINESKIP        reduce using rule 106 (callName -> id . CALL .)


state 225

    (96) actionParens -> ( maybeActionParams ) .
    DO_CALL         reduce using rule 96 (actionParens -> ( maybeActionParams ) .)
    DO_DIRECTIVE    reduce using rule 96 (actionParens -> ( maybeActionParams ) .)
    META            reduce using rule 96 (actionParens -> ( maybeActionParams ) .)
    LINESKIP        reduce using rule 96 (actionParens -> ( maybeActionParams ) .)


state 226

    (97) maybeActionParams -> numeric maybeMoreActionParams .
    )               reduce using rule 97 (maybeActionParams -> numeric maybeMoreActionParams .)


state 227

    (99) maybeMoreActionParams -> , . numeric maybeMoreActionParams
    (130) numeric -> . HEXNUMBER
    (131) numeric -> . NUMBER
    HEXNUMBER       shift and go to state 33
    NUMBER          shift and go to state 34

    numeric                        shift and go to state 240

state 228

    (100) maybeMoreActionParams -> empty .
    )               reduce using rule 100 (maybeMoreActionParams -> empty .)


state 229

    (53) conditionalTerminator -> ELSE actionTypeStart nodeBody . conditionalTerminator
    (51) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (52) conditionalTerminator -> . ENDIF skip
    (53) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (54) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 177
    ENDIF           shift and go to state 178
    ELSE            shift and go to state 179
    ELIF            shift and go to state 180

    conditionalTerminator          shift and go to state 241

state 230

    (54) conditionalTerminator -> ELIF functionType actionTypeStart . nodeBody conditionalTerminator
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDWITH         reduce using rule 135 (empty -> .)
    ENDIF           reduce using rule 135 (empty -> .)
    ELSE            reduce using rule 135 (empty -> .)
    ELIF            reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    functionType                   shift and go to state 53
    nodeBody                       shift and go to state 242
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 231

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody . optionalChance
    (38) optionalChance -> . optionalTerminator
    (39) optionalChance -> . chanceBody actionTypeStart nodeBody optionalChance
    (40) optionalTerminator -> . ENDCHANCEWITH uncontrolledSegment skip
    (41) optionalTerminator -> . ENDCWITH uncontrolledSegment skip
    (42) optionalTerminator -> . ENDCHANCE skip
    (43) optionalTerminator -> . ENDC skip
    (46) chanceBody -> . elsechance ( id )
    (47) chanceBody -> . elsechance ( numeric )
    (48) elsechance -> . ELSEC
    (49) elsechance -> . ELSECHANCE
    ENDCHANCEWITH   shift and go to state 246
    ENDCWITH        shift and go to state 247
    ENDCHANCE       shift and go to state 248
    ENDC            shift and go to state 249
    ELSEC           shift and go to state 183
    ELSECHANCE      shift and go to state 184

    chanceBody                     shift and go to state 243
    optionalChance                 shift and go to state 244
    optionalTerminator             shift and go to state 245
    elsechance                     shift and go to state 182

state 232

    (46) chanceBody -> elsechance ( id . )
    )               shift and go to state 250


state 233

    (47) chanceBody -> elsechance ( numeric . )
    )               shift and go to state 251


state 234

    (93) commaPrefacedId -> , numericSymbol commaPrefacedId .
    )               reduce using rule 93 (commaPrefacedId -> , numericSymbol commaPrefacedId .)


state 235

    (94) commaPrefacedId -> , id . . id commaPrefacedId
    (132) id -> . ID
    ID              shift and go to state 13

    id                             shift and go to state 252

state 236

    (92) funcParens -> ( id . id commaPrefacedId . )
    )               shift and go to state 253


state 237

    (79) maybeSubFunction -> . id parens . maybeSubFunction
    (82) maybeParens -> parens .
    (79) maybeSubFunction -> . . id parens maybeSubFunction
    (80) maybeSubFunction -> . . id maybeParens
    DO_ACTION       reduce using rule 82 (maybeParens -> parens .)
    DO_CALL         reduce using rule 82 (maybeParens -> parens .)
    DO_DIRECTIVE    reduce using rule 82 (maybeParens -> parens .)
    META            reduce using rule 82 (maybeParens -> parens .)
    LINESKIP        reduce using rule 82 (maybeParens -> parens .)
    .               shift and go to state 195

    maybeSubFunction               shift and go to state 254

state 238

    (80) maybeSubFunction -> . id maybeParens .
    DO_ACTION       reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    DO_CALL         reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    DO_DIRECTIVE    reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    META            reduce using rule 80 (maybeSubFunction -> . id maybeParens .)
    LINESKIP        reduce using rule 80 (maybeSubFunction -> . id maybeParens .)


state 239

    (24) nodeIndex -> : numeric META numeric .
    LINESKIP        reduce using rule 24 (nodeIndex -> : numeric META numeric .)


state 240

    (99) maybeMoreActionParams -> , numeric . maybeMoreActionParams
    (99) maybeMoreActionParams -> . , numeric maybeMoreActionParams
    (100) maybeMoreActionParams -> . empty
    (135) empty -> .
    ,               shift and go to state 227
    )               reduce using rule 135 (empty -> .)

    maybeMoreActionParams          shift and go to state 255
    empty                          shift and go to state 228

state 241

    (53) conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    IF              reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RESET           reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    RETURN          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    CHANCE          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    [               reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    META            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDF            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSE            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELIF            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSEC           reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ELSECHANCE      reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCEWITH   reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDCWITH        reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCE       reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)
    ENDC            reduce using rule 53 (conditionalTerminator -> ELSE actionTypeStart nodeBody conditionalTerminator .)


state 242

    (54) conditionalTerminator -> ELIF functionType actionTypeStart nodeBody . conditionalTerminator
    (51) conditionalTerminator -> . ENDWITH uncontrolledSegment
    (52) conditionalTerminator -> . ENDIF skip
    (53) conditionalTerminator -> . ELSE actionTypeStart nodeBody conditionalTerminator
    (54) conditionalTerminator -> . ELIF functionType actionTypeStart nodeBody conditionalTerminator
    ENDWITH         shift and go to state 177
    ENDIF           shift and go to state 178
    ELSE            shift and go to state 179
    ELIF            shift and go to state 180

    conditionalTerminator          shift and go to state 256

state 243

    (39) optionalChance -> chanceBody . actionTypeStart nodeBody optionalChance
    (57) actionTypeStart -> . maybeActionType maybeCallType maybeDirectiveType maybeMetaType skip
    (60) maybeActionType -> . empty
    (61) maybeActionType -> . actionType
    (135) empty -> .
    (71) actionType -> . DO_ACTION actionLiteral actionParens
    (72) actionType -> . DO_ACTION actionName actionParens
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_ACTION       shift and go to state 87

    actionTypeStart                shift and go to state 257
    maybeActionType                shift and go to state 84
    empty                          shift and go to state 85
    actionType                     shift and go to state 86

state 244

    (37) chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .
    DO_NOTHING      reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    UNSAFE          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    CONCLUDE        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    IF              reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    REPEAT          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RESET           reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    RETURN          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    CHANCE          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    [               reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    FUNCTION        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    FUNCTION_START  reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_ACTION       reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_CALL         reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    DO_DIRECTIVE    reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    META            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    LINESKIP        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDFUNCTION     reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDDEF          reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDF            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDWITH         reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDIF           reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSE            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELIF            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSEC           reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ELSECHANCE      reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDCHANCEWITH   reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDCWITH        reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDCHANCE       reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)
    ENDC            reduce using rule 37 (chance -> chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance .)


state 245

    (38) optionalChance -> optionalTerminator .
    DO_NOTHING      reduce using rule 38 (optionalChance -> optionalTerminator .)
    UNSAFE          reduce using rule 38 (optionalChance -> optionalTerminator .)
    CONCLUDE        reduce using rule 38 (optionalChance -> optionalTerminator .)
    IF              reduce using rule 38 (optionalChance -> optionalTerminator .)
    REPEAT          reduce using rule 38 (optionalChance -> optionalTerminator .)
    RESET           reduce using rule 38 (optionalChance -> optionalTerminator .)
    RETURN          reduce using rule 38 (optionalChance -> optionalTerminator .)
    CHANCE          reduce using rule 38 (optionalChance -> optionalTerminator .)
    [               reduce using rule 38 (optionalChance -> optionalTerminator .)
    FUNCTION        reduce using rule 38 (optionalChance -> optionalTerminator .)
    FUNCTION_START  reduce using rule 38 (optionalChance -> optionalTerminator .)
    DO_ACTION       reduce using rule 38 (optionalChance -> optionalTerminator .)
    DO_CALL         reduce using rule 38 (optionalChance -> optionalTerminator .)
    DO_DIRECTIVE    reduce using rule 38 (optionalChance -> optionalTerminator .)
    META            reduce using rule 38 (optionalChance -> optionalTerminator .)
    LINESKIP        reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDFUNCTION     reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDDEF          reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDF            reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDWITH         reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDIF           reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELSE            reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELIF            reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELSEC           reduce using rule 38 (optionalChance -> optionalTerminator .)
    ELSECHANCE      reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDCHANCEWITH   reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDCWITH        reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDCHANCE       reduce using rule 38 (optionalChance -> optionalTerminator .)
    ENDC            reduce using rule 38 (optionalChance -> optionalTerminator .)


state 246

    (40) optionalTerminator -> ENDCHANCEWITH . uncontrolledSegment skip
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (135) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 258
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 247

    (41) optionalTerminator -> ENDCWITH . uncontrolledSegment skip
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (135) empty -> .
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    uncontrolledSegment            shift and go to state 259
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    empty                          shift and go to state 78
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 248

    (42) optionalTerminator -> ENDCHANCE . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 260

state 249

    (43) optionalTerminator -> ENDC . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 261

state 250

    (46) chanceBody -> elsechance ( id ) .
    REPEAT          reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    RESET           reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    RETURN          reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    [               reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    FUNCTION        reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    FUNCTION_START  reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    DO_ACTION       reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    DO_CALL         reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    DO_DIRECTIVE    reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    META            reduce using rule 46 (chanceBody -> elsechance ( id ) .)
    LINESKIP        reduce using rule 46 (chanceBody -> elsechance ( id ) .)


state 251

    (47) chanceBody -> elsechance ( numeric ) .
    REPEAT          reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    RESET           reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    RETURN          reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    [               reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    FUNCTION        reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    FUNCTION_START  reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    DO_ACTION       reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    DO_CALL         reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    DO_DIRECTIVE    reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    META            reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)
    LINESKIP        reduce using rule 47 (chanceBody -> elsechance ( numeric ) .)


state 252

    (94) commaPrefacedId -> , id . id . commaPrefacedId
    (93) commaPrefacedId -> . , numericSymbol commaPrefacedId
    (94) commaPrefacedId -> . , id . id commaPrefacedId
    (95) commaPrefacedId -> . empty
    (135) empty -> .
    ,               shift and go to state 191
    )               reduce using rule 135 (empty -> .)

    commaPrefacedId                shift and go to state 262
    empty                          shift and go to state 192

state 253

    (92) funcParens -> ( id . id commaPrefacedId ) .
    DO_ACTION       reduce using rule 92 (funcParens -> ( id . id commaPrefacedId ) .)
    DO_CALL         reduce using rule 92 (funcParens -> ( id . id commaPrefacedId ) .)
    DO_DIRECTIVE    reduce using rule 92 (funcParens -> ( id . id commaPrefacedId ) .)
    META            reduce using rule 92 (funcParens -> ( id . id commaPrefacedId ) .)
    LINESKIP        reduce using rule 92 (funcParens -> ( id . id commaPrefacedId ) .)
    .               reduce using rule 92 (funcParens -> ( id . id commaPrefacedId ) .)


state 254

    (79) maybeSubFunction -> . id parens maybeSubFunction .
    DO_ACTION       reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    DO_CALL         reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    DO_DIRECTIVE    reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    META            reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)
    LINESKIP        reduce using rule 79 (maybeSubFunction -> . id parens maybeSubFunction .)


state 255

    (99) maybeMoreActionParams -> , numeric maybeMoreActionParams .
    )               reduce using rule 99 (maybeMoreActionParams -> , numeric maybeMoreActionParams .)


state 256

    (54) conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .
    DO_NOTHING      reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    UNSAFE          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    CONCLUDE        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    IF              reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    REPEAT          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RESET           reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    RETURN          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    CHANCE          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    [               reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    FUNCTION_START  reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_ACTION       reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_CALL         reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    DO_DIRECTIVE    reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    META            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    LINESKIP        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDFUNCTION     reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDDEF          reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDF            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDWITH         reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDIF           reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSE            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELIF            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSEC           reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ELSECHANCE      reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCEWITH   reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDCWITH        reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDCHANCE       reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)
    ENDC            reduce using rule 54 (conditionalTerminator -> ELIF functionType actionTypeStart nodeBody conditionalTerminator .)


state 257

    (39) optionalChance -> chanceBody actionTypeStart . nodeBody optionalChance
    (26) nodeBody -> . empty
    (27) nodeBody -> . segment nodeBody
    (135) empty -> .
    (31) segment -> . DO_NOTHING skip
    (32) segment -> . UNSAFE skip
    (33) segment -> . uncontrolledSegment
    (34) segment -> . CONCLUDE uncontrolledSegment
    (35) segment -> . conditional
    (36) segment -> . chance
    (55) uncontrolledSegment -> . directiveName maybeMetaType skip
    (56) uncontrolledSegment -> . maybeFunctionType actionTypeStart
    (50) conditional -> . IF uncontrolledSegment nodeBody conditionalTerminator
    (37) chance -> . chanceHeader actionTypeStart nodeBody chanceBody uncontrolledSegment nodeBody optionalChance
    (108) directiveName -> . REPEAT
    (109) directiveName -> . RESET
    (110) directiveName -> . RETURN
    (58) maybeFunctionType -> . empty
    (59) maybeFunctionType -> . functionType
    (44) chanceHeader -> . CHANCE ( id )
    (45) chanceHeader -> . CHANCE ( numeric )
    (68) functionType -> . registerType
    (69) functionType -> . functionLiteral
    (70) functionType -> . functionName
    (114) registerType -> . [ registerContent ]
    (85) functionLiteral -> . FUNCTION maybeFuncLiteralParens
    (76) functionName -> . FUNCTION_START id maybeParens maybeSubFunction
    (77) functionName -> . FUNCTION_START id parens
    (78) functionName -> . FUNCTION_START id
    ENDCHANCEWITH   reduce using rule 135 (empty -> .)
    ENDCWITH        reduce using rule 135 (empty -> .)
    ENDCHANCE       reduce using rule 135 (empty -> .)
    ENDC            reduce using rule 135 (empty -> .)
    ELSEC           reduce using rule 135 (empty -> .)
    ELSECHANCE      reduce using rule 135 (empty -> .)
    DO_ACTION       reduce using rule 135 (empty -> .)
    DO_CALL         reduce using rule 135 (empty -> .)
    DO_DIRECTIVE    reduce using rule 135 (empty -> .)
    META            reduce using rule 135 (empty -> .)
    LINESKIP        reduce using rule 135 (empty -> .)
    DO_NOTHING      shift and go to state 40
    UNSAFE          shift and go to state 41
    CONCLUDE        shift and go to state 43
    IF              shift and go to state 48
    REPEAT          shift and go to state 50
    RESET           shift and go to state 51
    RETURN          shift and go to state 52
    CHANCE          shift and go to state 54
    [               shift and go to state 58
    FUNCTION        shift and go to state 59
    FUNCTION_START  shift and go to state 60

    nodeBody                       shift and go to state 263
    empty                          shift and go to state 38
    segment                        shift and go to state 39
    uncontrolledSegment            shift and go to state 42
    conditional                    shift and go to state 44
    chance                         shift and go to state 45
    directiveName                  shift and go to state 46
    maybeFunctionType              shift and go to state 47
    chanceHeader                   shift and go to state 49
    functionType                   shift and go to state 53
    registerType                   shift and go to state 55
    functionLiteral                shift and go to state 56
    functionName                   shift and go to state 57

state 258

    (40) optionalTerminator -> ENDCHANCEWITH uncontrolledSegment . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 264

state 259

    (41) optionalTerminator -> ENDCWITH uncontrolledSegment . skip
    (133) skip -> . LINESKIP skip
    (134) skip -> . LINESKIP
    LINESKIP        shift and go to state 4

    skip                           shift and go to state 265

state 260

    (42) optionalTerminator -> ENDCHANCE skip .
    DO_NOTHING      reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    UNSAFE          reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    CONCLUDE        reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    IF              reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    REPEAT          reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    RESET           reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    RETURN          reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    CHANCE          reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    [               reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    FUNCTION        reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    FUNCTION_START  reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    DO_ACTION       reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    DO_CALL         reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    DO_DIRECTIVE    reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    META            reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    LINESKIP        reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDFUNCTION     reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDDEF          reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDF            reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDWITH         reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDIF           reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ELSE            reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ELIF            reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ELSEC           reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ELSECHANCE      reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDCHANCEWITH   reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDCWITH        reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDCHANCE       reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)
    ENDC            reduce using rule 42 (optionalTerminator -> ENDCHANCE skip .)


state 261

    (43) optionalTerminator -> ENDC skip .
    DO_NOTHING      reduce using rule 43 (optionalTerminator -> ENDC skip .)
    UNSAFE          reduce using rule 43 (optionalTerminator -> ENDC skip .)
    CONCLUDE        reduce using rule 43 (optionalTerminator -> ENDC skip .)
    IF              reduce using rule 43 (optionalTerminator -> ENDC skip .)
    REPEAT          reduce using rule 43 (optionalTerminator -> ENDC skip .)
    RESET           reduce using rule 43 (optionalTerminator -> ENDC skip .)
    RETURN          reduce using rule 43 (optionalTerminator -> ENDC skip .)
    CHANCE          reduce using rule 43 (optionalTerminator -> ENDC skip .)
    [               reduce using rule 43 (optionalTerminator -> ENDC skip .)
    FUNCTION        reduce using rule 43 (optionalTerminator -> ENDC skip .)
    FUNCTION_START  reduce using rule 43 (optionalTerminator -> ENDC skip .)
    DO_ACTION       reduce using rule 43 (optionalTerminator -> ENDC skip .)
    DO_CALL         reduce using rule 43 (optionalTerminator -> ENDC skip .)
    DO_DIRECTIVE    reduce using rule 43 (optionalTerminator -> ENDC skip .)
    META            reduce using rule 43 (optionalTerminator -> ENDC skip .)
    LINESKIP        reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDFUNCTION     reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDDEF          reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDF            reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDWITH         reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDIF           reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ELSE            reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ELIF            reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ELSEC           reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ELSECHANCE      reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDCHANCEWITH   reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDCWITH        reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDCHANCE       reduce using rule 43 (optionalTerminator -> ENDC skip .)
    ENDC            reduce using rule 43 (optionalTerminator -> ENDC skip .)


state 262

    (94) commaPrefacedId -> , id . id commaPrefacedId .
    )               reduce using rule 94 (commaPrefacedId -> , id . id commaPrefacedId .)


state 263

    (39) optionalChance -> chanceBody actionTypeStart nodeBody . optionalChance
    (38) optionalChance -> . optionalTerminator
    (39) optionalChance -> . chanceBody actionTypeStart nodeBody optionalChance
    (40) optionalTerminator -> . ENDCHANCEWITH uncontrolledSegment skip
    (41) optionalTerminator -> . ENDCWITH uncontrolledSegment skip
    (42) optionalTerminator -> . ENDCHANCE skip
    (43) optionalTerminator -> . ENDC skip
    (46) chanceBody -> . elsechance ( id )
    (47) chanceBody -> . elsechance ( numeric )
    (48) elsechance -> . ELSEC
    (49) elsechance -> . ELSECHANCE
    ENDCHANCEWITH   shift and go to state 246
    ENDCWITH        shift and go to state 247
    ENDCHANCE       shift and go to state 248
    ENDC            shift and go to state 249
    ELSEC           shift and go to state 183
    ELSECHANCE      shift and go to state 184

    chanceBody                     shift and go to state 243
    optionalChance                 shift and go to state 266
    optionalTerminator             shift and go to state 245
    elsechance                     shift and go to state 182

state 264

    (40) optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .
    DO_NOTHING      reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    UNSAFE          reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    CONCLUDE        reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    IF              reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    REPEAT          reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    RESET           reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    RETURN          reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    CHANCE          reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    [               reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    FUNCTION        reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    FUNCTION_START  reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    DO_ACTION       reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    DO_CALL         reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    DO_DIRECTIVE    reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    META            reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    LINESKIP        reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDFUNCTION     reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDDEF          reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDF            reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDWITH         reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDIF           reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELSE            reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELIF            reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELSEC           reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ELSECHANCE      reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDCHANCEWITH   reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDCWITH        reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDCHANCE       reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)
    ENDC            reduce using rule 40 (optionalTerminator -> ENDCHANCEWITH uncontrolledSegment skip .)


state 265

    (41) optionalTerminator -> ENDCWITH uncontrolledSegment skip .
    DO_NOTHING      reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    UNSAFE          reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    CONCLUDE        reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    IF              reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    REPEAT          reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    RESET           reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    RETURN          reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    CHANCE          reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    [               reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    FUNCTION        reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    FUNCTION_START  reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    DO_ACTION       reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    DO_CALL         reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    DO_DIRECTIVE    reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    META            reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    LINESKIP        reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDFUNCTION     reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDDEF          reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDF            reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDWITH         reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDIF           reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELSE            reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELIF            reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELSEC           reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ELSECHANCE      reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDCHANCEWITH   reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDCWITH        reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDCHANCE       reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)
    ENDC            reduce using rule 41 (optionalTerminator -> ENDCWITH uncontrolledSegment skip .)


state 266

    (39) optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .
    DO_NOTHING      reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    UNSAFE          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    CONCLUDE        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    IF              reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    REPEAT          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RESET           reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    RETURN          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    CHANCE          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    [               reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    FUNCTION        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    FUNCTION_START  reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_ACTION       reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_CALL         reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    DO_DIRECTIVE    reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    META            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    LINESKIP        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDFUNCTION     reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDDEF          reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDF            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDWITH         reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDIF           reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSE            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELIF            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSEC           reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ELSECHANCE      reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDCHANCEWITH   reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDCWITH        reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDCHANCE       reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)
    ENDC            reduce using rule 39 (optionalChance -> chanceBody actionTypeStart nodeBody optionalChance .)


Conflicts:

shift/reduce conflict for LINESKIP in state 4 resolved as shift